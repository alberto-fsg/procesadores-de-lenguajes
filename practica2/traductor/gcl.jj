//*****************************************************************
// File:   gcl.jj
// Author: Procesadores de Lenguajes-University of Zaragoza
// Date:   enero 25
// Coms:   compilar mediante "ant"
//*****************************************************************

options {
    IGNORE_CASE = true;
    COMMON_TOKEN_ACTION = true;
}

PARSER_BEGIN(gcl)

package traductor;

//...

public class gcl {
   //...
   
   public static void main(String[] args) {
	   gcl parser = null;
	   
	   try {
		   if(args.length == 0) {
			   parser = new gcl(System.in);
		   }
		   else {
			   parser = new gcl(new java.io.FileInputStream(args[0]));
		   }
		   //Programa es el símbolo inicial de la gramática
		   parser.Programa();
		   //...
		   System.out.println("***** Análisis terminado con éxito *****");
	   }
	   catch (java.io.FileNotFoundException e) {
		   System.err.println ("Fichero " + args[0] + " no encontrado.");
	   }
	   catch (TokenMgrError e) {
		   System.err.println("LEX_ERROR: " + e.getMessage());
	   }
	   catch (Exception e) {
			// Handle the exception
			System.err.println("An exception occurred: " + e.getMessage());
	   }
	}
}
PARSER_END(gcl)

// sacado de https://cs.lmu.edu/~ray/notes/javacc/
// "preprocesado"
SKIP: {
  " "
| "\t"
| "\n"
| "\r"
| <"--" (~["\n","\r"])* ("\n"|"\r")> // comentarios monolínea
}

// auxiliares
TOKEN : {
	< #LETTER: (["a"-"z","A"-"Z"]) >
|	< #DIGIT: ["0"-"9"] >
}

// todos los tokens de gcl
// tOTHER no es léxicamente válido, el resto de tokens si
TOKEN : {
     // palabras reservadas
     < tPROGRAMA: "Programa" >
|    < tREF: "ref" > 
|    < tINTEGER: "entero" >
|    < tCHARACTER: "caracter" >
|    < tBOOLEAN: "booleano" >
|    < tSELECTION: "Sel" >
|    < tEND_SELECTION: "Fsel" >
|    < tCASE: "caso" >
|    < tITERATION: "Mq" >
|    < tEND_ITERATION: "FMq" >
|    < tBEGGINING: "Principio" >
|    < tEND: "Fin" >
|    < tTRUE: "verdadero" >
|    < tFALSE: "falso" >
|    < tOTHERWISE: "dlc" >
|    < tABANDONAR: "abandonar" > 
|    < tNADA: "nada" >
    
     // literales
|    < tSTRING: "\"" ( ("\"\"") | ~["\""] )* "\"" >
|    < tCHAR: "'''" | "'" ~[] "'" > 
|    < tCONSTANT: ( <DIGIT> )+ >
    
     // operadores y símbolos
|    < tCOMA: "," >
|    < tSEMICOLON: ";" >
|    < tUNDERSCORE: "_" >
|    < tASSIGN: ":=" >
|    < tOPENING_SQUARE_BRACKET: "[" >
|    < tCLOSING_SQUARE_BRACKET: "]" >
|    < tCOLON: ":" >
|    < tOPENING_PARENTHESIS: "(" >
|    < tCLOSING_PARENTHESIS: ")" >
|    < tPLUS: "+" >
|    < tMINUS: "-" >
|    < tTIMES: "*" >
|    < tDIVIDE: "/" >
|    < tMOD: "mod" >
|    < tAND: "&" >
|    < tOR: "|" >
|    < tNOT: "!" >
|    < tGT: ">" >
|    < tGE: ">=" >
|    < tLT: "<" >
|    < tLE: "<=" >
|    < tEQUAL: "=" >
|    < tNOTEQUAL: "<>" >
|    < tDOT: "." >

|    < tIDENTIFICADOR: ( <LETTER> | "_" ) ( <LETTER> | <DIGIT> | "_" )* >

|    < tOTHER: ~[] >  // tOTHER no es léxicamente válido, el resto de tokens si
}

// deprecado al parecer, https://parsers.org/javacc21/token-hooks-revisited/
TOKEN_MGR_DECLS : {
    public static void CommonTokenAction(Token t) {
        System.out.printf("(%d,%d): %s \"%s\"%n", 
            t.beginLine, t.beginColumn, getTokenType(t.kind), t.image);
    }

    private static String getTokenType(int kind) {
        switch(kind) {
            case gclConstants.tIDENTIFICADOR: return "identificador";
            case gclConstants.tASSIGN: return "operador asignación";
            case gclConstants.tCONSTANT: return "constante entera";
            case gclConstants.tSTRING: return "cadena";
            case gclConstants.tCHAR: return "caracter";
            default: return "token"; // todos los tokens sin lexema relevante
        }
    }
}

//---------------------------------------------------------
void Programa() :
{ System.out.println("Programa"); }
{
    < tPROGRAMA >
    < tIDENTIFICADOR >

    ( LOOKAHEAD(3) declaracion_variables() )*
    ( declaracion_procs_funcs() )*

    < tBEGGINING >
    instrucciones()
    < tEND >
}
//---------------------------------------------------------
void declaracion_variables() :
{ System.out.println("Declaracion de variables"); }
{
    ( LOOKAHEAD(3) declaracion() )+
}

void declaracion() :
{ System.out.println("Declaracion"); }
{
    tipo()
    lista_ids()
    < tSEMICOLON >
}

void asignacion() :
{ System.out.println("Asignacion"); }
{
    < tIDENTIFICADOR >
    ( < tOPENING_SQUARE_BRACKET > expresion_simple() < tCLOSING_SQUARE_BRACKET > )?
    < tASSIGN >
    expresion()
    < tSEMICOLON >
}

void lista_ids() :
{ System.out.println("Lista de identificadores"); }
{
    < tIDENTIFICADOR >
    ( <tCOMA> < tIDENTIFICADOR > )*
}

void tipo() :
{ System.out.println("Tipo"); }
{
    LOOKAHEAD(2) tipoArray() | tipoEscalar()
}

void tipoEscalar() :
{ System.out.println("Tipo escalar"); }
{
    ( < tCHARACTER > |< tBOOLEAN > | < tINTEGER > )
}

void tipoArray() :
{ System.out.println("Tipo array"); }
{
    ( < tCHARACTER > |< tBOOLEAN > | < tINTEGER > )
    <tOPENING_SQUARE_BRACKET> expresion_simple() <tCLOSING_SQUARE_BRACKET>
}

//---------------------------------------------------------
void lista_una_o_mas_exps() :
{ System.out.println("Lista de una o más expresiones"); }
{
    ( expresion() )+
}

void expresion() :
{ System.out.println("Expresión"); }
{
    relacion()
    ( ( < tAND > | < tOR > ) relacion() )*
}

void relacion() :
{ System.out.println("Relación"); }
{
    expresion_simple()
    ( operador_relacional() expresion_simple() )?
}

void operador_relacional() :
{ System.out.println("Operador relacional"); }
{
    < tEQUAL > | < tNOTEQUAL > | < tLT > | < tLE > | < tGT > | < tGE > 
}

void expresion_simple() :
{ System.out.println("Expresión simple"); }
{
    termino()
    ( ( < tPLUS > | < tMINUS > ) termino() )*
}

void termino() :
{ System.out.println("Término"); }
{
    factor()
    ( operador_multiplicativo() factor() )*
}

void operador_multiplicativo() :
{ System.out.println("Operador multiplicativo"); }
{
    < tTIMES > | < tDIVIDE > | < tMOD >
}

void factor() :
{ System.out.println("Factor"); }
{
    ( <tNOT> | < tPLUS > | < tMINUS > )?
    ( < tOPENING_PARENTHESIS > expresion() < tCLOSING_PARENTHESIS > | primario() )
}

void primario() :
{ System.out.println("Primario"); }
{
//    <tENTACAR> <tOPENING_PARENTHESIS> expresion() <tCLOSING_PARENTHESIS>
//|   <tCARAENT> <tOPENING_PARENTHESIS> expresion() <tCLOSING_PARENTHESIS>
//|   
    <tSTRING>
|   LOOKAHEAD(2)
        //<tIDENTIFICADOR> <tOPENING_PARENTHESIS> lista_una_o_mas_exps() <tCLOSING_PARENTHESIS> //invoc a func.
        //llamar_funcion()
            < tIDENTIFICADOR >
            < tOPENING_PARENTHESIS >
            parametros_llamada_funcion()
            < tCLOSING_PARENTHESIS >
|   LOOKAHEAD(2)
        <tIDENTIFICADOR> <tOPENING_SQUARE_BRACKET> expresion() <tCLOSING_SQUARE_BRACKET> //comp. array
|   <tCONSTANT>
|   <tCHAR>
|   <tTRUE>
|   <tFALSE>
|   <tIDENTIFICADOR>
}
//---------------------------------------------------------
void declaracion_procs_funcs() :
{ System.out.println("Declaración de procedimientos/funciones"); }
{
    ( declaracion_proc() | declaracion_func() )+
}

void declaracion_proc() :
{ System.out.println("Declaración de procedimiento"); }
{
    <tIDENTIFICADOR>
    < tOPENING_PARENTHESIS >
    ( parametros_declaraciones() )*
    < tCLOSING_PARENTHESIS >
    ( LOOKAHEAD(3) declaracion_variables() )*
    ( declaracion_procs_funcs() )*
    < tBEGGINING >
    instrucciones()
    < tEND >
}

void declaracion_func() :
{ System.out.println("Declaración de función"); }
{
    tipoEscalar()
    <tIDENTIFICADOR>
    < tOPENING_PARENTHESIS >
    ( parametros_declaraciones() )*
    < tCLOSING_PARENTHESIS >
    ( LOOKAHEAD(3) declaracion_variables() )*
    ( declaracion_procs_funcs() )*
    < tBEGGINING >
    instrucciones()
    < tEND >
}
//---------------------------------------------------------
void instrucciones() :
{ System.out.println("Instrucciones"); }
{
    ( instruccion() )*
}

void instruccion() :
{ System.out.println("Instrucción"); }
{
    LOOKAHEAD(2)
    llamar_funcion()
|   asignacion()
|   seleccion()
|   bucle()
|   declaracion_procs_funcs()
|   < tABANDONAR > < tSEMICOLON>
|   < tNADA > < tSEMICOLON>
}

void llamar_funcion() :
{ System.out.println("Llamar función"); }
{
    < tIDENTIFICADOR >
    < tOPENING_PARENTHESIS >
    parametros_llamada_funcion()
    < tCLOSING_PARENTHESIS >
    < tSEMICOLON >
}

void parametros_llamada_funcion() :
{ System.out.println("Parámetros llamada función"); }
{
    ( expresion() )?
    (<tCOMA> expresion() )*
    //( LOOKAHEAD(2) <tIDENTIFICADOR> <tOPENING_SQUARE_BRACKET> expresion_simple() <tCLOSING_SQUARE_BRACKET> | <tIDENTIFICADOR> | expresion() )?
    //(<tCOMA>  (LOOKAHEAD(2) <tIDENTIFICADOR> <tOPENING_SQUARE_BRACKET> expresion_simple() <tCLOSING_SQUARE_BRACKET> | <tIDENTIFICADOR> | expresion() ))*
}

void seleccion() :
{ System.out.println("Selección"); }
{
    < tSELECTION > 
    ( < tCASE > expresion() < tCOLON > instrucciones() )+
    [ < tOTHERWISE > < tCOLON > instrucciones() ]
    < tEND_SELECTION >
}

void bucle() :
{ System.out.println("Bucle"); }
{
    < tITERATION >
    expresion()
    instrucciones()
    < tEND_ITERATION >
}

void parametros_declaraciones() :
{ System.out.println("Parámetros declaraciones"); }
{
    tipo()
    ( < tREF > )?
    lista_ids()
    (
        < tSEMICOLON >
        tipo()
        ( < tREF > )?
        lista_ids()
    )*
}
