/* Generated By:JavaCC: Do not edit this line. gcl.java */
package traductor;

import lib.symbolTable.*;
import lib.symbolTable.exceptions.*;

import java.util.*;

public class gcl implements gclConstants {
    // tabla de símbolos global
        static SymbolTable st;

   public static void main(String[] args) {
           gcl parser = null;

           try {
           st = new SymbolTable();

                   if(args.length == 0) {
                           parser = new gcl(System.in);
                   }
                   else {
                           parser = new gcl(new java.io.FileInputStream(args[0]));
                   }
                   //Programa es el símbolo inicial de la gramática
                   parser.Programa();
                   //...
                   System.out.println("***** An\u00e1lisis terminado con \u00e9xito *****");
           }
           catch (java.io.FileNotFoundException e) {
                   System.err.println ("Fichero " + args[0] + " no encontrado.");
           }
           catch (TokenMgrError e) {
                   System.err.println("LEX_ERROR: " + e.getMessage());
           }
           catch (Exception e) {
                        // Handle the exception
                        System.err.println("An exception occurred: " + e.getMessage());
           }
        }

///////////////////////////////////////////////////////////////////////////////
// 2. ANALIZADOR SINTÁCTICO
///////////////////////////////////////////////////////////////////////////////

/** Programa */
  static final public void Programa() throws ParseException {
    jj_consume_token(tPROGRAMA);
    jj_consume_token(tIDENTIFICADOR);
    label_1:
    while (true) {
      if (jj_2_1(3)) {
        ;
      } else {
        break label_1;
      }
      declaracion_variables();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tINTEGER:
      case tCHARACTER:
      case tBOOLEAN:
      case tIDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_2;
      }
      declaracion_procs_funcs();
    }
    jj_consume_token(tBEGGINING);
    instrucciones();
    jj_consume_token(tEND);
  }

///////////////////////////////////////////////////////////////////////////////

/** Tipos */
  static final public AtribTipo tipo() throws ParseException {
    AtribTipo aT;
    if (jj_2_2(2)) {
      aT = tipoArray();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tINTEGER:
      case tCHARACTER:
      case tBOOLEAN:
        aT = tipoEscalar();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return aT;}
    throw new Error("Missing return statement in function");
  }

  static final public AtribTipo tipoEscalar() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tINTEGER:
      jj_consume_token(tINTEGER);
                      {if (true) return new AtribTipo(Symbol.Types.INT );}
      break;
    case tCHARACTER:
      jj_consume_token(tCHARACTER);
                      {if (true) return new AtribTipo(Symbol.Types.CHAR);}
      break;
    case tBOOLEAN:
      jj_consume_token(tBOOLEAN);
                      {if (true) return new AtribTipo(Symbol.Types.BOOL);}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public AtribTipo tipoArray() throws ParseException {
    Symbol.Types t;
    AtribExp aE;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tCHARACTER:
      jj_consume_token(tCHARACTER);
                       t = Symbol.Types.CHAR;
      break;
    case tBOOLEAN:
      jj_consume_token(tBOOLEAN);
                       t = Symbol.Types.BOOL;
      break;
    case tINTEGER:
      jj_consume_token(tINTEGER);
                       t = Symbol.Types.INT;
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(tOPENING_SQUARE_BRACKET);
    aE = expresion_simple();
    jj_consume_token(tCLOSING_SQUARE_BRACKET);
        {if (true) return new AtribTipo(t, Integer.parseInt(aE.image));}
    throw new Error("Missing return statement in function");
  }

///////////////////////////////////////////////////////////////////////////////

/** Declaración variables */
  static final public void declaracion_variables() throws ParseException {
    label_3:
    while (true) {
      declaracion();
      if (jj_2_3(3)) {
        ;
      } else {
        break label_3;
      }
    }
  }

  static final public ArrayList<String> lista_ids() throws ParseException {
    ArrayList<String> lVars = new ArrayList<String>();
    Token t;
    t = jj_consume_token(tIDENTIFICADOR);
      lVars.add(t.image);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tCOMA:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      jj_consume_token(tCOMA);
      t = jj_consume_token(tIDENTIFICADOR);
          lVars.add(t.image);
    }
      {if (true) return lVars;}
    throw new Error("Missing return statement in function");
  }

  static final public void declaracion() throws ParseException {
    AtribTipo aT;
    ArrayList<String> lVars;
    aT = tipo();
    lVars = lista_ids();
    jj_consume_token(tSEMICOLON);
        for(String id : lVars) {
            try {
                Symbol sV = null;
                if(aT.isArray) {
                    sV = new SymbolArray(id, 0, aT.size-1, aT.type);
                } else {
                    switch(aT.type) {
                        case INT:
                            sV = new SymbolInt(id); break;
                        case BOOL:
                            sV = new SymbolBool(id); break;
                        case CHAR:
                            sV = new SymbolChar(id); break;
                        default:
                            System.out.println("Error: tipo no definido para variable \"" +
                                id + "\".");
                    }
                }
                if(sV != null) {
                    st.insertSymbol(sV);
                    System.out.println("[TABLA DE S\u00cdMBOLOS] Insertado " + sV.toString());
                }
            } catch(AlreadyDefinedSymbolException e) {
                System.out.println("Error: ya existe variable con identificador \"" +
                    id + "\".");
            }
        }
  }

///////////////////////////////////////////////////////////////////////////////

/** Expresiones */

// orden de prioridad de expansión (cuanto más izquierda, más prioridad)
// primario - factor - termino - expresion_simple - relacion - expresion
  static final public AtribExp primario() throws ParseException {
 Token t;
    if (jj_2_4(2)) {
      t = jj_consume_token(tIDENTIFICADOR);
      jj_consume_token(tOPENING_PARENTHESIS);
      parametros_llamada_funcion();
      jj_consume_token(tCLOSING_PARENTHESIS);
         {if (true) return null;}
    } else if (jj_2_5(2)) {
      t = jj_consume_token(tIDENTIFICADOR);
      jj_consume_token(tOPENING_SQUARE_BRACKET);
      expresion();
      jj_consume_token(tCLOSING_SQUARE_BRACKET);
         {if (true) return null;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tIDENTIFICADOR:
        t = jj_consume_token(tIDENTIFICADOR);
            Symbol s = null;
            try {
                s = st.getSymbol(t.image);
                {if (true) return new AtribExp(s.type, t.image, true, false);}
            } catch(SymbolNotFoundException e) {
                System.out.println("Error: no definido \"" + t.image + "\".");
                {if (true) return new AtribExp(Symbol.Types.UNDEFINED, t.image, false, false);}
            }
        break;
      case tCONSTANT:
        t = jj_consume_token(tCONSTANT);
          {if (true) return new AtribExp(Symbol.Types.INT, t.image, false, true);}
        break;
      case tCHAR:
        t = jj_consume_token(tCHAR);
          {if (true) return new AtribExp(Symbol.Types.CHAR, t.image, false, true);}
        break;
      case tSTRING:
        t = jj_consume_token(tSTRING);
          {if (true) return new AtribExp(Symbol.Types.STRING, t.image, false, true);}
        break;
      case tTRUE:
        t = jj_consume_token(tTRUE);
          {if (true) return new AtribExp(Symbol.Types.BOOL, t.image, false, true);}
        break;
      case tFALSE:
        t = jj_consume_token(tFALSE);
          {if (true) return new AtribExp(Symbol.Types.BOOL, t.image, false, true);}
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tPLUS:
    case tMINUS:
    case tNOT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tNOT:
        jj_consume_token(tNOT);
        break;
      case tPLUS:
        jj_consume_token(tPLUS);
        break;
      case tMINUS:
        jj_consume_token(tMINUS);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tOPENING_PARENTHESIS:
      jj_consume_token(tOPENING_PARENTHESIS);
      expresion();
      jj_consume_token(tCLOSING_PARENTHESIS);
      break;
    case tTRUE:
    case tFALSE:
    case tSTRING:
    case tCHAR:
    case tCONSTANT:
    case tIDENTIFICADOR:
      primario();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void termino() throws ParseException {
    factor();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tTIMES:
      case tDIVIDE:
      case tMOD:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_5;
      }
      operador_multiplicativo();
      factor();
    }
  }

  static final public AtribExp expresion_simple() throws ParseException {
  System.out.println("Expresi\u00f3n simple");
    termino();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tPLUS:
      case tMINUS:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tPLUS:
        jj_consume_token(tPLUS);
        break;
      case tMINUS:
        jj_consume_token(tMINUS);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      termino();
    }
      {if (true) return new AtribExp(Symbol.Types.INT, "2", false, true);}
    throw new Error("Missing return statement in function");
  }

  static final public void relacion() throws ParseException {
    expresion_simple();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tGT:
    case tGE:
    case tLT:
    case tLE:
    case tEQUAL:
    case tNOTEQUAL:
      operador_relacional();
      expresion_simple();
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  }

  static final public void expresion() throws ParseException {
    relacion();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tAND:
      case tOR:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tAND:
        jj_consume_token(tAND);
        break;
      case tOR:
        jj_consume_token(tOR);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      relacion();
    }
  }

  static final public void lista_una_o_mas_exps() throws ParseException {
    label_8:
    while (true) {
      expresion();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tTRUE:
      case tFALSE:
      case tSTRING:
      case tCHAR:
      case tCONSTANT:
      case tOPENING_PARENTHESIS:
      case tPLUS:
      case tMINUS:
      case tNOT:
      case tIDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_8;
      }
    }
  }

  static final public void operador_multiplicativo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tTIMES:
      jj_consume_token(tTIMES);
      break;
    case tDIVIDE:
      jj_consume_token(tDIVIDE);
      break;
    case tMOD:
      jj_consume_token(tMOD);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void operador_relacional() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tEQUAL:
      jj_consume_token(tEQUAL);
      break;
    case tNOTEQUAL:
      jj_consume_token(tNOTEQUAL);
      break;
    case tLT:
      jj_consume_token(tLT);
      break;
    case tLE:
      jj_consume_token(tLE);
      break;
    case tGT:
      jj_consume_token(tGT);
      break;
    case tGE:
      jj_consume_token(tGE);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

///////////////////////////////////////////////////////////////////////////////

/** Asignación */
  static final public void asignacion() throws ParseException {
  System.out.println("Asignacion");
    jj_consume_token(tIDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tOPENING_SQUARE_BRACKET:
      jj_consume_token(tOPENING_SQUARE_BRACKET);
      expresion_simple();
      jj_consume_token(tCLOSING_SQUARE_BRACKET);
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(tASSIGN);
    expresion();
    jj_consume_token(tSEMICOLON);
  }

///////////////////////////////////////////////////////////////////////////////

/** Funciones y procedimientos */
  static final public void declaracion_procs_funcs() throws ParseException {
  System.out.println("Declaraci\u00f3n de procedimientos/funciones");
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tIDENTIFICADOR:
        declaracion_proc();
        break;
      case tINTEGER:
      case tCHARACTER:
      case tBOOLEAN:
        declaracion_func();
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tINTEGER:
      case tCHARACTER:
      case tBOOLEAN:
      case tIDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_9;
      }
    }
  }

  static final public void declaracion_proc() throws ParseException {
  System.out.println("Declaraci\u00f3n de procedimiento");
    jj_consume_token(tIDENTIFICADOR);
    jj_consume_token(tOPENING_PARENTHESIS);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tINTEGER:
      case tCHARACTER:
      case tBOOLEAN:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_10;
      }
      parametros_declaraciones();
    }
    jj_consume_token(tCLOSING_PARENTHESIS);
    label_11:
    while (true) {
      if (jj_2_6(3)) {
        ;
      } else {
        break label_11;
      }
      declaracion_variables();
    }
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tINTEGER:
      case tCHARACTER:
      case tBOOLEAN:
      case tIDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_12;
      }
      declaracion_procs_funcs();
    }
    jj_consume_token(tBEGGINING);
    instrucciones();
    jj_consume_token(tEND);
  }

  static final public void declaracion_func() throws ParseException {
  System.out.println("Declaraci\u00f3n de funci\u00f3n");
    tipoEscalar();
    jj_consume_token(tIDENTIFICADOR);
    jj_consume_token(tOPENING_PARENTHESIS);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tINTEGER:
      case tCHARACTER:
      case tBOOLEAN:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_13;
      }
      parametros_declaraciones();
    }
    jj_consume_token(tCLOSING_PARENTHESIS);
    label_14:
    while (true) {
      if (jj_2_7(3)) {
        ;
      } else {
        break label_14;
      }
      declaracion_variables();
    }
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tINTEGER:
      case tCHARACTER:
      case tBOOLEAN:
      case tIDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_15;
      }
      declaracion_procs_funcs();
    }
    jj_consume_token(tBEGGINING);
    instrucciones();
    jj_consume_token(tEND);
  }

  static final public void llamar_funcion() throws ParseException {
  System.out.println("Llamar funci\u00f3n");
    jj_consume_token(tIDENTIFICADOR);
    jj_consume_token(tOPENING_PARENTHESIS);
    parametros_llamada_funcion();
    jj_consume_token(tCLOSING_PARENTHESIS);
    jj_consume_token(tSEMICOLON);
  }

  static final public void parametros_llamada_funcion() throws ParseException {
  System.out.println("Par\u00e1metros llamada funci\u00f3n");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tTRUE:
    case tFALSE:
    case tSTRING:
    case tCHAR:
    case tCONSTANT:
    case tOPENING_PARENTHESIS:
    case tPLUS:
    case tMINUS:
    case tNOT:
    case tIDENTIFICADOR:
      expresion();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tCOMA:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_16;
      }
      jj_consume_token(tCOMA);
      expresion();
    }
  }

// --- Instrucciones ----------------------------------------------------------
  static final public void instrucciones() throws ParseException {
  System.out.println("Instrucciones");
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tINTEGER:
      case tCHARACTER:
      case tBOOLEAN:
      case tSELECTION:
      case tITERATION:
      case tABANDONAR:
      case tNADA:
      case tIDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_17;
      }
      instruccion();
    }
  }

  static final public void instruccion() throws ParseException {
  System.out.println("Instrucci\u00f3n");
    if (jj_2_8(2)) {
      llamar_funcion();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tIDENTIFICADOR:
        asignacion();
        break;
      case tSELECTION:
        seleccion();
        break;
      case tITERATION:
        bucle();
        break;
      case tINTEGER:
      case tCHARACTER:
      case tBOOLEAN:
        declaracion_procs_funcs();
        break;
      case tABANDONAR:
        jj_consume_token(tABANDONAR);
        jj_consume_token(tSEMICOLON);
        break;
      case tNADA:
        jj_consume_token(tNADA);
        jj_consume_token(tSEMICOLON);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void seleccion() throws ParseException {
  System.out.println("Selecci\u00f3n");
    jj_consume_token(tSELECTION);
    label_18:
    while (true) {
      jj_consume_token(tCASE);
      expresion();
      jj_consume_token(tCOLON);
      instrucciones();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tCASE:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_18;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tOTHERWISE:
      jj_consume_token(tOTHERWISE);
      jj_consume_token(tCOLON);
      instrucciones();
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    jj_consume_token(tEND_SELECTION);
  }

  static final public void bucle() throws ParseException {
  System.out.println("Bucle");
    jj_consume_token(tITERATION);
    expresion();
    instrucciones();
    jj_consume_token(tEND_ITERATION);
  }

  static final public void parametros_declaraciones() throws ParseException {
  System.out.println("Par\u00e1metros declaraciones");
    tipo();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tREF:
      jj_consume_token(tREF);
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    lista_ids();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tSEMICOLON:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_19;
      }
      jj_consume_token(tSEMICOLON);
      tipo();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tREF:
        jj_consume_token(tREF);
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      lista_ids();
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_3_1() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(tIDENTIFICADOR)) return true;
    if (jj_scan_token(tOPENING_PARENTHESIS)) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(tOPENING_PARENTHESIS)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_27()) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(tSEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(tCOMA)) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(tFALSE)) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(tTRUE)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(tIDENTIFICADOR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_30()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(tSTRING)) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(tCHAR)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(tCONSTANT)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    Token xsp;
    if (jj_3_3()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(tIDENTIFICADOR)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(tINTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(tBOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(tCHARACTER)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(tIDENTIFICADOR)) return true;
    if (jj_scan_token(tOPENING_SQUARE_BRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    }
    if (jj_scan_token(tOPENING_SQUARE_BRACKET)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(tIDENTIFICADOR)) return true;
    if (jj_scan_token(tOPENING_PARENTHESIS)) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(tBOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(tCHARACTER)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(tINTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public gclTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  /** Whether we are looking ahead. */
  static private boolean jj_lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[34];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1c00,0x1c00,0x1c00,0x1c00,0x10000000,0xe300000,0x0,0x0,0xe300000,0x0,0x0,0x0,0x0,0x0,0x0,0xe300000,0x0,0x0,0x0,0x1c00,0x1c00,0x1c00,0x1c00,0x1c00,0x1c00,0xe300000,0x10000000,0x1813c00,0x1813c00,0x8000,0x400000,0x200,0x20000000,0x200,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x100000,0x0,0x0,0x0,0x0,0x100000,0x1060,0x1060,0x100008,0x380,0x60,0x60,0x7e000,0xc00,0xc00,0x101068,0x380,0x7e000,0x1,0x100000,0x100000,0x0,0x100000,0x0,0x100000,0x101068,0x0,0x100000,0x100000,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[8];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public gcl(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public gcl(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new gclTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public gcl(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new gclTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public gcl(gclTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(gclTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[54];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 34; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 54; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 8; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
