// AUTOGENERADO - NO EDITAR MANUALMENTE
// Este archivo se genera automáticamente por build.sh

// --- INICIO DE main.jj ---
//*****************************************************************
// File:   gcl.jj
// Author: Procesadores de Lenguajes-University of Zaragoza
// Date:   enero 25
// Coms:   compilar mediante "ant"
//*****************************************************************

///////////////////////////////////////////////////////////////////////////////
// 1. ANALIZADOR LÉXICO
///////////////////////////////////////////////////////////////////////////////

options {
    IGNORE_CASE = true;
    COMMON_TOKEN_ACTION = true;
}

PARSER_BEGIN(gcl)

package traductor;

import lib.symbolTable.*;
import lib.symbolTable.exceptions.*;

import java.util.*;

public class gcl {
    // tabla de símbolos global
    static SymbolTable st;
    
   public static void main(String[] args) {
	   gcl parser = null;
	   
	   try {
           st = new SymbolTable();

		   if(args.length == 0) {
			   parser = new gcl(System.in);
		   }
		   else {
			   parser = new gcl(new java.io.FileInputStream(args[0]));
		   }
		   //Programa es el símbolo inicial de la gramática
		   parser.Programa();
		   //...
		   System.out.println("***** Análisis terminado con éxito *****");
	   }
	   catch (java.io.FileNotFoundException e) {
		   System.out.println ("Fichero " + args[0] + " no encontrado.");
	   }
	   catch (TokenMgrError e) {
		   System.out.println("LEX_ERROR: " + e.getMessage());
	   }
	   catch (Exception e) {
			System.out.println("Ha ocurrido una excepción: " + e.getMessage());
	   }
	}

    // inserta todos los símbolos de "lVars" de tipo "aT" y los marca como ref si "isRef",
    // auxiliar para "parametros_declaraciones" (los parámetros de la declaración de una función/procedimiento)
    private static void insertSymbols(AtribTipo aT, boolean isRef, ArrayList<String> lVars) {
        for (String id : lVars) {
            try {
                Symbol sV = null;
                if (aT.isArray) {
                    sV = new SymbolArray(id, 0, aT.size-1, aT.type);
                } else {
                    switch(aT.type) {
                        case INT:
                            sV = new SymbolInt(id); break;
                        case BOOL:
                            sV = new SymbolBool(id); break;
                        case CHAR:
                            sV = new SymbolChar(id); break;
                        default:
                            System.out.println("Error: tipo no definido para variable \"" + id + "\".");
                    }
                }
                if (sV != null) {
                    sV.parClass = isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL;
                    st.insertSymbol(sV);
                    System.out.println("[TABLA DE SÍMBOLOS] Insertado " + sV.toString());
                }
            } catch (AlreadyDefinedSymbolException e) {
                System.out.println("Error: Identificador ya existe: \"" + id + "\"");
            }
        }
    }

    private static boolean typeNotEqual(Symbol.Types esperado, Symbol.Types real, String error) {
        if(esperado == real) {
            if(error != null) printError(error);
            return false;
        }
        return true;
    }

    private static boolean typeEqual(Symbol.Types esperado, Symbol.Types real, String error) {
        if(esperado != real) {
            if(error != null) printError(error);
            return false;
        }
        return true;
    }

    private static boolean typeNotEqual(List<Symbol.Types> esperado, Symbol.Types real, String error) {
        if(!esperado.isEmpty()) {
            for(Symbol.Types t : esperado) {
                if(t == real) {
                    if(error != null) printError(error);
                    return false;
                }
            }
        }
        return true;
    }

    private static boolean typeEqual(Symbol.Types esperado, List<Symbol.Types> real, String error) {
        if(!real.isEmpty()) {
            for(Symbol.Types t : real) {
                if(esperado != t) {
                    if(error != null) printError(error);
                    return false;
                }
            }
        }
        return true;
    }

    private static boolean typeNotEqual(List<Symbol.Types> esperado, ArrayList<String> real) {
        boolean ok = true;
        Symbol s;
        for(String i : real) {
            try {
                s = st.getSymbol(i);
                ok = ok && typeNotEqual(esperado, s.type, String.format("leer_lin o leer incompatible con tipo de dato \"%s\"", s.type));
            } catch(SymbolNotFoundException e) {
                printError(String.format("Variable \"%s\" no encontrada en tabla de símbolos.", i));
            }
        }
        return ok;
    }

    private static void insertProcedure(Token identificador, ArrayList<Symbol> parametros) {
        SymbolProcedure sProc = new SymbolProcedure(identificador.image, parametros);
        try {
            st.insertSymbol(sProc);
            insertParameters(parametros);
        } catch(AlreadyDefinedSymbolException e) {
            printError(String.format("Ya definido valor de identificador \"%s\".", identificador.image));
        }
    }

    private static void insertFunction(Token identificador, AtribTipo returnType, ArrayList<Symbol> parametros) {
        if(returnType.type != Symbol.Types.INT && returnType.type != Symbol.Types.BOOL && returnType.type != Symbol.Types.CHAR) {
            printError(String.format("Una función solo puede devolver valores de tipo INT, BOOL o CHAR. Tipo dado: %s.", returnType.type));
        } else {
            SymbolFunction sFunc = new SymbolFunction(identificador.image, parametros, returnType.type);
            try {
                st.insertSymbol(sFunc);
                insertParameters(parametros);
            } catch(AlreadyDefinedSymbolException e) {
                printError(String.format("Ya definido valor de identificador \"%s\".", identificador.image));
            }
        }
    }

    private static void insertParameters(ArrayList<Symbol> parametros) {
        st.insertBlock();
        for(Symbol param : parametros) {
            try {
                st.insertSymbol(param);
                printMessage("Tabla de símbolos",
                    String.format("\"%s\" insertado en nivel %d.", param.name, st.level));
            } catch(AlreadyDefinedSymbolException e) {
                printError(String.format("Ya definida variable de identificador \"%s\".", param.name));
            }
        }
    }

    private static void checkParameters(Token identificador, ArrayList<AtribExp> parametros) {
        try {
            Symbol funOproc = st.getSymbol(identificador.image);
            ArrayList<Symbol> params;
            if(funOproc.type == Symbol.Types.FUNCTION || funOproc.type == Symbol.Types.PROCEDURE) {
                if(funOproc.type == Symbol.Types.FUNCTION)
                    params = ((SymbolFunction)funOproc).parList;
                else
                    params = ((SymbolProcedure)funOproc).parList;
            } else {
                printError(String.format("\"%s\" no es una función o procedimiento.", identificador.image));
                return;
            }
            // Comprobar que el número de parámetros es el adecuado
            if(params.size() != parametros.size()) {
                printError(String.format("\"%s\" esperaba %d parámetros. Recibidos %d parámetros.",
                    identificador.image, params.size(), parametros.size()));
                return;
            }
            // Comprobar validez parámetro a parámetro
            for(int i = 0; i < params.size(); ++i) {
                // Comprobar que parámetro pasado es del tipo correcto
                if(params.get(i).type != parametros.get(i).type) {
                    printError(String.format("Parámetro no compatible con valor dado. Tipo esperado: %s. Tipo recibido: %s.",
                        params.get(i).type, parametros.get(i).type));
                }
                // Comprobar que parámetro pasado es una variable si se requiere paso por referencia
                if(params.get(i).parClass == Symbol.ParameterClass.REF && !parametros.get(i).isVar) {
                    printError("Parámetro por referencia. Espera variable, recibido constante.");
                }
            }
        } catch(SymbolNotFoundException e) {
            printError(String.format("\"%s\" no es una función o procedimiento.", identificador.image));
        }
    }

    private static void printError(String error) {
        String crojo = "\u001B[31m";
        String reset = "\u001B[0m";
        System.err.printf("%sError: (%d, %d):%s %s\n", crojo, 
            token.beginLine, token.beginColumn, reset, error);
    }

    private static void printMessage(String label, String message) {
        String verde = "\u001B[32m";
        String reset = "\u001B[0m";
        System.out.printf("%s%s:%s %s\n", verde, label, reset, message);
    }
}

PARSER_END(gcl)

///////////////////////////////////////////////////////////////////////////////
// 2. ANALIZADOR SINTÁCTICO
///////////////////////////////////////////////////////////////////////////////

// --- INICIO DE tokens.jj ---
// sacado de https://cs.lmu.edu/~ray/notes/javacc/
// "preprocesado"
SKIP: {
  " "
| "\t"
| "\n"
| "\r"
| <"--" (~["\n","\r"])* ("\n"|"\r")> // comentarios monolínea
}

// auxiliares
TOKEN : {
	< #LETTER: (["a"-"z","A"-"Z"]) >
|	< #DIGIT: ["0"-"9"] >
}

// todos los tokens de gcl
// tOTHER no es léxicamente válido, el resto de tokens si
TOKEN : {
     // palabras reservadas
     < tPROGRAMA: "Programa" >
|    < tESCRIBIR_LIN: "escribir_lin" >
|    < tESCRIBIR: "escribir" >
|    < tLEER_LIN: "leer_lin" >
|    < tLEER: "leer" >
|    < tENTACAR: "entAcar" >
|    < tCARAENT: "carAent" >
|    < tREF: "ref" > 
|    < tINTEGER: "entero" >
|    < tCHARACTER: "caracter" >
|    < tBOOLEAN: "booleano" >
|    < tSELECTION: "Sel" >
|    < tEND_SELECTION: "Fsel" >
|    < tCASE: "caso" >
|    < tITERATION: "Mq" >
|    < tEND_ITERATION: "FMq" >
|    < tBEGGINING: "Principio" >
|    < tEND: "Fin" >
|    < tTRUE: "verdadero" >
|    < tFALSE: "falso" >
|    < tOTHERWISE: "dlc" >
|    < tABANDONAR: "abandonar" > 
|    < tNADA: "nada" >
    
     // literales
|    < tSTRING: "\"" ( ("\"\"") | ~["\""] )* "\"" >
|    < tCHAR: "'''" | "'" ~[] "'" > 
|    < tCONSTANT: ( <DIGIT> )+ >
    
     // operadores y símbolos
|    < tCOMA: "," >
|    < tSEMICOLON: ";" >
|    < tUNDERSCORE: "_" >
|    < tASSIGN: ":=" >
|    < tOPENING_SQUARE_BRACKET: "[" >
|    < tCLOSING_SQUARE_BRACKET: "]" >
|    < tCOLON: ":" >
|    < tOPENING_PARENTHESIS: "(" >
|    < tCLOSING_PARENTHESIS: ")" >
|    < tPLUS: "+" >
|    < tMINUS: "-" >
|    < tTIMES: "*" >
|    < tDIVIDE: "/" >
|    < tMOD: "mod" >
|    < tAND: "&" >
|    < tOR: "|" >
|    < tNOT: "!" >
|    < tGT: ">" >
|    < tGE: ">=" >
|    < tLT: "<" >
|    < tLE: "<=" >
|    < tEQUAL: "=" >
|    < tNOTEQUAL: "<>" >
|    < tDOT: "." >

|    < tIDENTIFICADOR: ( <LETTER> | "_" ) ( <LETTER> | <DIGIT> | "_" )* >

|    < tOTHER: ~[] >  // tOTHER no es léxicamente válido, el resto de tokens si
}

// deprecado al parecer, https://parsers.org/javacc21/token-hooks-revisited/
TOKEN_MGR_DECLS : {
    public static void CommonTokenAction(Token t) {
        if(false)
            System.out.printf("(%d,%d): %s \"%s\"%n", 
                t.beginLine, t.beginColumn, getTokenName(t.kind), t.image);
    }

    // función épica que devuelve el token (no su lexema)
    private static String getTokenName(int kind) {
        try {
            java.lang.reflect.Field[] fields = gclConstants.class.getDeclaredFields();
            for (java.lang.reflect.Field field : fields) {
                if (field.getType() == int.class 
                        && field.getInt(null) == kind 
                        && field.getName().startsWith("t")) {
                    return field.getName();
                }
            }
            return "UNKNOWN_TOKEN";
        } catch (IllegalAccessException e) {
            return "ERROR: " + e.getMessage();
        }
    }
}

// --- INICIO DE programa.jj ---
void Programa() :
{}
{
    < tPROGRAMA >
    < tIDENTIFICADOR >
    ( LOOKAHEAD(3) declaracion_variables() )*
    ( declaracion_procs_funcs() )*
    < tBEGGINING >
    instrucciones()
    < tEND >
}

// --- INICIO DE tipos.jj ---
AtribTipo tipo() :
{
    AtribTipo aT;
}
{
    (
        LOOKAHEAD(2) 
        aT = tipoArray() 
        | aT = tipoEscalar()
    )
    { return aT; }
}

AtribTipo tipoEscalar() :
{}
{
    <tINTEGER>      { return new AtribTipo(Symbol.Types.INT ); }
    | <tCHARACTER>  { return new AtribTipo(Symbol.Types.CHAR); }
    | <tBOOLEAN>    { return new AtribTipo(Symbol.Types.BOOL); }
}

AtribTipo tipoArray() :
{
    Symbol.Types t;
    AtribExp aE;
}
{
    (
        <tCHARACTER> { t = Symbol.Types.CHAR; }
        | <tBOOLEAN> { t = Symbol.Types.BOOL; }
        | <tINTEGER> { t = Symbol.Types.INT; }
    )
    <tOPENING_SQUARE_BRACKET>
    aE = expresion_simple()
    <tCLOSING_SQUARE_BRACKET>
    {
        return new AtribTipo(t, Integer.parseInt(aE.image));
    }
}

// --- INICIO DE variables.jj ---
void declaracion_variables() :
{}
{
    ( LOOKAHEAD(3) declaracion() )+
}

ArrayList<String> lista_ids() :
{
    ArrayList<String> lVars = new ArrayList<String>();
    Token t;
}
{
    t = <tIDENTIFICADOR>
    { lVars.add(t.image); }
    (
        <tCOMA>
        t = <tIDENTIFICADOR>
        { lVars.add(t.image); }
    )*
    { return lVars; }
}

void declaracion() :
{
    AtribTipo aT;
    ArrayList<String> lVars;
}
{
    aT = tipo()
    lVars = lista_ids()
    <tSEMICOLON>
    {
        for(String id : lVars) {
            try {
                Symbol sV = null;
                if(aT.isArray) {
                    sV = new SymbolArray(id, 0, aT.size-1, aT.type);
                } else {
                    switch(aT.type) {
                        case INT:
                            sV = new SymbolInt(id); break;
                        case BOOL:
                            sV = new SymbolBool(id); break;
                        case CHAR:
                            sV = new SymbolChar(id); break;
                        default:
                            printError(String.format("Tipo no válido para variable \"%s\".", id));
                    }
                }
                if(sV != null) {
                    st.insertSymbol(sV);
                    printMessage("Tabla de símbolos",
                        String.format("\"%s\" insertado en nivel %d.", sV.name, st.level));
                }
            } catch(AlreadyDefinedSymbolException e) {
                printError(String.format("Ya definida variable de identificador \"%s\".", id));
            }
        }
    }
}

void asignacion() :
{}
{
    < tIDENTIFICADOR >
    ( < tOPENING_SQUARE_BRACKET > expresion_simple() < tCLOSING_SQUARE_BRACKET > )?
    < tASSIGN >
    expresion()
    < tSEMICOLON >
}

// --- INICIO DE expresiones.jj ---
/**
 * Orden de prioridad de expansión (cuanto más izquierda, más prioridad).
 * primario - factor - termino - expresion_simple - relacion - expresion
 */

AtribExp primario() : 
{
    Token t;
    AtribExp ae;
    Symbol s = null;
    SymbolFunction s_func;
    SymbolArray s_array;
    boolean ok = true;
}
{
    (
        /** Caso: llamada a entAcar */
        entAcar()
        { return new AtribExp(Symbol.Types.CHAR, null, false, false); }
    |    
        /** Caso: llamada a carAent */
        carAent()
        { return new AtribExp(Symbol.Types.INT, null, false, false); }
    |
        /** Caso: llamada a función excluyendo procedimientos. */
        LOOKAHEAD(2) // Para distinguirlo de un array o variable.
        t = <tIDENTIFICADOR>
        <tOPENING_PARENTHESIS>
        parametros_llamada_funcion()
        <tCLOSING_PARENTHESIS>
        {
            try {
                s = st.getSymbol(t.image);
            } catch(SymbolNotFoundException e) {
                printError(String.format("Función \"%s\" no encontrada en tabla de símbolos.", t.image));
                return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
            }
            if(typeEqual(Symbol.Types.FUNCTION, s.type, String.format("Tipo incorrecto. Se esperaba FUNCTION pero se encontró %s.", s.type)))
                return new AtribExp(((SymbolFunction)s).returnType, null, false, false);
            else return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
        }
    |
        /** Caso: acceso a array */
        LOOKAHEAD(2) // Para distinguirlo del acceso a una variable.
        t = <tIDENTIFICADOR>
        <tOPENING_SQUARE_BRACKET>
        ae = expresion()
        <tCLOSING_SQUARE_BRACKET>
        {
            try {
                s = st.getSymbol(t.image);
            } catch (SymbolNotFoundException e) {
                printError(String.format("Array \"%s\" no encontrada en tabla de símbolos.", t.image));
                return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
            }
            /** El identificador hace referencia a un array */
            ok = typeEqual(Symbol.Types.ARRAY, s.type, String.format("Tipo incorrecto. Se esperaba ARRAY pero se encontró %s.", s.type));
            /** El indice de acceso al array es un entero */
            ok &= typeEqual(Symbol.Types.INT, ae.type, String.format("Tipo incorrecto. Se esperaba que el índice del array fuera un INT pero se encontró %s.", ae.type));
            /** Si el valor de acceso al vector es un entero y es constante, comprobar que es válido */
            s_array = (SymbolArray) s;
            if(ae.isConst && Integer.valueOf(ae.image) > s_array.maxInd) {
                printError(String.format("El índice %s es demasiado grande para el vector %s de tamaño %s.", ae.image, t.image, Integer.toString(s_array.maxInd + 1)));
                ok = false;
            }
            return ok ? new AtribExp(s_array.baseType, null, true, false) : new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
        }
    |
        /** Caso: acceso a una variable */
        t = <tIDENTIFICADOR>
        {
            try {
                s = st.getSymbol(t.image);
                return new AtribExp(s.type, t.image, true, false);
            } catch (SymbolNotFoundException e) {
                printError(String.format("Identificador \"%s\" no encontrado en tabla de símbolos.", t.image));
                return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
            }
        }
    |
        /** Caso: constante int */
        t = <tCONSTANT>
        { 
            return new AtribExp(Symbol.Types.INT, t.image, false, true); 
        }
    |
        /** Caso: constante char */
        t = <tCHAR>
        {
            return new AtribExp(Symbol.Types.CHAR, t.image, false, true); 
        }
    |
        /** Caso: constante string. */
        t = <tSTRING>
        {
            return new AtribExp(Symbol.Types.STRING, t.image, false, true); 
        }
    |
        /** Caso: constante bool con valor true */
        t = <tTRUE>
        {
            return new AtribExp(Symbol.Types.BOOL, t.image, false, true); 
        }
    |
        /** Caso: constante bool con valor false */
        t = <tFALSE>
        {
            return new AtribExp(Symbol.Types.BOOL, t.image, false, true); 
        }
    )
}

AtribExp factor() :
{
    Token op = null;
    boolean ok = true;
    AtribExp ae;
}
{
    (op = <tNOT> | op = <tPLUS> | op = <tMINUS>)?
    (
        <tOPENING_PARENTHESIS> ae = expresion() <tCLOSING_PARENTHESIS>
    |
        ae = primario()
    )
    {
        if (op != null) {
            /** Mirar si el operando es válido respecto al operador */
            ok = op.image.equals("!") && typeEqual(Symbol.Types.BOOL, ae.type,
                String.format("El operador \"%s\" requiere un valor de tipo BOOL, pero se ha proporcionado %s.", op.image, ae.type));

            ok |= (op.image.equals("+") || op.image.equals("-")) && typeEqual(Symbol.Types.INT, ae.type,
                String.format("El operador \"%s\" requiere un valor de tipo INT, pero se ha proporcionado %s.", op.image, ae.type));

            /** Evaluar la expresión recibida si es constante y tiene delante algún operador */
            String val = null;
            if(ok && ae.isConst) {
                if(op.image.equals("!"))
                    val = String.valueOf(!Boolean.parseBoolean(ae.image));
                else {
                    int num = Integer.parseInt(ae.image);
                    val = op.image.equals("-") ? String.valueOf(-num) : String.valueOf(num);
                }
            }

            /** Devolver expresión del tipo correspondiente */
            if(ok) return new AtribExp(op.image.equals("!") ? Symbol.Types.BOOL : Symbol.Types.INT, val, false, ae.isConst);
            else return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
        }
        /** Devolver exactamente la expresión recibida si no tiene ningún operador delante */
        return ae;
    }
}


AtribExp termino() :
{
    AtribExp left, right;
    boolean ok = true;
    Token op;
}
{
    left = factor()
    (
        op = operador_multiplicativo()
        right = factor()
        {
            ok &= typeEqual(Symbol.Types.INT, List.of(left.type, right.type),
                String.format("Los operandos del operador \"%s\" deben ser de tipo INT. Recibido %s de tipo %s.", op.image, right.image, right.type));

            /** Evaluar término si ambos factores constantes */
            String val = null;
            boolean isConst = left.isConst && right.isConst;
            if(isConst && ok) {
                int l = Integer.parseInt(left.image), r = Integer.parseInt(right.image);
                switch(op.image.toLowerCase()) {
                    case "*":
                        val = String.valueOf(l * r);
                        break;
                    case "/":
                        val = (r != 0) ? String.valueOf(l / r) : "0";
                        break;
                    case "mod":
                        val = String.valueOf(l % r);
                        break;
                }
            }
            if(ok) left = new AtribExp(Symbol.Types.INT, val, false, isConst);
            else left = new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
        }
    )*
    { return left; }
}

AtribExp expresion_simple() :
{
    AtribExp left, right;
    boolean ok = true;
    Token op;
}
{
    left = termino()
    (
        LOOKAHEAD(2) (op = <tPLUS> | op = <tMINUS>)
        right = termino()
        {
            ok &= typeEqual(Symbol.Types.INT, List.of(right.type, left.type),
                String.format("Los operandos del operador \"%s\" deben ser de tipo INT. Recibido %s de tipo %s.", op.image, right.image, right.type));
            
            /** Evaluar expresión simple si ambos factores constantes */
            String val = null;
            boolean isConst = left.isConst && right.isConst;
            if (isConst && ok) {
                int l = Integer.parseInt(left.image);
                int r = Integer.parseInt(right.image);
                val = op.image.equals("+") ? String.valueOf(l + r): String.valueOf(l - r);
            }
            
            if(ok) left = new AtribExp(Symbol.Types.INT, val, false, isConst);
            else left = new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
        }
    )*
    { return left; }
}


AtribExp relacion() :
{
    AtribExp left, right;
    boolean ok = true;
    Token op;
}
{
    left = expresion_simple()
    (
        op = operador_relacional()
        right = expresion_simple()
        {

            /** Si el operador lo requiere, ambos operandos deben ser del mismo tipo = <> */
            if(op.image.matches("=|<>"))
                ok &= typeEqual(left.type, right.type,
                    String.format("Los operandos del operador \"%s\" deben ser del mismo tipo. Se proporciono %s y %s.", op.image, left.type, right.type));

            /** Si el operador lo requiere, ambos operandos deben ser del tipo INT  */
            if(op.image.matches("<|<=|>|>="))
                ok &= typeEqual(Symbol.Types.INT, List.of(left.type, right.type),
                    String.format("Los operandos del operador \"%s\" deben ser de tipo INT. Se proporciono %s y %s.", op.image, left.type, right.type));
            
            /** Evaluar la relación si las dos expresiones simples son constantes */
            boolean result = true;
            boolean isConst = left.isConst && right.isConst;
            if (isConst) {                
                switch (left.type) {
                    case INT:
                        int l = Integer.parseInt(left.image);
                        int r = Integer.parseInt(right.image);
                        switch (op.image) {
                            case "=":   result = (l == r);  break;
                            case "<>":  result = (l != r);  break;
                            case "<":   result = (l < r);   break;
                            case "<=":  result = (l <= r);  break;
                            case ">":   result = (l > r);   break;
                            case ">=":  result = (l >= r);  break;
                        }
                        break; 
                    case BOOL:
                        boolean bl = Boolean.parseBoolean(left.image);
                        boolean br = Boolean.parseBoolean(right.image);
                        result = op.image.equals("=") ? (bl == br) : (bl != br);
                        break;
                }
            }
            left = new AtribExp(Symbol.Types.BOOL, String.valueOf(result), false, isConst);
        }
    )?
    { 
        if(ok) return left;
        else return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
    }
}

AtribExp expresion() :
{
    AtribExp left, right;
    boolean ok = true;
    Token op;
}
{
    left = relacion()
    (
        (op = <tAND> | op = <tOR>)
        right = relacion()
        {
            /** ambos operandos deber ser del mismo tipo */
            ok = typeEqual(left.type, right.type,
                String.format("Los operandos para el operador \"%s\" deben de ser del mismo tipo. %s != %s.", op.image, left.type, right.type));

            /** los operadores & y | requieren operandos del tipo BOOL */
            ok &= typeEqual(Symbol.Types.BOOL, List.of(left.type, right.type),
                String.format("Los operandos para el operador \"%s\" deben ser de tipo BOOL. Recibido %s %s.", op.image, left.type, right.type));
                        
            /** Evaluar la expresion si las 2 relaciones son constantes.*/
            String val = null;
            boolean isConst = left.isConst && right.isConst;
            if (isConst && ok) {
                boolean l = Boolean.parseBoolean(left.image);
                boolean r = Boolean.parseBoolean(right.image);
                
                val = op.image.equals("&") ? String.valueOf(l && r) : String.valueOf(l || r);
            }
            left = new AtribExp(Symbol.Types.BOOL, val, false, isConst);
        }
    )*
    { 
        if(ok) return left;
        else return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
    }
}


void lista_una_o_mas_exps() :
{}
{
    ( expresion() )+
}

Token operador_multiplicativo() :
{
    Token t;
}
{
    t = <tTIMES>    { return t; }
  | t = <tDIVIDE>   { return t; }
  | t = <tMOD>      { return t; }
}

Token operador_relacional() :
{
    Token t;
}
{
    t = <tEQUAL>    { return t; }
  | t = <tNOTEQUAL> { return t; }
  | t = <tLT>       { return t; }
  | t = <tLE>       { return t; }
  | t = <tGT>       { return t; }
  | t = <tGE>       { return t; }
}

// --- INICIO DE funciones.jj ---
void declaracion_procs_funcs() :
{}
{
    ( declaracion_proc() | declaracion_func() )+
}

void declaracion_proc() :
{ 
    Token t;
    ArrayList<Symbol> parametros = new ArrayList<Symbol>();
}
{
    t = <tIDENTIFICADOR>
    < tOPENING_PARENTHESIS >
    ( parametros = parametros_declaraciones() )?
    < tCLOSING_PARENTHESIS >
    {
        insertProcedure(t, parametros);
    }
    ( LOOKAHEAD(3) declaracion_variables() )*
    ( declaracion_procs_funcs() )*
    < tBEGGINING >
    instrucciones()
    < tEND >
    { st.removeBlock(); }
}

void declaracion_func() :
{ 
    Token t;
    AtribTipo aT;
    ArrayList<Symbol> parametros = new ArrayList<Symbol>();
}
{
    aT = tipoEscalar()
    t = <tIDENTIFICADOR>
    < tOPENING_PARENTHESIS >
    ( parametros = parametros_declaraciones() )?
    < tCLOSING_PARENTHESIS >
    {
        insertFunction(t, aT, parametros);
    }
    ( LOOKAHEAD(3) declaracion_variables() )*
    ( declaracion_procs_funcs() )*
    < tBEGGINING >
    instrucciones()
    < tEND >
    { st.removeBlock(); }
}

void llamar_funcion() :
{ 
    ArrayList<AtribExp> lPar = new ArrayList<AtribExp>();
    Symbol fun;
    Token t;
}
{
    t = < tIDENTIFICADOR >
    < tOPENING_PARENTHESIS >
    lPar = parametros_llamada_funcion()
    {
        checkParameters(t, lPar);
    }
    < tCLOSING_PARENTHESIS >
    < tSEMICOLON >
}

ArrayList<AtribExp> parametros_llamada_funcion() :
{ 
    ArrayList<AtribExp> lpar = new ArrayList<AtribExp>();
    AtribExp ae = null;    
}
{
    (  ae = expresion() )?
    {
        if(ae != null)
            lpar.add(ae);
    }
    (
        <tCOMA> ae = expresion()
        {
            if(ae != null)
                lpar.add(ae);
        }
    )*
    { return lpar; }
}

ArrayList<Symbol> parametros_declaraciones() :
{   
    AtribTipo aT;
    ArrayList<String> lVars;
    boolean isRef = false;
    ArrayList<Symbol> allSymbols = new ArrayList<Symbol>();
}
{
    aT = tipo()
    ( <tREF> { isRef = true; } )?
    lVars = lista_ids()
    {
        for (String id : lVars) {
            Symbol sV = null;
            if(aT.isArray) {
                sV = new SymbolArray(
                    id, 0, aT.size-1, aT.type, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
            } else {
                switch(aT.type) {
                    case INT:
                        sV = new SymbolInt(
                            id, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                        break;
                    case BOOL:
                        sV = new SymbolBool(
                            id, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                        break;
                    case CHAR:
                        sV = new SymbolChar(
                            id, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                        break;
                    default:
                        printError("Tipo no válido.");
                        break;
                }
            }
            allSymbols.add(sV);
        }
        isRef = false;
    }
    (
        <tSEMICOLON>
        aT = tipo()
        ( <tREF> { isRef = true; } )? 
        lVars = lista_ids()
        {
        for (String id : lVars) {
                Symbol sV = null;
                if(aT.isArray) {
                    sV = new SymbolArray(
                        id, 0, aT.size-1, aT.type, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                } else {
                    switch(aT.type) {
                        case INT:
                            sV = new SymbolInt(
                                id, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                            break;
                        case BOOL:
                            sV = new SymbolBool(
                                id, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                            break;
                        case CHAR:
                            sV = new SymbolChar(
                                id, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                            break;
                        default:
                            System.out.println("Tipo no válido.");
                            break;
                    }
                }
                allSymbols.add(sV);
            }
        }
    )*
    { return allSymbols; }
}

// --- INICIO DE instrucciones.jj ---
void instrucciones() :
{}
{
    ( instruccion() )*
}

void instruccion() :
{}
{
    escribir_linea() <tSEMICOLON>
|   escribir() <tSEMICOLON>
|   leer_linea() <tSEMICOLON>
|   leer() <tSEMICOLON>
|   entAcar() <tSEMICOLON>
|   carAent() <tSEMICOLON>
|   LOOKAHEAD(2) llamar_funcion()
|   LOOKAHEAD(2) asignacion()
|   seleccion()
|   bucle()
|   LOOKAHEAD(2) declaracion_procs_funcs()
|   < tABANDONAR > < tSEMICOLON>
|   < tNADA > < tSEMICOLON>
}

void seleccion() :
{}
{
    < tSELECTION > 
    ( < tCASE > expresion() < tCOLON > instrucciones() )+
    [ < tOTHERWISE > < tCOLON > instrucciones() ]
    < tEND_SELECTION >
}

void bucle() :
{}
{
    < tITERATION >
    expresion()
    instrucciones()
    < tEND_ITERATION >
}

// --- INICIO DE especiales.jj ---
void escribir_linea() :
{}
{
    <tESCRIBIR_LIN>
    <tOPENING_PARENTHESIS>
    (escribir_params())?
    <tCLOSING_PARENTHESIS>
}

void escribir() :
{}
{
    <tESCRIBIR>
    <tOPENING_PARENTHESIS>
    (escribir_params())
    <tCLOSING_PARENTHESIS>
}

void escribir_params() :
{
    AtribExp a;
}
{
    (a = expresion())
    {
        typeNotEqual(List.of(Symbol.Types.ARRAY, Symbol.Types.PROCEDURE, Symbol.Types.UNDEFINED),
            a.type, String.format("No se puede escribir tipo de dato \"%s\"", a.type));
    }
    (
        <tCOMA> (a = expresion())
        {
            typeNotEqual(List.of(Symbol.Types.ARRAY, Symbol.Types.PROCEDURE, Symbol.Types.UNDEFINED),
            a.type, String.format("No se puede escribir tipo de dato \"%s\"", a.type));
        }
    )*
}

void leer_linea() :
{
     ArrayList<String> lVars = new ArrayList<String>();
}
{
    <tLEER_LIN>
    <tOPENING_PARENTHESIS>
    (
        (lVars = lista_ids())
        {
            typeNotEqual(List.of(Symbol.Types.ARRAY, Symbol.Types.PROCEDURE, Symbol.Types.UNDEFINED, Symbol.Types.PROCEDURE), lVars);
        }
    )?
    <tCLOSING_PARENTHESIS>
}

void leer() :
{
     ArrayList<String> lVars = new ArrayList<String>();
}
{
    <tLEER> 
    <tOPENING_PARENTHESIS>
    (lVars = lista_ids())
    {
            typeNotEqual(List.of(Symbol.Types.ARRAY, Symbol.Types.PROCEDURE, Symbol.Types.UNDEFINED, Symbol.Types.PROCEDURE), lVars);
    }
    <tCLOSING_PARENTHESIS> 
}

void entAcar() :
{
    AtribExp i;
}
{
    < tENTACAR >
    <tOPENING_PARENTHESIS>
    i = expresion_simple()
    {
        typeEqual(Symbol.Types.INT, i.type, String.format("Tipo incorrecto. Se esperaba INT pero se encontró %s.", i.type));
    }
    <tCLOSING_PARENTHESIS>
}

void carAent() :
{
    AtribExp c;
}
{
    < tCARAENT >
    < tOPENING_PARENTHESIS>
    c = primario()
    {
        typeEqual(Symbol.Types.CHAR, c.type, String.format("Tipo incorrecto. Se esperaba CHAR pero se encontró %s.", c.type));
    }
    <tCLOSING_PARENTHESIS>
}

