//*****************************************************************
// File:   gcl.jj
// Author: Procesadores de Lenguajes-University of Zaragoza
// Date:   enero 25
// Coms:   compilar mediante "ant"
//*****************************************************************

///////////////////////////////////////////////////////////////////////////////
// 1. ANALIZADOR LÉXICO
///////////////////////////////////////////////////////////////////////////////

options {
    IGNORE_CASE = true;
    COMMON_TOKEN_ACTION = true;
}

PARSER_BEGIN(gcl)

package traductor;

import lib.symbolTable.*;
import lib.symbolTable.exceptions.*;

import java.util.*;

public class gcl {
    // tabla de símbolos global
	static SymbolTable st;
   
   public static void main(String[] args) {
	   gcl parser = null;
	   
	   try {
           st = new SymbolTable(); 

		   if(args.length == 0) {
			   parser = new gcl(System.in);
		   }
		   else {
			   parser = new gcl(new java.io.FileInputStream(args[0]));
		   }
		   //Programa es el símbolo inicial de la gramática
		   parser.Programa();
		   //...
		   System.out.println("***** Análisis terminado con éxito *****");
	   }
	   catch (java.io.FileNotFoundException e) {
		   System.err.println ("Fichero " + args[0] + " no encontrado.");
	   }
	   catch (TokenMgrError e) {
		   System.err.println("LEX_ERROR: " + e.getMessage());
	   }
	   catch (Exception e) {
			// Handle the exception
			System.err.println("An exception occurred: " + e.getMessage());
	   }
	}
}
PARSER_END(gcl)

// sacado de https://cs.lmu.edu/~ray/notes/javacc/
// "preprocesado"
SKIP: {
  " "
| "\t"
| "\n"
| "\r"
| <"--" (~["\n","\r"])* ("\n"|"\r")> // comentarios monolínea
}

// auxiliares
TOKEN : {
	< #LETTER: (["a"-"z","A"-"Z"]) >
|	< #DIGIT: ["0"-"9"] >
}

// todos los tokens de gcl
// tOTHER no es léxicamente válido, el resto de tokens si
TOKEN : {
     // palabras reservadas
     < tPROGRAMA: "Programa" >
|    < tREF: "ref" > 
|    < tINTEGER: "entero" >
|    < tCHARACTER: "caracter" >
|    < tBOOLEAN: "booleano" >
|    < tSELECTION: "Sel" >
|    < tEND_SELECTION: "Fsel" >
|    < tCASE: "caso" >
|    < tITERATION: "Mq" >
|    < tEND_ITERATION: "FMq" >
|    < tBEGGINING: "Principio" >
|    < tEND: "Fin" >
|    < tTRUE: "verdadero" >
|    < tFALSE: "falso" >
|    < tOTHERWISE: "dlc" >
|    < tABANDONAR: "abandonar" > 
|    < tNADA: "nada" >
    
     // literales
|    < tSTRING: "\"" ( ("\"\"") | ~["\""] )* "\"" >
|    < tCHAR: "'''" | "'" ~[] "'" > 
|    < tCONSTANT: ( <DIGIT> )+ >
    
     // operadores y símbolos
|    < tCOMA: "," >
|    < tSEMICOLON: ";" >
|    < tUNDERSCORE: "_" >
|    < tASSIGN: ":=" >
|    < tOPENING_SQUARE_BRACKET: "[" >
|    < tCLOSING_SQUARE_BRACKET: "]" >
|    < tCOLON: ":" >
|    < tOPENING_PARENTHESIS: "(" >
|    < tCLOSING_PARENTHESIS: ")" >
|    < tPLUS: "+" >
|    < tMINUS: "-" >
|    < tTIMES: "*" >
|    < tDIVIDE: "/" >
|    < tMOD: "mod" >
|    < tAND: "&" >
|    < tOR: "|" >
|    < tNOT: "!" >
|    < tGT: ">" >
|    < tGE: ">=" >
|    < tLT: "<" >
|    < tLE: "<=" >
|    < tEQUAL: "=" >
|    < tNOTEQUAL: "<>" >
|    < tDOT: "." >

|    < tIDENTIFICADOR: ( <LETTER> | "_" ) ( <LETTER> | <DIGIT> | "_" )* >

|    < tOTHER: ~[] >  // tOTHER no es léxicamente válido, el resto de tokens si
}

// deprecado al parecer, https://parsers.org/javacc21/token-hooks-revisited/
TOKEN_MGR_DECLS : {
    public static void CommonTokenAction(Token t) {
        System.out.printf("(%d,%d): %s \"%s\"%n", 
            t.beginLine, t.beginColumn, getTokenType(t.kind), t.image);
    }

    private static String getTokenType(int kind) {
        switch(kind) {
            case gclConstants.tIDENTIFICADOR: return "identificador";
            case gclConstants.tASSIGN: return "operador asignación";
            case gclConstants.tCONSTANT: return "constante entera";
            case gclConstants.tSTRING: return "cadena";
            case gclConstants.tCHAR: return "caracter";
            default: return "token"; // todos los tokens sin lexema relevante
        }
    }
}











///////////////////////////////////////////////////////////////////////////////
// 2. ANALIZADOR SINTÁCTICO
///////////////////////////////////////////////////////////////////////////////

/** Programa */

void Programa() :
{}
{
    < tPROGRAMA >
    < tIDENTIFICADOR >
    ( LOOKAHEAD(3) declaracion_variables() )*
    ( declaracion_procs_funcs() )*
    < tBEGGINING >
    instrucciones()
    < tEND >
}

///////////////////////////////////////////////////////////////////////////////

/** Tipos */

AtribTipo tipo() :
{
    AtribTipo aT;
}
{
    (
        LOOKAHEAD(2) 
        aT = tipoArray() 
        | aT = tipoEscalar()
    )
    { return aT; }
}

AtribTipo tipoEscalar() :
{}
{
    <tINTEGER>      { return new AtribTipo(Symbol.Types.INT ); }
    | <tCHARACTER>  { return new AtribTipo(Symbol.Types.CHAR); }
    | <tBOOLEAN>    { return new AtribTipo(Symbol.Types.BOOL); }
}

AtribTipo tipoArray() :
{
    Symbol.Types t;
    AtribExp aE;
}
{
    (
        <tCHARACTER> { t = Symbol.Types.CHAR; }
        | <tBOOLEAN> { t = Symbol.Types.BOOL; }
        | <tINTEGER> { t = Symbol.Types.INT; }
    )
    <tOPENING_SQUARE_BRACKET>
    aE = expresion_simple()
    <tCLOSING_SQUARE_BRACKET>
    {
        return new AtribTipo(t, Integer.parseInt(aE.image));
    }
}

///////////////////////////////////////////////////////////////////////////////

/** Declaración variables */

void declaracion_variables() :
{}
{
    ( LOOKAHEAD(3) declaracion() )+
}

ArrayList<String> lista_ids() :
{
    ArrayList<String> lVars = new ArrayList<String>();
    Token t;
}
{
    t = <tIDENTIFICADOR>
    { lVars.add(t.image); }
    (
        <tCOMA>
        t = <tIDENTIFICADOR>
        { lVars.add(t.image); }
    )*
    { return lVars; }
}

void declaracion() :
{
    AtribTipo aT;
    ArrayList<String> lVars;
}
{
    aT = tipo()
    lVars = lista_ids()
    <tSEMICOLON>
    {
        for(String id : lVars) {
            try {
                Symbol sV = null;
                if(aT.isArray) {
                    sV = new SymbolArray(id, 0, aT.size-1, aT.type);
                } else {
                    switch(aT.type) {
                        case INT:
                            sV = new SymbolInt(id); break;
                        case BOOL:
                            sV = new SymbolBool(id); break;
                        case CHAR:
                            sV = new SymbolChar(id); break;
                        default:
                            System.out.println("Error: tipo no definido para variable \"" +
                                id + "\".");
                    }
                }
                if(sV != null) {
                    st.insertSymbol(sV);
                    System.out.println("[TABLA DE SÍMBOLOS] Insertado " + sV.toString());
                }
            } catch(AlreadyDefinedSymbolException e) {
                System.out.println("Error: ya existe variable con identificador \"" +
                    id + "\".");
            }
        }
    }
}

///////////////////////////////////////////////////////////////////////////////

/** Expresiones */

// orden de prioridad de expansión (cuanto más izquierda, más prioridad)
// primario - factor - termino - expresion_simple - relacion - expresion

AtribExp primario() :
{
    Token t;
    AtribExp ae;
    Symbol s;
}
{
    (
        LOOKAHEAD(2)
        t = <tIDENTIFICADOR>
        <tOPENING_PARENTHESIS>
        parametros_llamada_funcion() // Validate parameters
        <tCLOSING_PARENTHESIS>
        {
            s = st.getSymbol(t.image);
            if (s == null || s.type != Symbol.Types.FUNCTION) {
                System.out.println("Error: " + t.image + " is not a function.");
                return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
            }
            return new AtribExp(s.type, null, false, false);
        }
    |
        LOOKAHEAD(2)
        t = <tIDENTIFICADOR>
        <tOPENING_SQUARE_BRACKET>
        ae = expresion()
        <tCLOSING_SQUARE_BRACKET>
        {
            s = st.getSymbol(t.image);
            if (s == null || s.type != Symbol.Types.ARRAY) {
                System.out.println("Error: " + t.image + " is not an array.");
                return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
            }
            if (ae.type != Symbol.Types.INT) {
                System.out.println("Error: Array index must be integer.");
            }
            Symbol.Types elemType = Symbol.Types.values()[(int)s.dir];
            return new AtribExp(elemType, null, false, ae.isConst && s.constant);
        }
    |
        t = <tIDENTIFICADOR>
        {
            try {
                s = st.getSymbol(t.image);
                String image = s.constant ? String.valueOf(s.dir) : t.image;
                return new AtribExp(s.type, image, true, s.constant);
            } catch (SymbolNotFoundException e) {
                System.out.println("Error: undefined '" + t.image + "'.");
                return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
            }
        }
    |
        t = <tCONSTANT>
        { return new AtribExp(Symbol.Types.INT, t.image, false, true); }
    |
        t = <tCHAR>
        { return new AtribExp(Symbol.Types.CHAR, t.image, false, true); }
    |
        t = <tSTRING>
        { return new AtribExp(Symbol.Types.STRING, t.image, false, true); }
    |
        t = <tTRUE> | t = <tFALSE>
        { return new AtribExp(Symbol.Types.BOOL, t.image, false, true); }
    )

    {
        return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
    }
}


AtribExp factor() :
{
    Token op = null;
    AtribExp ae;
}
{
    ( op = <tNOT> | op = <tPLUS> | op = <tMINUS> )?
    (
        <tOPENING_PARENTHESIS> ae = expresion() <tCLOSING_PARENTHESIS>
    |
        ae = primario()
    )
    {
        if (op != null) {
            switch (op.image) {
                case "!":
                    if (ae.type != Symbol.Types.BOOL) {
                        throw new TypesDontMatchException("! requires boolean");
                    }
                    if (ae.isConst) {
                        boolean val = Boolean.parseBoolean(ae.image);
                        return new AtribExp(Symbol.Types.BOOL, String.valueOf(!val), false, true);
                    }
                    return new AtribExp(Symbol.Types.BOOL, null, false, false);
                case "+":
                    if (ae.type != Symbol.Types.INT) {
                        throw new TypesDontMatchException("+ requires integer");
                    }
                    return ae; // + doesn't change value
                case "-":
                    if (ae.type != Symbol.Types.INT) {
                        throw new TypesDontMatchException("- requires integer");
                    }
                    if (ae.isConst) {
                        int val = Integer.parseInt(ae.image);
                        return new AtribExp(Symbol.Types.INT, String.valueOf(-val), false, true);
                    }
                    return new AtribExp(Symbol.Types.INT, null, false, false);
            }
        }
        return ae;
    }
}

AtribExp termino() :
{
    AtribExp left, right;
    Token op;
}
{
    left = factor()
    (
        op = operador_multiplicativo()
        right = factor()
        {
            if (left.type != Symbol.Types.INT || right.type != Symbol.Types.INT) {
                throw new TypesDontMatchException("Multiplicative ops require integers");
            }
            boolean isConst = left.isConst && right.isConst;
            String val = null;
            if (isConst) {
                int l = Integer.parseInt(left.image);
                int r = Integer.parseInt(right.image);
                switch (op.image) {
                    case "*": val = String.valueOf(l * r); break;
                    case "/": val = r != 0 ? String.valueOf(l / r) : "0"; break;
                    case "%": val = String.valueOf(l % r); break;
                }
            }
            left = new AtribExp(Symbol.Types.INT, val, false, isConst);
        }
    )*
    { return left; }
}

AtribExp expresion_simple() :
{
    AtribExp left, right;
    Token op;
    boolean isConst;
}
{
    left = termino()
    { isConst = left.isConst; }
    (
        ( op = <tPLUS> | op = <tMINUS> )
        right = termino()
        {
            if (left.type != Symbol.Types.INT || right.type != Symbol.Types.INT) {
                throw new TypesDontMatchException("Additive ops require integers");
            }
            isConst = isConst && right.isConst;
            if (isConst) {
                int l = Integer.parseInt(left.image);
                int r = Integer.parseInt(right.image);
                left.image = op.image.equals("+") ? String.valueOf(l + r) : String.valueOf(l - r);
            } else {
                left.image = null;
            }
            left.isConst = isConst;
        }
    )*
    { return left; }
}

AtribExp relacion() :
{
    AtribExp left, right = null;
    Token op = null;
}
{
    left = expresion_simple()
    (
        op = operador_relacional()
        right = expresion_simple()
        {
            if (op.image.matches("==|!=")) {
                if (left.type != right.type) {
                    throw new TypesDontMatchException("Operands must be same type");
                }
            } else {
                if (left.type != Symbol.Types.INT || right.type != Symbol.Types.INT) {
                    throw new TypesDontMatchException("Relational ops require integers");
                }
            }
            
            boolean isConst = left.isConst && right.isConst;
            String val = null;
            if (isConst) {
                boolean result = false;
                switch (left.type) {
                    case INT:
                        int l = Integer.parseInt(left.image);
                        int r = Integer.parseInt(right.image);
                        switch (op.image) {
                            case "==": result = (l == r); break;
                            case "!=": result = (l != r); break;
                            case "<": result = (l < r); break;
                            case "<=": result = (l <= r); break;
                            case ">": result = (l > r); break;
                            case ">=": result = (l >= r); break;
                        }
                        break;
                    case BOOL:
                        boolean bl = Boolean.parseBoolean(left.image);
                        boolean br = Boolean.parseBoolean(right.image);
                        result = (op.image.equals("==")) ? (bl == br) : (bl != br);
                        break;
                }
                val = String.valueOf(result);
            }
            left = new AtribExp(Symbol.Types.BOOL, val, false, isConst);
        }
    )?
    { return right == null ? left : left; }
}

AtribExp expresion() :
{
    AtribExp left, right;
    Token op;
    boolean isConst;
}
{
    left = relacion()
    { isConst = left.isConst; }
    (
        ( op = <tAND> | op = <tOR> )
        right = relacion()
        {
            if (left.type != Symbol.Types.BOOL || right.type != Symbol.Types.BOOL) {
                throw new TypesDontMatchException("Logical ops require booleans");
            }
            isConst = isConst && right.isConst;
            if (isConst) {
                boolean l = Boolean.parseBoolean(left.image);
                boolean r = Boolean.parseBoolean(right.image);
                left.image = op.image.equals("&") 
                    ? String.valueOf(l && r) 
                    : String.valueOf(l || r);
            } else {
                left.image = null;
            }
            left.isConst = isConst;
        }
    )*
    { return left; }
}

void lista_una_o_mas_exps() :
{}
{
    ( expresion() )+
}

Token operador_multiplicativo() :
{
    Token t;
}
{
    t = <tTIMES>    { return t; }
  | t = <tDIVIDE>   { return t; }
  | t = <tMOD>      { return t; }
}

Token operador_relacional() :
{
    Token t;
}
{
    t = <tEQUAL>    { return t; }
  | t = <tNOTEQUAL> { return t; }
  | t = <tLT>       { return t; }
  | t = <tLE>       { return t; }
  | t = <tGT>       { return t; }
  | t = <tGE>       { return t; }
}

///////////////////////////////////////////////////////////////////////////////

/** Asignación */

void asignacion() :
{ System.out.println("Asignacion"); }
{
    < tIDENTIFICADOR >
    ( < tOPENING_SQUARE_BRACKET > expresion_simple() < tCLOSING_SQUARE_BRACKET > )?
    < tASSIGN >
    expresion()
    < tSEMICOLON >
}

///////////////////////////////////////////////////////////////////////////////

/** Funciones y procedimientos */

void declaracion_procs_funcs() :
{ System.out.println("Declaración de procedimientos/funciones"); }
{
    ( declaracion_proc() | declaracion_func() )+
}

void declaracion_proc() :
{ System.out.println("Declaración de procedimiento"); }
{
    <tIDENTIFICADOR>
    < tOPENING_PARENTHESIS >
    ( parametros_declaraciones() )*
    < tCLOSING_PARENTHESIS >
    ( LOOKAHEAD(3) declaracion_variables() )*
    ( declaracion_procs_funcs() )*
    < tBEGGINING >
    instrucciones()
    < tEND >
}

void declaracion_func() :
{ System.out.println("Declaración de función"); }
{
    tipoEscalar()
    <tIDENTIFICADOR>
    < tOPENING_PARENTHESIS >
    ( parametros_declaraciones() )*
    < tCLOSING_PARENTHESIS >
    ( LOOKAHEAD(3) declaracion_variables() )*
    ( declaracion_procs_funcs() )*
    < tBEGGINING >
    instrucciones()
    < tEND >
}

void llamar_funcion() :
{ System.out.println("Llamar función"); }
{
    < tIDENTIFICADOR >
    < tOPENING_PARENTHESIS >
    parametros_llamada_funcion()
    < tCLOSING_PARENTHESIS >
    < tSEMICOLON >
}

void parametros_llamada_funcion() :
{ System.out.println("Parámetros llamada función"); }
{
    ( expresion() )?
    (<tCOMA> expresion() )*
    //( LOOKAHEAD(2) <tIDENTIFICADOR> <tOPENING_SQUARE_BRACKET> expresion_simple() <tCLOSING_SQUARE_BRACKET> | <tIDENTIFICADOR> | expresion() )?
    //(<tCOMA>  (LOOKAHEAD(2) <tIDENTIFICADOR> <tOPENING_SQUARE_BRACKET> expresion_simple() <tCLOSING_SQUARE_BRACKET> | <tIDENTIFICADOR> | expresion() ))*
}

// --- Instrucciones ----------------------------------------------------------
void instrucciones() :
{ System.out.println("Instrucciones"); }
{
    ( instruccion() )*
}

void instruccion() :
{ System.out.println("Instrucción"); }
{
    LOOKAHEAD(2)
    llamar_funcion()
|   asignacion()
|   seleccion()
|   bucle()
|   declaracion_procs_funcs()
|   < tABANDONAR > < tSEMICOLON>
|   < tNADA > < tSEMICOLON>
}

void seleccion() :
{ System.out.println("Selección"); }
{
    < tSELECTION > 
    ( < tCASE > expresion() < tCOLON > instrucciones() )+
    [ < tOTHERWISE > < tCOLON > instrucciones() ]
    < tEND_SELECTION >
}

void bucle() :
{ System.out.println("Bucle"); }
{
    < tITERATION >
    expresion()
    instrucciones()
    < tEND_ITERATION >
}

void parametros_declaraciones() :
{ System.out.println("Parámetros declaraciones"); }
{
    tipo()
    ( < tREF > )?
    lista_ids()
    (
        < tSEMICOLON >
        tipo()
        ( < tREF > )?
        lista_ids()
    )*
}
