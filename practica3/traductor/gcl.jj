// AUTOGENERADO - NO EDITAR MANUALMENTE
// Este archivo se genera automáticamente por build.sh

// --- INICIO DE main.jj ---
//*****************************************************************
// File:   gcl.jj
// Author: Procesadores de Lenguajes-University of Zaragoza
// Date:   enero 25
// Coms:   compilar mediante "ant"
//*****************************************************************

///////////////////////////////////////////////////////////////////////////////
// 1. ANALIZADOR LÉXICO
///////////////////////////////////////////////////////////////////////////////

options {
    IGNORE_CASE = true;
    COMMON_TOKEN_ACTION = true;
}

PARSER_BEGIN(gcl)

package traductor;

import lib.symbolTable.*;
import lib.symbolTable.exceptions.*;

import java.util.*;

public class gcl {
    // tabla de símbolos global
	static SymbolTable st;
   
   public static void main(String[] args) {
	   gcl parser = null;
	   
	   try {
           st = new SymbolTable();

		   if(args.length == 0) {
			   parser = new gcl(System.in);
		   }
		   else {
			   parser = new gcl(new java.io.FileInputStream(args[0]));
		   }
		   //Programa es el símbolo inicial de la gramática
		   parser.Programa();
		   //...
		   System.out.println("***** Análisis terminado con éxito *****");
	   }
	   catch (java.io.FileNotFoundException e) {
		   System.err.println ("Fichero " + args[0] + " no encontrado.");
	   }
	   catch (TokenMgrError e) {
		   System.err.println("LEX_ERROR: " + e.getMessage());
	   }
	   catch (Exception e) {
			System.err.println("Ha ocurrido una excepción: " + e.getMessage());
	   }
	}

    // inserta todos los símbolos de "lVars" de tipo "aT" y los marca como ref si "isRef",
    // auxiliar para "parametros_declaraciones" (los parámetros de la declaración de una función/procedimiento)
    private static void insertSymbols(AtribTipo aT, boolean isRef, ArrayList<String> lVars) {
    for (String id : lVars) {
        try {
            Symbol sV = null;
            if (aT.isArray) {
                sV = new SymbolArray(id, 0, aT.size-1, aT.type);
            } else {
                switch(aT.type) {
                    case INT:
                        sV = new SymbolInt(id); break;
                    case BOOL:
                        sV = new SymbolBool(id); break;
                    case CHAR:
                        sV = new SymbolChar(id); break;
                    default:
                        System.out.println("Error: tipo no definido para variable \"" + id + "\".");
                }
            }
            if (sV != null) {
                sV.parClass = isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL;
                st.insertSymbol(sV);
                System.out.println("[TABLA DE SÍMBOLOS] Insertado " + sV.toString());
            }
        } catch (AlreadyDefinedSymbolException e) {
            System.out.println("Error: Identificador ya existe: \"" + id + "\"");
        }
    }
}
}
PARSER_END(gcl)

///////////////////////////////////////////////////////////////////////////////
// 2. ANALIZADOR SINTÁCTICO
///////////////////////////////////////////////////////////////////////////////

// --- INICIO DE tokens.jj ---
// sacado de https://cs.lmu.edu/~ray/notes/javacc/
// "preprocesado"
SKIP: {
  " "
| "\t"
| "\n"
| "\r"
| <"--" (~["\n","\r"])* ("\n"|"\r")> // comentarios monolínea
}

// auxiliares
TOKEN : {
	< #LETTER: (["a"-"z","A"-"Z"]) >
|	< #DIGIT: ["0"-"9"] >
}

// todos los tokens de gcl
// tOTHER no es léxicamente válido, el resto de tokens si
TOKEN : {
     // palabras reservadas
     < tPROGRAMA: "Programa" >
|    < tESCRIBIR_LIN: "escribir_lin" >
|    < tESCRIBIR: "escribir" >
|    < tLEER_LIN: "leer_lin" >
|    < tLEER: "leer" >
|    < tENTACAR: "entAcar" >
|    < tCARAENT: "carAent" >
|    < tREF: "ref" > 
|    < tINTEGER: "entero" >
|    < tCHARACTER: "caracter" >
|    < tBOOLEAN: "booleano" >
|    < tSELECTION: "Sel" >
|    < tEND_SELECTION: "Fsel" >
|    < tCASE: "caso" >
|    < tITERATION: "Mq" >
|    < tEND_ITERATION: "FMq" >
|    < tBEGGINING: "Principio" >
|    < tEND: "Fin" >
|    < tTRUE: "verdadero" >
|    < tFALSE: "falso" >
|    < tOTHERWISE: "dlc" >
|    < tABANDONAR: "abandonar" > 
|    < tNADA: "nada" >
    
     // literales
|    < tSTRING: "\"" ( ("\"\"") | ~["\""] )* "\"" >
|    < tCHAR: "'''" | "'" ~[] "'" > 
|    < tCONSTANT: ( <DIGIT> )+ >
    
     // operadores y símbolos
|    < tCOMA: "," >
|    < tSEMICOLON: ";" >
|    < tUNDERSCORE: "_" >
|    < tASSIGN: ":=" >
|    < tOPENING_SQUARE_BRACKET: "[" >
|    < tCLOSING_SQUARE_BRACKET: "]" >
|    < tCOLON: ":" >
|    < tOPENING_PARENTHESIS: "(" >
|    < tCLOSING_PARENTHESIS: ")" >
|    < tPLUS: "+" >
|    < tMINUS: "-" >
|    < tTIMES: "*" >
|    < tDIVIDE: "/" >
|    < tMOD: "mod" >
|    < tAND: "&" >
|    < tOR: "|" >
|    < tNOT: "!" >
|    < tGT: ">" >
|    < tGE: ">=" >
|    < tLT: "<" >
|    < tLE: "<=" >
|    < tEQUAL: "=" >
|    < tNOTEQUAL: "<>" >
|    < tDOT: "." >

|    < tIDENTIFICADOR: ( <LETTER> | "_" ) ( <LETTER> | <DIGIT> | "_" )* >

|    < tOTHER: ~[] >  // tOTHER no es léxicamente válido, el resto de tokens si
}

// deprecado al parecer, https://parsers.org/javacc21/token-hooks-revisited/
TOKEN_MGR_DECLS : {
    public static void CommonTokenAction(Token t) {
        System.out.printf("(%d,%d): %s \"%s\"%n", 
            t.beginLine, t.beginColumn, getTokenName(t.kind), t.image);
    }

    // función épica que devuelve el token (no su lexema)
    private static String getTokenName(int kind) {
        try {
            java.lang.reflect.Field[] fields = gclConstants.class.getDeclaredFields();
            for (java.lang.reflect.Field field : fields) {
                if (field.getType() == int.class 
                        && field.getInt(null) == kind 
                        && field.getName().startsWith("t")) {
                    return field.getName();
                }
            }
            return "UNKNOWN_TOKEN";
        } catch (IllegalAccessException e) {
            return "ERROR: " + e.getMessage();
        }
    }
}

// --- INICIO DE programa.jj ---
void Programa() :
{}
{
    < tPROGRAMA >
    < tIDENTIFICADOR >
    ( LOOKAHEAD(3) declaracion_variables() )*
    ( declaracion_procs_funcs() )*
    < tBEGGINING >
    instrucciones()
    < tEND >
}

// --- INICIO DE tipos.jj ---
AtribTipo tipo() :
{
    AtribTipo aT;
}
{
    (
        LOOKAHEAD(2) 
        aT = tipoArray() 
        | aT = tipoEscalar()
    )
    { return aT; }
}

AtribTipo tipoEscalar() :
{}
{
    <tINTEGER>      { return new AtribTipo(Symbol.Types.INT ); }
    | <tCHARACTER>  { return new AtribTipo(Symbol.Types.CHAR); }
    | <tBOOLEAN>    { return new AtribTipo(Symbol.Types.BOOL); }
}

AtribTipo tipoArray() :
{
    Symbol.Types t;
    AtribExp aE;
}
{
    (
        <tCHARACTER> { t = Symbol.Types.CHAR; }
        | <tBOOLEAN> { t = Symbol.Types.BOOL; }
        | <tINTEGER> { t = Symbol.Types.INT; }
    )
    <tOPENING_SQUARE_BRACKET>
    aE = expresion_simple()
    <tCLOSING_SQUARE_BRACKET>
    {
        return new AtribTipo(t, Integer.parseInt(aE.image));
    }
}

// --- INICIO DE variables.jj ---
void declaracion_variables() :
{}
{
    ( LOOKAHEAD(3) declaracion() )+
}

ArrayList<String> lista_ids() :
{
    ArrayList<String> lVars = new ArrayList<String>();
    Token t;
}
{
    t = <tIDENTIFICADOR>
    { lVars.add(t.image); }
    (
        <tCOMA>
        t = <tIDENTIFICADOR>
        { lVars.add(t.image); }
    )*
    { return lVars; }
}

void declaracion() :
{
    AtribTipo aT;
    ArrayList<String> lVars;
}
{
    aT = tipo()
    lVars = lista_ids()
    <tSEMICOLON>
    {
        for(String id : lVars) {
            try {
                Symbol sV = null;
                if(aT.isArray) {
                    sV = new SymbolArray(id, 0, aT.size-1, aT.type);
                } else {
                    switch(aT.type) {
                        case INT:
                            sV = new SymbolInt(id); break;
                        case BOOL:
                            sV = new SymbolBool(id); break;
                        case CHAR:
                            sV = new SymbolChar(id); break;
                        default:
                            System.out.println("Error: tipo no definido para variable \"" +
                                id + "\".");
                    }
                }
                if(sV != null) {
                    st.insertSymbol(sV);
                    System.out.println("[TABLA DE SÍMBOLOS] Insertado " + sV.toString());
                }
            } catch(AlreadyDefinedSymbolException e) {
                System.out.println("Error: ya existe variable con identificador \"" +
                    id + "\".");
            }
        }
    }
}

void asignacion() :
{ System.out.println("Asignacion"); }
{
    < tIDENTIFICADOR >
    ( < tOPENING_SQUARE_BRACKET > expresion_simple() < tCLOSING_SQUARE_BRACKET > )?
    < tASSIGN >
    expresion()
    < tSEMICOLON >
}

// --- INICIO DE expresiones.jj ---
// orden de prioridad de expansión (cuanto más izquierda, más prioridad)
// primario - factor - termino - expresion_simple - relacion - expresion

AtribExp primario() :
{
    Token t;
    AtribExp ae;
    Symbol s;
    SymbolFunction s_func;
}
{
    {
        System.out.println("Entrando en primario");
    }
    (
        // Caso: llamada a entAcar
        entAcar()
        { return new AtribExp(Symbol.Types.CHAR, null, false, false); }
    |    
        // Caso: llamada a carAent
        carAent()
        { return new AtribExp(Symbol.Types.INT, null, false, false); }
    |
        // Caso: llamada a función (o procedimiento)
        LOOKAHEAD(2) // para distinguirlo de un array o variable
        t = <tIDENTIFICADOR>
        <tOPENING_PARENTHESIS>
        parametros_llamada_funcion()
        <tCLOSING_PARENTHESIS>
        {
            try {
                s = st.getSymbol(t.image);
            } catch (SymbolNotFoundException e) {
                System.out.println("Error: El identificador '" + t.image + "' no está definido.");
                System.out.println("Saliendo de primario por llamada a función (o parámetro) no definido");
                return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
            }
            if (s.type != Symbol.Types.FUNCTION) {
                System.out.println("Error: Se esperaba que '" + t.image + "' fuera una función (o procedimiento), pero se encontró: " + s.type + ".");
                System.out.println("Saliendo de primario por llamada a identificador que no es una función");
                return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
            }
            System.out.println("Saliendo de primario por llamada correcta a función (o procedimiento)");
            s_func = (SymbolFunction) s;
            return new AtribExp(s_func.returnType, null, false, false); // valor null por no ser evaluable en tiempo de compilación (no constante)
        }
    |
        // Caso: acceso a array
        LOOKAHEAD(2) // para distinguirlo de un array
        t = <tIDENTIFICADOR>
        <tOPENING_SQUARE_BRACKET>
        ae = expresion()
        <tCLOSING_SQUARE_BRACKET>
        {
            try {
                s = st.getSymbol(t.image);
            } catch (SymbolNotFoundException e) {
                System.out.println("Error: El identificador '" + t.image + "' no está definido.");
                System.out.println("Saliendo de primario por acceso a identificador no definido");
                return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
            }
            if (s.type != Symbol.Types.ARRAY) {
                System.out.println("Error: Se esperaba que '" + t.image + "' fuera un array, pero se encontró: " + s.type + ".");
                System.out.println("Saliendo de primario por identificador que no es un array");
                return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
            }
            if (ae.type != Symbol.Types.INT) {
                System.out.println("Error: Se esperaba que el índice del array fuera un entero, pero se evaluó: tipo " + ae.type + " con valor '" + ae.image + "'.");
            }
            SymbolArray arraySymbol = (SymbolArray) s;
            Symbol.Types elemType = arraySymbol.baseType;  
            System.out.println("Saliendo de primario por acceso a array");
            return new AtribExp(elemType, null, false, ae.isConst && s.constant); // valor null por no ser evaluable en tiempo de compilación (no constante)
        }
    |
        // Caso: variable
        t = <tIDENTIFICADOR>
        {
            try {
                s = st.getSymbol(t.image);
                String image = t.image;
                System.out.println("Saliendo de primario por variable");
                return new AtribExp(s.type, null, true, false); // valor null por no ser evaluable en tiempo de compilación (no existen variables constante en gcl)
            } catch (SymbolNotFoundException e) {
                System.out.println("Error: El identificador '" + t.image + "' no está definido.");
                System.out.println("Saliendo de primario por identificador no definido");
                return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
            }
        }
    |
        // Caso: constante int
        t = <tCONSTANT>
        { 
            System.out.println("Saliendo de primario por constante entera");
            return new AtribExp(Symbol.Types.INT, t.image, false, true); 
        }
    |
        // Caso: constante char
        t = <tCHAR>
        { 
            System.out.println("Saliendo de primario por constante de tipo char");
            return new AtribExp(Symbol.Types.CHAR, t.image, false, true); 
        }
    |
        // Caso: constante string
        t = <tSTRING>
        { 
            System.out.println("Saliendo de primario por constante de tipo string");
            return new AtribExp(Symbol.Types.STRING, t.image, false, true); 
        }
    |
        // Caso: constante true
        t = <tTRUE>
        { 
            System.out.println("Saliendo de primario por constante booleana true");
            return new AtribExp(Symbol.Types.BOOL, t.image, false, true); 
        }
    |
        // Caso: constante false
        t = <tFALSE>
        { 
            System.out.println("Saliendo de primario por constante booleana false");
            return new AtribExp(Symbol.Types.BOOL, t.image, false, true); 
        }
    )
    {
        System.out.println("Saliendo de primario por caso no identificado (¿inaccesible?)");
        return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
    }
}

AtribExp factor() :
{
    System.out.println("Entrando en factor");
    Token op = null;
    AtribExp ae;
}
{
    (op = <tNOT> | op = <tPLUS> | op = <tMINUS>)?
    (
        <tOPENING_PARENTHESIS> ae = expresion() <tCLOSING_PARENTHESIS>
    |
        ae = primario()
    )
    {
        if (op != null) {
            if ((op.image.equals("!") && ae.type != Symbol.Types.BOOL) ||
                ((op.image.equals("+") || op.image.equals("-")) && ae.type != Symbol.Types.INT)) {
                throw new TypesDontMatchException(
                    "Error: El operador '" + op.image + "' requiere un valor del tipo adecuado, pero se evaluó: "
                    + "tipo " + ae.type + " con valor '" + ae.image + "'."
                );
            }
            
            boolean isConst = ae.isConst;
            String val = null;
            
            if (isConst) {
                if (op.image.equals("!")) {
                    val = String.valueOf(!Boolean.parseBoolean(ae.image));
                } else {
                    int num = Integer.parseInt(ae.image);
                    val = op.image.equals("-") ? String.valueOf(-num) : String.valueOf(num);
                }
            }
            
            System.out.println("Saliendo de factor tras operador " + op.image + 
                               (isConst ? " con resultado constante" : " con resultado no constante"));
            return new AtribExp(op.image.equals("!") ? Symbol.Types.BOOL : Symbol.Types.INT, val, false, isConst);
        }
        
        System.out.println("Saliendo de factor con expresión primaria");
        return ae;
    }
}


AtribExp termino() :
{
    System.out.println("Entrando en termino");
    AtribExp left, right;
    Token op;
}
{
    left = factor()
    (
        op = operador_multiplicativo()
        right = factor()
        {
            if (left.type != Symbol.Types.INT || right.type != Symbol.Types.INT) {
                throw new TypesDontMatchException(
                    "Error: Los operadores multiplicativos requieren valores enteros. Se evaluó: "
                    + "left.type = " + left.type + " con valor '" + left.image 
                    + "', right.type = " + right.type + " con valor '" + right.image + "'."
                );
            }
            boolean isConst = left.isConst && right.isConst;
            String val = null;
            
            if (isConst) {
                int l = Integer.parseInt(left.image);
                int r = Integer.parseInt(right.image);
                
                switch (op.image) {
                    case "*":
                        val = String.valueOf(l * r);
                        break;
                    case "/":
                        val = (r != 0) ? String.valueOf(l / r) : "0"; 
                        break;
                    case "%":
                        val = String.valueOf(l % r);
                        break;
                }
            }
            
            left = new AtribExp(Symbol.Types.INT, val, false, isConst);
        }
    )*
    { 
        System.out.println("Saliendo de termino");
        return left; 
    }
}

AtribExp expresion_simple() :
{
    System.out.println("Entrando en expresion_simple");
    AtribExp left, right;
    Token op;
    boolean isConst;
}
{
    left = termino()
    { 
        isConst = left.isConst; 
    }
    (
        LOOKAHEAD(2) (op = <tPLUS> | op = <tMINUS>)
        right = termino()
        {
            if (left.type != Symbol.Types.INT || right.type != Symbol.Types.INT) {
                throw new TypesDontMatchException(
                    "Error: Los operadores aditivos requieren valores enteros. Se evaluó: "
                    + "left.type = " + left.type + " con valor '" + left.image 
                    + "', right.type = " + right.type + " con valor '" + right.image + "'."
                );
            }
            
            isConst = isConst && right.isConst;
            
            if (isConst) {
                int l = Integer.parseInt(left.image);
                int r = Integer.parseInt(right.image);
                
                left.image = op.image.equals("+") ? String.valueOf(l + r): String.valueOf(l - r);
            } else {
                left.image = null;
            }
            
            left.isConst = isConst;
        }
    )*
    { 
        System.out.println("Saliendo de expresion_simple");
        return left; 
    }
}


AtribExp relacion() :
{
    System.out.println("Entrando en relacion");
    AtribExp left, right = null;
    Token op = null;
}
{
    left = expresion_simple()
    (
        op = operador_relacional()
        right = expresion_simple()
        {
            if (op.image.matches("=|!=")) {
                if (left.type != right.type) {
                    throw new TypesDontMatchException(
                        "Error: Los operandos para el operador '" + op.image 
                        + "' deben ser del mismo tipo. Se evaluó: left.type = " + left.type 
                        + " con valor '" + left.image + "', right.type = " + right.type 
                        + " con valor '" + right.image + "'."
                    );
                }
            } else {
                if (left.type != Symbol.Types.INT || right.type != Symbol.Types.INT) {
                    throw new TypesDontMatchException(
                        "Error: Los operadores relacionales requieren valores enteros. Se evaluó: "
                        + "left.type = " + left.type + " con valor '" + left.image 
                        + "', right.type = " + right.type + " con valor '" + right.image + "'."
                    );
                }
            }
            
            boolean isConst = left.isConst && right.isConst;
            String val = null;
            
            if (isConst) {
                boolean result = false;
                
                switch (left.type) {
                    case INT:
                        int l = Integer.parseInt(left.image);
                        int r = Integer.parseInt(right.image);
                        switch (op.image) {
                            case "=": result = (l == r); break;
                            case "!=": result = (l != r); break;
                            case "<": result = (l < r); break;
                            case "<=": result = (l <= r); break;
                            case ">": result = (l > r); break;
                            case ">=": result = (l >= r); break;
                        }
                        break;
                        
                    case BOOL:
                        boolean bl = Boolean.parseBoolean(left.image);
                        boolean br = Boolean.parseBoolean(right.image);
                        result = op.image.equals("=") ? (bl == br) : (bl != br);
                        break;
                }
                
                val = String.valueOf(result);
            }
            
            left = new AtribExp(Symbol.Types.BOOL, val, false, isConst);
        }
    )?
    { 
        System.out.println("Saliendo de relacion");
        return left;
    }
}

AtribExp expresion() :
{
    System.out.println("Entrando en expresion");
    AtribExp left, right;
    Token op;
    boolean isConst;
    boolean left_type, right_type;
}
{
    left = relacion()
    { 
        isConst = left.isConst; 
    }
    (
        (op = <tAND> | op = <tOR>)
        right = relacion()
        {
            if (left.type != Symbol.Types.BOOL || right.type != Symbol.Types.BOOL) {
                throw new TypesDontMatchException(
                    "Error: Los operadores lógicos requieren valores booleanos. Se evaluó: "
                    + "left.type = " + left.type + " con valor '" + left.image 
                    + "', right.type = " + right.type + " con valor '" + right.image 
                    + "'. Al menos uno de ellos no es booleano."
                );
            }
            
            isConst = isConst && right.isConst;
            
            if (isConst) {
                boolean l = Boolean.parseBoolean(left.image);
                boolean r = Boolean.parseBoolean(right.image);
                
                left.image = op.image.equals("&") 
                    ? String.valueOf(l && r) 
                    : String.valueOf(l || r);
            } else {
                left.image = null;
            }
            
            left.isConst = isConst;
        }
    )*
    { 
        System.out.println("Saliendo de expresion");
        return left; 
    }
}


void lista_una_o_mas_exps() :
{}
{
    ( expresion() )+
}

Token operador_multiplicativo() :
{
    Token t;
}
{
    t = <tTIMES>    { return t; }
  | t = <tDIVIDE>   { return t; }
  | t = <tMOD>      { return t; }
}

Token operador_relacional() :
{
    Token t;
}
{
    t = <tEQUAL>    { return t; }
  | t = <tNOTEQUAL> { return t; }
  | t = <tLT>       { return t; }
  | t = <tLE>       { return t; }
  | t = <tGT>       { return t; }
  | t = <tGE>       { return t; }
}

// --- INICIO DE funciones.jj ---
void declaracion_procs_funcs() :
{ System.out.println("Declaración de procedimientos/funciones"); }
{
    ( declaracion_proc() | declaracion_func() )+
}

void declaracion_proc() :
{ 
    System.out.println("Declaración de procedimiento"); 
    Symbol sFunc;
    Token t;
    ArrayList<Symbol> parametros = new ArrayList<Symbol>();
}
{
    t = <tIDENTIFICADOR>
    < tOPENING_PARENTHESIS >
    ( parametros = parametros_declaraciones() )?
    < tCLOSING_PARENTHESIS >
    {
        try {
            sFunc = new SymbolProcedure(t.image, parametros);
            st.insertBlock();
            for(Symbol param : parametros) {
                st.insertSymbol(param);
                System.out.println("Variable insertada en el procedimiento: \"" + t.image + "\".");
            }
        }
        catch (AlreadyDefinedSymbolException e) {
            System.out.println("Error: ya existe procedimiento con identificador \"" + t.image + "\".");
        }
    }
    ( LOOKAHEAD(3) declaracion_variables() )*
    ( declaracion_procs_funcs() )*
    < tBEGGINING >
    instrucciones()
    < tEND >
    { st.removeBlock(); }
}

void declaracion_func() :
{ 
    System.out.println("Declaración de función"); 
    Symbol sFunc;
    Token t;
    AtribTipo aT;
    ArrayList<Symbol> parametros = new ArrayList<Symbol>();
}
{
    aT = tipoEscalar()
    t = <tIDENTIFICADOR>
    // crear la variable del return
    {
        sFunc = null;
        switch (aT.type) {
            case INT:
                sFunc = new SymbolInt(t.image);
                break;
            case BOOL:
                sFunc = new SymbolBool(t.image);
                break;
            case CHAR:
                sFunc = new SymbolChar(t.image);
                break;
            default:
                System.out.println("Error: tipo no definido para función \"" + t.image + "\".");
        }
    }
    < tOPENING_PARENTHESIS >
    ( parametros = parametros_declaraciones() )?
    < tCLOSING_PARENTHESIS >
    {
        try {
            sFunc = new SymbolFunction(t.image, parametros, aT.type);
            st.insertSymbol(sFunc);
            st.insertBlock();

            try {
                if (sFunc != null) {
                    st.insertSymbol(sFunc);
                    System.out.println("[TABLA DE SÍMBOLOS] Insertado " + sFunc.toString());
                }
            } catch ( AlreadyDefinedSymbolException e) {
                System.out.println("Error: la función ya está definida.");
            }

            for(Symbol param : parametros) {
                st.insertSymbol(param);
                System.out.println("Variable insertada en la función: \"" + t.image + "\".");
            }
        }
        catch (AlreadyDefinedSymbolException e) {
            System.out.println("Error: ya existe función con identificador \"" + t.image + "\".");
        }
    }
    ( LOOKAHEAD(3) declaracion_variables() )*
    ( declaracion_procs_funcs() )*
    < tBEGGINING >
    instrucciones()
    < tEND >
    { st.removeBlock(); }
}

void llamar_funcion() :
{ 
    System.out.println("Llamar función");
}
{
    < tIDENTIFICADOR >
    < tOPENING_PARENTHESIS >
    parametros_llamada_funcion()
    < tCLOSING_PARENTHESIS >
    < tSEMICOLON >
}

void parametros_llamada_funcion() :
{ System.out.println("Parámetros llamada función"); }
{
    ( expresion() )?
    (<tCOMA> expresion() )*
}

ArrayList<Symbol> parametros_declaraciones() :
{   
    System.out.println("Parámetros declaraciones"); 
    AtribTipo aT;
    ArrayList<String> lVars;
    boolean isRef = false;
    ArrayList<Symbol> allSymbols = new ArrayList<Symbol>();
}
{
    aT = tipo()
    ( <tREF> { isRef = true; } )?
    lVars = lista_ids()
    {
        for (String id : lVars) {
            Symbol sV = null;
            if(aT.isArray) {
                sV = new SymbolArray(
                    id, 0, aT.size-1, aT.type, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
            } else {
                switch(aT.type) {
                    case INT:
                        sV = new SymbolInt(
                            id,
                            isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL
                        );
                        break;
                    case BOOL:
                        sV = new SymbolBool(
                            id,
                            isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL
                        );
                        break;
                    case CHAR:
                        sV = new SymbolChar(
                            id,
                            isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL
                        );
                        break;
                    default:
                        System.out.println("Error: tipo no definido para variable \"" +
                            id + "\".");
                }
            }
            allSymbols.add(sV);
        }
        isRef = false;
    }
    (
        <tSEMICOLON>
        aT = tipo()
        ( <tREF> { isRef = true; } )? 
        lVars = lista_ids()
        {
        for (String id : lVars) {
                Symbol sV = null;
                if(aT.isArray) {
                    sV = new SymbolArray(
                        id, 0, aT.size-1, aT.type, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                } else {
                    switch(aT.type) {
                        case INT:
                            sV = new SymbolInt(
                                id,
                                isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL
                            );
                            break;
                        case BOOL:
                            sV = new SymbolBool(
                                id,
                                isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL
                            );
                            break;
                        case CHAR:
                            sV = new SymbolChar(
                                id,
                                isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL
                            );
                            break;
                        default:
                            System.out.println("Error: tipo no definido para variable \"" +
                                id + "\".");
                    }
                }
                allSymbols.add(sV);
            }
        }
    )*
    { return allSymbols; }
}

// --- INICIO DE instrucciones.jj ---
void instrucciones() :
{ System.out.println("Instrucciones"); }
{
    ( instruccion() )*
}

void instruccion() :
{ System.out.println("Instrucción"); }
{
    escribir_linea() <tSEMICOLON>
|   escribir() <tSEMICOLON>
|   leer_linea() <tSEMICOLON>
|   leer() <tSEMICOLON>
|   entAcar() <tSEMICOLON>
|   carAent() <tSEMICOLON>
|   LOOKAHEAD(2) llamar_funcion()
|   LOOKAHEAD(2) asignacion()
|   seleccion()
|   bucle()
|   LOOKAHEAD(2) declaracion_procs_funcs()
|   < tABANDONAR > < tSEMICOLON>
|   < tNADA > < tSEMICOLON>
}

void seleccion() :
{ System.out.println("Selección"); }
{
    < tSELECTION > 
    ( < tCASE > expresion() < tCOLON > instrucciones() )+
    [ < tOTHERWISE > < tCOLON > instrucciones() ]
    < tEND_SELECTION >
}

void bucle() :
{ System.out.println("Bucle"); }
{
    < tITERATION >
    expresion()
    instrucciones()
    < tEND_ITERATION >
}

// --- INICIO DE especiales.jj ---
void escribir_linea() :
{}
{
    <tESCRIBIR_LIN>
    <tOPENING_PARENTHESIS>
    (escribir_params())?
    <tCLOSING_PARENTHESIS>
}

void escribir() :
{}
{
    <tESCRIBIR>
    <tOPENING_PARENTHESIS>
    (escribir_params())
    <tCLOSING_PARENTHESIS>
}

void escribir_params() :
{
    AtribExp a;
}
{
    (a = expresion_simple())
    {
        if (a.type == Symbol.Types.ARRAY || a.type == Symbol.Types.PROCEDURE || a.type == Symbol.Types.UNDEFINED) {
            String errorMsg = String.format("Error en expresión: tipo de dato inválido encontrado. Tipo recibido: %s.", a.type);
            System.err.println("Error en escribir_params: " + errorMsg);
            throw new TypesDontMatchException(errorMsg);
        }
    }
    (
        <tCOMA> (a = expresion_simple())
        {
            if (a.type == Symbol.Types.ARRAY || a.type == Symbol.Types.PROCEDURE || a.type == Symbol.Types.UNDEFINED) {
                String errorMsg = String.format("Error en expresión: tipo de dato inválido encontrado. Tipo recibido: %s.", a.type);
                System.err.println("Error en escribir_params: " + errorMsg);
                throw new TypesDontMatchException(errorMsg);
            }
        }
    )*
}

void leer_linea() :
{
     ArrayList<String> lVars = new ArrayList<String>();
     Symbol s;
}
{
    <tLEER_LIN>
    <tOPENING_PARENTHESIS>
    (
        (lVars = lista_ids())
        {
            for (String i : lVars) {
                s = st.getSymbol(i);
                if (s.type == Symbol.Types.ARRAY || s.type == Symbol.Types.PROCEDURE || s.type == Symbol.Types.UNDEFINED) {
                    String errorMsg = String.format("Error en leer_linea: el tipo de variable '%s' no es válido. Tipo encontrado: %s.", i, s.type);
                    System.err.println(errorMsg);
                    throw new TypesDontMatchException(errorMsg);
                }
            }
        }
    )?
    <tCLOSING_PARENTHESIS>
}

void leer() :
{
     ArrayList<String> lVars = new ArrayList<String>();
     Symbol s;
}
{
    <tLEER> 
    <tOPENING_PARENTHESIS>
    (lVars = lista_ids())
    {
        for (String i : lVars) {
            s = st.getSymbol(i);
            if (s.type == Symbol.Types.ARRAY || s.type == Symbol.Types.PROCEDURE || s.type == Symbol.Types.UNDEFINED) {
                String errorMsg = String.format("Error en leer: el tipo de variable '%s' no es válido. Tipo encontrado: %s.", i, s.type);
                System.err.println(errorMsg);
                throw new TypesDontMatchException(errorMsg);
            }
        }
    }
    <tCLOSING_PARENTHESIS> 
}

void entAcar() :
{
    AtribExp i;
}
{
    < tENTACAR >
    <tOPENING_PARENTHESIS>
    i = expresion_simple()
    {
        if (i.type != Symbol.Types.INT) {
            String errorMsg = String.format("Error en entAcar: tipo de expresión incorrecto. Se esperaba tipo INT, pero se encontró: %s.", i.type);
            System.err.println(errorMsg);
            throw new TypesDontMatchException(errorMsg);
        }
    }
    <tCLOSING_PARENTHESIS>
}

void carAent() :
{
    AtribExp c;
}
{
    < tCARAENT >
    < tOPENING_PARENTHESIS>
    c = primario()
    {
        if (c.type != Symbol.Types.CHAR) {
            String errorMsg = String.format("Error en carAent: tipo de expresión incorrecto. Se esperaba tipo CHAR, pero se encontró: %s.", c.type);
            System.err.println(errorMsg);
            throw new TypesDontMatchException(errorMsg);
        }
    }
    <tCLOSING_PARENTHESIS>
}

