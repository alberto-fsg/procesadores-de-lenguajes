void escribir_linea() :
{}
{
    <tESCRIBIR_LIN>
    <tOPENING_PARENTHESIS>
    (escribir_params())?
    <tCLOSING_PARENTHESIS>
}

void escribir() :
{}
{
    <tESCRIBIR>
    <tOPENING_PARENTHESIS>
    (escribir_params())
    <tCLOSING_PARENTHESIS>
}

void escribir_params() :
{
    AtribExp a;
}
{
    (a = expresion_simple())
    {
        if (a.type == Symbol.Types.ARRAY || a.type == Symbol.Types.PROCEDURE || a.type == Symbol.Types.UNDEFINED) {
            String errorMsg = String.format("Error en expresión: tipo de dato inválido encontrado. Tipo recibido: %s.", a.type);
            System.err.println("Error en escribir_params: " + errorMsg);
            throw new TypesDontMatchException(errorMsg);
        }
    }
    (
        <tCOMA> (a = expresion_simple())
        {
            if (a.type == Symbol.Types.ARRAY || a.type == Symbol.Types.PROCEDURE || a.type == Symbol.Types.UNDEFINED) {
                String errorMsg = String.format("Error en expresión: tipo de dato inválido encontrado. Tipo recibido: %s.", a.type);
                System.err.println("Error en escribir_params: " + errorMsg);
                throw new TypesDontMatchException(errorMsg);
            }
        }
    )*
}

void leer_linea() :
{
     ArrayList<String> lVars = new ArrayList<String>();
     Symbol s;
}
{
    <tLEER_LIN>
    <tOPENING_PARENTHESIS>
    (
        (lVars = lista_ids())
        {
            for (String i : lVars) {
                s = st.getSymbol(i);
                if (s.type == Symbol.Types.ARRAY || s.type == Symbol.Types.PROCEDURE || s.type == Symbol.Types.UNDEFINED) {
                    String errorMsg = String.format("Error en leer_linea: el tipo de variable '%s' no es válido. Tipo encontrado: %s.", i, s.type);
                    System.err.println(errorMsg);
                    throw new TypesDontMatchException(errorMsg);
                }
            }
        }
    )?
    <tCLOSING_PARENTHESIS>
}

void leer() :
{
     ArrayList<String> lVars = new ArrayList<String>();
     Symbol s;
}
{
    <tLEER> 
    <tOPENING_PARENTHESIS>
    (lVars = lista_ids())
    {
        for (String i : lVars) {
            s = st.getSymbol(i);
            if (s.type == Symbol.Types.ARRAY || s.type == Symbol.Types.PROCEDURE || s.type == Symbol.Types.UNDEFINED) {
                String errorMsg = String.format("Error en leer: el tipo de variable '%s' no es válido. Tipo encontrado: %s.", i, s.type);
                System.err.println(errorMsg);
                throw new TypesDontMatchException(errorMsg);
            }
        }
    }
    <tCLOSING_PARENTHESIS> 
}

void entAcar() :
{
    AtribExp i;
}
{
    < tENTACAR >
    <tOPENING_PARENTHESIS>
    i = expresion_simple()
    {
        if (i.type != Symbol.Types.INT) {
            String errorMsg = String.format("Error en entAcar: tipo de expresión incorrecto. Se esperaba tipo INT, pero se encontró: %s.", i.type);
            System.err.println(errorMsg);
            throw new TypesDontMatchException(errorMsg);
        }
    }
    <tCLOSING_PARENTHESIS>
}

void carAent() :
{
    AtribExp c;
}
{
    < tCARAENT >
    < tOPENING_PARENTHESIS>
    c = primario()
    {
        if (c.type != Symbol.Types.CHAR) {
            String errorMsg = String.format("Error en carAent: tipo de expresión incorrecto. Se esperaba tipo CHAR, pero se encontró: %s.", c.type);
            System.err.println(errorMsg);
            throw new TypesDontMatchException(errorMsg);
        }
    }
    <tCLOSING_PARENTHESIS>
}
