//*****************************************************************
// File:   gcl.jj
// Author: Procesadores de Lenguajes-University of Zaragoza
// Date:   enero 25
// Coms:   compilar mediante "ant"
//*****************************************************************

///////////////////////////////////////////////////////////////////////////////
// 1. ANALIZADOR LÉXICO
///////////////////////////////////////////////////////////////////////////////

options {
    IGNORE_CASE = true;
    COMMON_TOKEN_ACTION = true;
}

PARSER_BEGIN(gcl)

package traductor;

import lib.symbolTable.*;
import lib.symbolTable.exceptions.*;

import java.util.*;

public class gcl {
    // tabla de símbolos global
	static SymbolTable st;
   
   public static void main(String[] args) {
	   gcl parser = null;
	   
	   try {
           st = new SymbolTable();

		   if(args.length == 0) {
			   parser = new gcl(System.in);
		   }
		   else {
			   parser = new gcl(new java.io.FileInputStream(args[0]));
		   }
		   //Programa es el símbolo inicial de la gramática
		   parser.Programa();
		   //...
		   System.out.println("***** Análisis terminado con éxito *****");
	   }
	   catch (java.io.FileNotFoundException e) {
		   System.out.println ("Fichero " + args[0] + " no encontrado.");
	   }
	   catch (TokenMgrError e) {
		   System.out.println("LEX_ERROR: " + e.getMessage());
	   }
	   catch (Exception e) {
			System.out.println("Ha ocurrido una excepción: " + e.getMessage());
	   }
	}

    // inserta todos los símbolos de "lVars" de tipo "aT" y los marca como ref si "isRef",
    // auxiliar para "parametros_declaraciones" (los parámetros de la declaración de una función/procedimiento)
    private static void insertSymbols(AtribTipo aT, boolean isRef, ArrayList<String> lVars) {
    for (String id : lVars) {
        try {
            Symbol sV = null;
            if (aT.isArray) {
                sV = new SymbolArray(id, 0, aT.size-1, aT.type);
            } else {
                switch(aT.type) {
                    case INT:
                        sV = new SymbolInt(id); break;
                    case BOOL:
                        sV = new SymbolBool(id); break;
                    case CHAR:
                        sV = new SymbolChar(id); break;
                    default:
                        System.out.println("Error: tipo no definido para variable \"" + id + "\".");
                }
            }
            if (sV != null) {
                sV.parClass = isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL;
                st.insertSymbol(sV);
                System.out.println("[TABLA DE SÍMBOLOS] Insertado " + sV.toString());
            }
        } catch (AlreadyDefinedSymbolException e) {
            System.out.println("Error: Identificador ya existe: \"" + id + "\"");
        }
    }
}
}
PARSER_END(gcl)

///////////////////////////////////////////////////////////////////////////////
// 2. ANALIZADOR SINTÁCTICO
///////////////////////////////////////////////////////////////////////////////
