// orden de prioridad de expansión (cuanto más izquierda, más prioridad)
// primario - factor - termino - expresion_simple - relacion - expresion

AtribExp primario() :
{
    Token t;
    AtribExp ae;
    Symbol s;
    SymbolFunction s_func;
}
{
    {
        System.out.println("Entrando en primario");
    }
    (
        // Caso: llamada a entAcar
        entAcar()
        { return new AtribExp(Symbol.Types.CHAR, null, false, false); }
    |    
        // Caso: llamada a carAent
        carAent()
        { return new AtribExp(Symbol.Types.INT, null, false, false); }
    |
        // Caso: llamada a función (o procedimiento)
        LOOKAHEAD(2) // para distinguirlo de un array o variable
        t = <tIDENTIFICADOR>
        <tOPENING_PARENTHESIS>
        parametros_llamada_funcion()
        <tCLOSING_PARENTHESIS>
        {
            try {
                s = st.getSymbol(t.image);
            } catch (SymbolNotFoundException e) {
                System.out.println("Error: El identificador '" + t.image + "' no está definido.");
                System.out.println("Saliendo de primario por llamada a función (o parámetro) no definido");
                return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
            }
            if (s.type != Symbol.Types.FUNCTION) {
                System.out.println("Error: Se esperaba que '" + t.image + "' fuera una función (o procedimiento), pero se encontró: " + s.type + ".");
                System.out.println("Saliendo de primario por llamada a identificador que no es una función");
                return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
            }
            System.out.println("Saliendo de primario por llamada correcta a función (o procedimiento)");
            s_func = (SymbolFunction) s;
            return new AtribExp(s_func.returnType, null, false, false); // valor null por no ser evaluable en tiempo de compilación (no constante)
        }
    |
        // Caso: acceso a array
        LOOKAHEAD(2) // para distinguirlo de un array
        t = <tIDENTIFICADOR>
        <tOPENING_SQUARE_BRACKET>
        ae = expresion()
        <tCLOSING_SQUARE_BRACKET>
        {
            try {
                s = st.getSymbol(t.image);
            } catch (SymbolNotFoundException e) {
                System.out.println("Error: El identificador '" + t.image + "' no está definido.");
                System.out.println("Saliendo de primario por acceso a identificador no definido");
                return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
            }
            if (s.type != Symbol.Types.ARRAY) {
                System.out.println("Error: Se esperaba que '" + t.image + "' fuera un array, pero se encontró: " + s.type + ".");
                System.out.println("Saliendo de primario por identificador que no es un array");
                return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
            }
            if (ae.type != Symbol.Types.INT) {
                System.out.println("Error: Se esperaba que el índice del array fuera un entero, pero se evaluó: tipo " + ae.type + " con valor '" + ae.image + "'.");
            }
            SymbolArray arraySymbol = (SymbolArray) s;
            Symbol.Types elemType = arraySymbol.baseType;  
            System.out.println("Saliendo de primario por acceso a array");
            return new AtribExp(elemType, null, false, ae.isConst && s.constant); // valor null por no ser evaluable en tiempo de compilación (no constante)
        }
    |
        // Caso: variable
        t = <tIDENTIFICADOR>
        {
            try {
                s = st.getSymbol(t.image);
                String image = t.image;
                System.out.println("Saliendo de primario por variable");
                return new AtribExp(s.type, null, true, false); // valor null por no ser evaluable en tiempo de compilación (no existen variables constante en gcl)
            } catch (SymbolNotFoundException e) {
                System.out.println("Error: El identificador '" + t.image + "' no está definido.");
                System.out.println("Saliendo de primario por identificador no definido");
                return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
            }
        }
    |
        // Caso: constante int
        t = <tCONSTANT>
        { 
            System.out.println("Saliendo de primario por constante entera");
            return new AtribExp(Symbol.Types.INT, t.image, false, true); 
        }
    |
        // Caso: constante char
        t = <tCHAR>
        { 
            System.out.println("Saliendo de primario por constante de tipo char");
            return new AtribExp(Symbol.Types.CHAR, t.image, false, true); 
        }
    |
        // Caso: constante string
        t = <tSTRING>
        { 
            System.out.println("Saliendo de primario por constante de tipo string");
            return new AtribExp(Symbol.Types.STRING, t.image, false, true); 
        }
    |
        // Caso: constante true
        t = <tTRUE>
        { 
            System.out.println("Saliendo de primario por constante booleana true");
            return new AtribExp(Symbol.Types.BOOL, t.image, false, true); 
        }
    |
        // Caso: constante false
        t = <tFALSE>
        { 
            System.out.println("Saliendo de primario por constante booleana false");
            return new AtribExp(Symbol.Types.BOOL, t.image, false, true); 
        }
    )
    {
        System.out.println("Saliendo de primario por caso no identificado (¿inaccesible?)");
        return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
    }
}

AtribExp factor() :
{
    System.out.println("Entrando en factor");
    Token op = null;
    AtribExp ae;
}
{
    (op = <tNOT> | op = <tPLUS> | op = <tMINUS>)?
    (
        <tOPENING_PARENTHESIS> ae = expresion() <tCLOSING_PARENTHESIS>
    |
        ae = primario()
    )
    {
        if (op != null) {
            if ((op.image.equals("!") && ae.type != Symbol.Types.BOOL) ||
                ((op.image.equals("+") || op.image.equals("-")) && ae.type != Symbol.Types.INT)) {
                throw new TypesDontMatchException(
                    "Error: El operador '" + op.image + "' requiere un valor del tipo adecuado, pero se evaluó: "
                    + "tipo " + ae.type + " con valor '" + ae.image + "'."
                );
            }
            
            boolean isConst = ae.isConst;
            String val = null;
            
            if (isConst) {
                if (op.image.equals("!")) {
                    val = String.valueOf(!Boolean.parseBoolean(ae.image));
                } else {
                    int num = Integer.parseInt(ae.image);
                    val = op.image.equals("-") ? String.valueOf(-num) : String.valueOf(num);
                }
            }
            
            System.out.println("Saliendo de factor tras operador " + op.image + 
                               (isConst ? " con resultado constante" : " con resultado no constante"));
            return new AtribExp(op.image.equals("!") ? Symbol.Types.BOOL : Symbol.Types.INT, val, false, isConst);
        }
        
        System.out.println("Saliendo de factor con expresión primaria");
        return ae;
    }
}


AtribExp termino() :
{
    System.out.println("Entrando en termino");
    AtribExp left, right;
    Token op;
}
{
    left = factor()
    (
        op = operador_multiplicativo()
        right = factor()
        {
            if (left.type != Symbol.Types.INT || right.type != Symbol.Types.INT) {
                throw new TypesDontMatchException(
                    "Error: Los operadores multiplicativos requieren valores enteros. Se evaluó: "
                    + "left.type = " + left.type + " con valor '" + left.image 
                    + "', right.type = " + right.type + " con valor '" + right.image + "'."
                );
            }
            boolean isConst = left.isConst && right.isConst;
            String val = null;
            
            if (isConst) {
                int l = Integer.parseInt(left.image);
                int r = Integer.parseInt(right.image);
                
                switch (op.image) {
                    case "*":
                        val = String.valueOf(l * r);
                        break;
                    case "/":
                        val = (r != 0) ? String.valueOf(l / r) : "0"; 
                        break;
                    case "%":
                        val = String.valueOf(l % r);
                        break;
                }
            }
            
            left = new AtribExp(Symbol.Types.INT, val, false, isConst);
        }
    )*
    { 
        System.out.println("Saliendo de termino");
        return left; 
    }
}

AtribExp expresion_simple() :
{
    System.out.println("Entrando en expresion_simple");
    AtribExp left, right;
    Token op;
    boolean isConst;
}
{
    left = termino()
    { 
        isConst = left.isConst; 
    }
    (
        LOOKAHEAD(2) (op = <tPLUS> | op = <tMINUS>)
        right = termino()
        {
            if (left.type != Symbol.Types.INT || right.type != Symbol.Types.INT) {
                throw new TypesDontMatchException(
                    "Error: Los operadores aditivos requieren valores enteros. Se evaluó: "
                    + "left.type = " + left.type + " con valor '" + left.image 
                    + "', right.type = " + right.type + " con valor '" + right.image + "'."
                );
            }
            
            isConst = isConst && right.isConst;
            
            if (isConst) {
                int l = Integer.parseInt(left.image);
                int r = Integer.parseInt(right.image);
                
                left.image = op.image.equals("+") ? String.valueOf(l + r): String.valueOf(l - r);
            } else {
                left.image = null;
            }
            
            left.isConst = isConst;
        }
    )*
    { 
        System.out.println("Saliendo de expresion_simple");
        return left; 
    }
}


AtribExp relacion() :
{
    System.out.println("Entrando en relacion");
    AtribExp left, right = null;
    Token op = null;
}
{
    left = expresion_simple()
    (
        op = operador_relacional()
        right = expresion_simple()
        {
            if (op.image.matches("=|!=")) {
                if (left.type != right.type) {
                    throw new TypesDontMatchException(
                        "Error: Los operandos para el operador '" + op.image 
                        + "' deben ser del mismo tipo. Se evaluó: left.type = " + left.type 
                        + " con valor '" + left.image + "', right.type = " + right.type 
                        + " con valor '" + right.image + "'."
                    );
                }
            } else {
                if (left.type != Symbol.Types.INT || right.type != Symbol.Types.INT) {
                    throw new TypesDontMatchException(
                        "Error: Los operadores relacionales requieren valores enteros. Se evaluó: "
                        + "left.type = " + left.type + " con valor '" + left.image 
                        + "', right.type = " + right.type + " con valor '" + right.image + "'."
                    );
                }
            }
            
            boolean isConst = left.isConst && right.isConst;
            String val = null;
            
            if (isConst) {
                boolean result = false;
                
                switch (left.type) {
                    case INT:
                        int l = Integer.parseInt(left.image);
                        int r = Integer.parseInt(right.image);
                        switch (op.image) {
                            case "=": result = (l == r); break;
                            case "!=": result = (l != r); break;
                            case "<": result = (l < r); break;
                            case "<=": result = (l <= r); break;
                            case ">": result = (l > r); break;
                            case ">=": result = (l >= r); break;
                        }
                        break;
                        
                    case BOOL:
                        boolean bl = Boolean.parseBoolean(left.image);
                        boolean br = Boolean.parseBoolean(right.image);
                        result = op.image.equals("=") ? (bl == br) : (bl != br);
                        break;
                }
                
                val = String.valueOf(result);
            }
            
            left = new AtribExp(Symbol.Types.BOOL, val, false, isConst);
        }
    )?
    { 
        System.out.println("Saliendo de relacion");
        return left;
    }
}

AtribExp expresion() :
{
    System.out.println("Entrando en expresion");
    AtribExp left, right;
    Token op;
    boolean isConst;
    boolean left_type, right_type;
}
{
    left = relacion()
    { 
        isConst = left.isConst; 
    }
    (
        (op = <tAND> | op = <tOR>)
        right = relacion()
        {
            if (left.type != Symbol.Types.BOOL || right.type != Symbol.Types.BOOL) {
                throw new TypesDontMatchException(
                    "Error: Los operadores lógicos requieren valores booleanos. Se evaluó: "
                    + "left.type = " + left.type + " con valor '" + left.image 
                    + "', right.type = " + right.type + " con valor '" + right.image 
                    + "'. Al menos uno de ellos no es booleano."
                );
            }
            
            isConst = isConst && right.isConst;
            
            if (isConst) {
                boolean l = Boolean.parseBoolean(left.image);
                boolean r = Boolean.parseBoolean(right.image);
                
                left.image = op.image.equals("&") 
                    ? String.valueOf(l && r) 
                    : String.valueOf(l || r);
            } else {
                left.image = null;
            }
            
            left.isConst = isConst;
        }
    )*
    { 
        System.out.println("Saliendo de expresion");
        return left; 
    }
}


void lista_una_o_mas_exps() :
{}
{
    ( expresion() )+
}

Token operador_multiplicativo() :
{
    Token t;
}
{
    t = <tTIMES>    { return t; }
  | t = <tDIVIDE>   { return t; }
  | t = <tMOD>      { return t; }
}

Token operador_relacional() :
{
    Token t;
}
{
    t = <tEQUAL>    { return t; }
  | t = <tNOTEQUAL> { return t; }
  | t = <tLT>       { return t; }
  | t = <tLE>       { return t; }
  | t = <tGT>       { return t; }
  | t = <tGE>       { return t; }
}
