/**
 * Orden de prioridad de expansión (cuanto más izquierda, más prioridad).
 * primario - factor - termino - expresion_simple - relacion - expresion
 */

AtribExp primario() : 
{
    Token t;
    AtribExp ae;
    Symbol s = null;
    SymbolFunction s_func;
    SymbolArray s_array;
    boolean ok = true;
}
{
    (
        /** Caso: llamada a entAcar */
        entAcar()
        { return new AtribExp(Symbol.Types.CHAR, null, false, false); }
    |    
        /** Caso: llamada a carAent */
        carAent()
        { return new AtribExp(Symbol.Types.INT, null, false, false); }
    |
        /** Caso: llamada a función excluyendo procedimientos. */
        LOOKAHEAD(2) // Para distinguirlo de un array o variable.
        t = <tIDENTIFICADOR>
        <tOPENING_PARENTHESIS>
        parametros_llamada_funcion()
        <tCLOSING_PARENTHESIS>
        {
            try {
                s = st.getSymbol(t.image);
            } catch(SymbolNotFoundException e) {
                printError(String.format("Función \"%s\" no encontrada en tabla de símbolos.", t.image));
                return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
            }
            if(typeEqual(Symbol.Types.FUNCTION, s.type, String.format("Tipo incorrecto. Se esperaba FUNCTION pero se encontró %s.", s.type)))
                return new AtribExp(((SymbolFunction)s).returnType, null, false, false);
            else return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
        }
    |
        /** Caso: acceso a array */
        LOOKAHEAD(2) // Para distinguirlo del acceso a una variable.
        t = <tIDENTIFICADOR>
        <tOPENING_SQUARE_BRACKET>
        ae = expresion()
        <tCLOSING_SQUARE_BRACKET>
        {
            try {
                s = st.getSymbol(t.image);
            } catch (SymbolNotFoundException e) {
                printError(String.format("Array \"%s\" no encontrada en tabla de símbolos.", t.image));
                return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
            }
            /** El identificador hace referencia a un array */
            ok = typeEqual(Symbol.Types.ARRAY, s.type, String.format("Tipo incorrecto. Se esperaba ARRAY pero se encontró %s.", s.type));
            /** El indice de acceso al array es un entero */
            ok &= typeEqual(Symbol.Types.INT, ae.type, String.format("Tipo incorrecto. Se esperaba que el índice del array fuera un INT pero se encontró %s.", ae.type));
            /** Si el valor de acceso al vector es un entero y es constante, comprobar que es válido */
            s_array = (SymbolArray) s;
            if(ae.isConst && Integer.valueOf(ae.image) > s_array.maxInd) {
                printError(String.format("El índice %s es demasiado grande para el vector %s de tamaño %s.", ae.image, t.image, Integer.toString(s_array.maxInd + 1)));
                ok = false;
            }
            return ok ? new AtribExp(s_array.baseType, null, true, false) : new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
        }
    |
        /** Caso: acceso a una variable */
        t = <tIDENTIFICADOR>
        {
            try {
                s = st.getSymbol(t.image);
                return new AtribExp(s.type, t.image, true, false);
            } catch (SymbolNotFoundException e) {
                printError(String.format("Identificador \"%s\" no encontrado en tabla de símbolos.", t.image));
                return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
            }
        }
    |
        /** Caso: constante int */
        t = <tCONSTANT>
        { 
            return new AtribExp(Symbol.Types.INT, t.image, false, true); 
        }
    |
        /** Caso: constante char */
        t = <tCHAR>
        {
            return new AtribExp(Symbol.Types.CHAR, t.image, false, true); 
        }
    |
        /** Caso: constante string. */
        t = <tSTRING>
        {
            return new AtribExp(Symbol.Types.STRING, t.image, false, true); 
        }
    |
        /** Caso: constante bool con valor true */
        t = <tTRUE>
        {
            return new AtribExp(Symbol.Types.BOOL, t.image, false, true); 
        }
    |
        /** Caso: constante bool con valor false */
        t = <tFALSE>
        {
            return new AtribExp(Symbol.Types.BOOL, t.image, false, true); 
        }
    )
}

AtribExp factor() :
{
    Token op = null;
    boolean ok = true;
    AtribExp ae;
}
{
    (op = <tNOT> | op = <tPLUS> | op = <tMINUS>)?
    (
        <tOPENING_PARENTHESIS> ae = expresion() <tCLOSING_PARENTHESIS>
    |
        ae = primario()
    )
    {
        if (op != null) {
            /** Mirar si el operando es válido respecto al operador */
            ok = op.image.equals("!") && typeEqual(Symbol.Types.BOOL, ae.type,
                String.format("El operador \"%s\" requiere un valor de tipo BOOL, pero se ha proporcionado %s.", op.image, ae.type));

            ok |= (op.image.equals("+") || op.image.equals("-")) && typeEqual(Symbol.Types.INT, ae.type,
                String.format("El operador \"%s\" requiere un valor de tipo INT, pero se ha proporcionado %s.", op.image, ae.type));

            /** Evaluar la expresión recibida si es constante y tiene delante algún operador */
            String val = null;
            if(ok && ae.isConst) {
                if(op.image.equals("!"))
                    val = String.valueOf(!Boolean.parseBoolean(ae.image));
                else {
                    int num = Integer.parseInt(ae.image);
                    val = op.image.equals("-") ? String.valueOf(-num) : String.valueOf(num);
                }
            }

            /** Devolver expresión del tipo correspondiente */
            if(ok) return new AtribExp(op.image.equals("!") ? Symbol.Types.BOOL : Symbol.Types.INT, val, false, ae.isConst);
            else return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
        }
        /** Devolver exactamente la expresión recibida si no tiene ningún operador delante */
        return ae;
    }
}


AtribExp termino() :
{
    AtribExp left, right;
    boolean ok = true;
    Token op;
}
{
    left = factor()
    (
        op = operador_multiplicativo()
        right = factor()
        {
            ok &= typeEqual(Symbol.Types.INT, Arrays.asList(left.type, right.type),
            String.format("Los operandos del operador \"%s\" deben ser de tipo INT. Recibido %s de tipo %s.", op.image, right.image, right.type));

            /** Evaluar término si ambos factores constantes */
            String val = null;
            boolean isConst = left.isConst && right.isConst;
            if(isConst && ok) {
                int l = Integer.parseInt(left.image), r = Integer.parseInt(right.image);
                switch(op.image.toLowerCase()) {
                    case "*":
                        val = String.valueOf(l * r);
                        break;
                    case "/":
                        val = (r != 0) ? String.valueOf(l / r) : "0";
                        break;
                    case "mod":
                        val = String.valueOf(l % r);
                        break;
                }
            }
            if(ok) left = new AtribExp(Symbol.Types.INT, val, false, isConst);
            else left = new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
        }
    )*
    { return left; }
}

AtribExp expresion_simple() :
{
    AtribExp left, right;
    boolean ok = true;
    Token op;
}
{
    left = termino()
    (
        LOOKAHEAD(2) (op = <tPLUS> | op = <tMINUS>)
        right = termino()
        {
            ok &= typeEqual(Symbol.Types.INT, Arrays.asList(right.type, left.type),
                String.format("Los operandos del operador \"%s\" deben ser de tipo INT. Recibido %s de tipo %s.", op.image, right.image, right.type));
            
            /** Evaluar expresión simple si ambos factores constantes */
            String val = null;
            boolean isConst = left.isConst && right.isConst;
            if (isConst && ok) {
                int l = Integer.parseInt(left.image);
                int r = Integer.parseInt(right.image);
                val = op.image.equals("+") ? String.valueOf(l + r): String.valueOf(l - r);
            }
            
            if(ok) left = new AtribExp(Symbol.Types.INT, val, false, isConst);
            else left = new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
        }
    )*
    { return left; }
}


AtribExp relacion() :
{
    AtribExp left, right;
    boolean ok = true;
    Token op;
}
{
    left = expresion_simple()
    (
        op = operador_relacional()
        right = expresion_simple()
        {

            /** Si el operador lo requiere, ambos operandos deben ser del mismo tipo = <> */
            if(op.image.matches("=|<>"))
                ok &= typeEqual(left.type, right.type,
                    String.format("Los operandos del operador \"%s\" deben ser del mismo tipo. Se proporciono %s y %s.", op.image, left.type, right.type));

            /** Si el operador lo requiere, ambos operandos deben ser del tipo INT  */
            if(op.image.matches("<|<=|>|>="))
                ok &= typeEqual(Symbol.Types.INT, Arrays.asList(left.type, right.type),
                    String.format("Los operandos del operador \"%s\" deben ser de tipo INT. Se proporciono %s y %s.", op.image, left.type, right.type));
            
            /** Evaluar la relación si las dos expresiones simples son constantes */
            boolean result = true;
            boolean isConst = left.isConst && right.isConst;
            if (isConst) {                
                switch (left.type) {
                    case INT:
                        int l = Integer.parseInt(left.image);
                        int r = Integer.parseInt(right.image);
                        switch (op.image) {
                            case "=":   result = (l == r);  break;
                            case "<>":  result = (l != r);  break;
                            case "<":   result = (l < r);   break;
                            case "<=":  result = (l <= r);  break;
                            case ">":   result = (l > r);   break;
                            case ">=":  result = (l >= r);  break;
                        }
                        break; 
                    case BOOL:
                        boolean bl = Boolean.parseBoolean(left.image);
                        boolean br = Boolean.parseBoolean(right.image);
                        result = op.image.equals("=") ? (bl == br) : (bl != br);
                        break;
                }
            }
            left = new AtribExp(Symbol.Types.BOOL, String.valueOf(result), false, isConst);
        }
    )?
    { 
        if(ok) return left;
        else return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
    }
}

AtribExp expresion() :
{
    AtribExp left, right;
    boolean ok = true;
    Token op;
}
{
    left = relacion()
    (
        (op = <tAND> | op = <tOR>)
        right = relacion()
        {
            /** ambos operandos deber ser del mismo tipo */
            ok = typeEqual(left.type, right.type,
                String.format("Los operandos para el operador \"%s\" deben de ser del mismo tipo. %s != %s.", op.image, left.type, right.type));

            /** los operadores & y | requieren operandos del tipo BOOL */
            ok &= typeEqual(Symbol.Types.BOOL, Arrays.asList(left.type, right.type),
                String.format("Los operandos para el operador \"%s\" deben ser de tipo BOOL. Recibido %s %s.", op.image, left.type, right.type));
                        
            /** Evaluar la expresion si las 2 relaciones son constantes.*/
            String val = null;
            boolean isConst = left.isConst && right.isConst;
            if (isConst && ok) {
                boolean l = Boolean.parseBoolean(left.image);
                boolean r = Boolean.parseBoolean(right.image);
                
                val = op.image.equals("&") ? String.valueOf(l && r) : String.valueOf(l || r);
            }
            left = new AtribExp(Symbol.Types.BOOL, val, false, isConst);
        }
    )*
    { 
        if(ok) return left;
        else return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
    }
}


void lista_una_o_mas_exps() :
{}
{
    ( expresion() )+
}

Token operador_multiplicativo() :
{
    Token t;
}
{
    t = <tTIMES>    { return t; }
  | t = <tDIVIDE>   { return t; }
  | t = <tMOD>      { return t; }
}

Token operador_relacional() :
{
    Token t;
}
{
    t = <tEQUAL>    { return t; }
  | t = <tNOTEQUAL> { return t; }
  | t = <tLT>       { return t; }
  | t = <tLE>       { return t; }
  | t = <tGT>       { return t; }
  | t = <tGE>       { return t; }
}
