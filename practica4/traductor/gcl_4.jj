// AUTOGENERADO - NO EDITAR MANUALMENTE
// Este archivo se genera automáticamente por build.sh

// --- INICIO DE main.jj ---
//*****************************************************************
// File:   gcl.jj
// Author: Procesadores de Lenguajes-University of Zaragoza
// Date:   enero 25
// Coms:   compilar mediante "ant"
//*****************************************************************

///////////////////////////////////////////////////////////////////////////////
// 1. ANALIZADOR LÉXICO
///////////////////////////////////////////////////////////////////////////////

options {
    IGNORE_CASE = true;
    COMMON_TOKEN_ACTION = true;
}

PARSER_BEGIN(gcl)

package traductor;

import lib.symbolTable.*;
import lib.symbolTable.exceptions.*;
import lib.tools.codeGeneration.*;
import lib.tools.codeGeneration.PCodeInstruction.OpCode;

import java.util.*;

public class gcl {
    // tabla de símbolos
    static SymbolTable st;

    // código generado
    static CodeBlock code = new CodeBlock();
    
   public static void main(String[] args) {
	   gcl parser = null;
	   
        for(int i = 0; i < CGUtils.memorySpaces.length; ++i) {
            // El offset de cada nivel empieza en 3, los primeros tres espacios son reservados (Tema 5, lección 10)
            CGUtils.memorySpaces[i] = 3;
        }

	   try {
           st = new SymbolTable();

		   if(args.length == 0) {
			   parser = new gcl(System.in);
		   }
		   else {
			   parser = new gcl(new java.io.FileInputStream(args[0]));
		   }
		   //Programa es el símbolo inicial de la gramática
		   parser.Programa();

		   System.out.println("***** Análisis terminado con éxito *****");

           System.out.println("\n" + code.toString());

           System.out.println("***** P-Code generado *****");
	   }
	   catch (java.io.FileNotFoundException e) {
		   System.out.println ("Fichero " + args[0] + " no encontrado.");
	   }
	   catch (TokenMgrError e) {
		   System.out.println("LEX_ERROR: " + e.getMessage());
	   }
	   catch (Exception e) {
			System.out.println("Ha ocurrido una excepción: " + e.getMessage());
	   }
	}

    // inserta todos los símbolos de "lVars" de tipo "aT" y los marca como ref si "isRef",
    // auxiliar para "parametros_declaraciones" (los parámetros de la declaración de una función/procedimiento)
    private static void insertSymbols(AtribTipo aT, boolean isRef, ArrayList<String> lVars) {
        for (String id : lVars) {
            try {
                Symbol sV = null;
                if (aT.isArray) {
                    sV = new SymbolArray(id, 0, aT.size-1, aT.type);
                } else {
                    switch(aT.type) {
                        case INT:
                            sV = new SymbolInt(id); break;
                        case BOOL:
                            sV = new SymbolBool(id); break;
                        case CHAR:
                            sV = new SymbolChar(id); break;
                        default:
                            System.out.println("Error: tipo no definido para variable \"" + id + "\".");
                    }
                }
                if (sV != null) {
                    sV.parClass = isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL;
                    sV.offset = CGUtils.memorySpaces[st.level]++;
                    st.insertSymbol(sV);
                    printMessage("Tabla de símbolos",
                        String.format("\"%s\" %d (offset %d).", sV.name, st.level, sV.offset));
                }
            } catch (AlreadyDefinedSymbolException e) {
                System.out.println("Error: Identificador ya existe: \"" + id + "\"");
            }
        }
    }

    private static boolean typeNotEqual(Symbol.Types esperado, Symbol.Types real, String error) {
        if(esperado == real) {
            if(error != null) printError(error);
            return false;
        }
        return true;
    }

    private static boolean typeEqual(Symbol.Types esperado, Symbol.Types real, String error) {
        if(esperado != real) {
            if(error != null) printError(error);
            return false;
        }
        return true;
    }

    private static boolean typeNotEqual(List<Symbol.Types> esperado, Symbol.Types real, String error) {
        if(!esperado.isEmpty()) {
            for(Symbol.Types t : esperado) {
                if(t == real) {
                    if(error != null) printError(error);
                    return false;
                }
            }
        }
        return true;
    }

    private static boolean typeEqual(Symbol.Types esperado, List<Symbol.Types> real, String error) {
        if(!real.isEmpty()) {
            for(Symbol.Types t : real) {
                if(esperado != t) {
                    if(error != null) printError(error);
                    return false;
                }
            }
        }
        return true;
    }

    private static boolean typeNotEqual(List<Symbol.Types> esperado, ArrayList<String> real) {
        boolean ok = true;
        Symbol s;
        for(String i : real) {
            try {
                s = st.getSymbol(i);
                ok = ok && typeNotEqual(esperado, s.type, String.format("leer_lin o leer incompatible con tipo de dato \"%s\"", s.type));
            } catch(SymbolNotFoundException e) {
                printError(String.format("Variable \"%s\" no encontrada en tabla de símbolos.", i));
            }
        }
        return ok;
    }

    private static CodeBlock setupProcedure(Token identificador, ArrayList<Symbol> parametros) {
        CodeBlock headerCode = new CodeBlock(); // Este CodeBlock solo contendrá la etiqueta ahora

        // 1. Crear e insertar el símbolo del procedimiento en la tabla de símbolos
        //    (Inicialmente se inserta en el ámbito actual, el que está activo antes del proc)
        SymbolProcedure sProc = new SymbolProcedure(identificador.image, parametros);
        try {
            st.insertSymbol(sProc); // Insertar en el ámbito que precede al del procedimiento
        } catch(AlreadyDefinedSymbolException e) {
            printError(String.format("Error: Ya definido valor de identificador \"%s\" para procedimiento.", identificador.image));
            // Manejar el error apropiadamente (ej: devolver un bloque vacío, marcar error global)
        }

        // 2. Añadir la etiqueta de entrada para el código del procedimiento
        headerCode.addLabel(identificador.image);

        // 3. Crear un nuevo bloque de activación (ámbito) para los parámetros y variables locales
        st.insertBlock(); // Esto apila un nuevo ámbito en la pila de la tabla de símbolos

        // 4. Procesar parámetros: asignar offsets e insertar símbolos en el nuevo ámbito.
        //    El código P-Code para ACCEDER o ASIGNAR parámetros (SRF/DRF) se generará
        //    en las reglas de parsing del cuerpo del procedimiento, NO aquí.
        for (Symbol param : parametros) {
            // Asignar posición (offset) en el marco de activación actual (st.level)
            param.offset = CGUtils.memorySpaces[st.level]++; // Asumiendo que memorySpaces[st.level] lleva la cuenta

            // Insertar el símbolo del parámetro en la tabla de símbolos del ámbito actual
            try {
                st.insertSymbol(param); // Insertar en el ámbito creado por st.insertBlock()
            } catch (AlreadyDefinedSymbolException e) {
                printError(String.format("Error: Ya definida variable de identificador \"%s\" en el ámbito del procedimiento.", param.name));
            }

            // *** IMPORTANTE: Hemos eliminado la generación de código P-Code (ASGI, ASG, generarCopiaArray) aquí. ***
            // *** Esa lógica se genera cuando se usa el parámetro en una instrucción/expresión dentro del cuerpo. ***
        }

        // Retornamos el CodeBlock de cabecera, que ahora solo contiene la etiqueta.
        // En este punto, la tabla de símbolos 'st' está en el ámbito local del procedimiento con los símbolos de parámetro.
        return headerCode;
    }

    /**
     * Realiza las acciones de cleanup para un procedimiento:
     * Genera la instrucción CSF y elimina el ámbito actual (Activation Block).
     *
     * @return Un CodeBlock que contiene únicamente la instrucción CSF.
     */
    private static CodeBlock cleanupProcedure() {
        CodeBlock footerCode = new CodeBlock();

        // 1. Generar la instrucción P-Code para cerrar el marco de pila y retornar
        footerCode.addInst(PCodeInstruction.OpCode.CSF);

        // 2. Eliminar el bloque de activación (ámbito) actual de la pila de la tabla de símbolos
        st.removeBlock(); // Saca el ámbito local del procedimiento.

        return footerCode; // Retornamos el CodeBlock de pie de página (solo CSF).
    }


    private static CodeBlock insertFunction(Token identificador, AtribTipo returnType, ArrayList<Symbol> parametros) {
        CodeBlock cb = new CodeBlock();
        if(returnType.type != Symbol.Types.INT && returnType.type != Symbol.Types.BOOL && returnType.type != Symbol.Types.CHAR) {
            printError(String.format("Una función solo puede devolver valores de tipo INT, BOOL o CHAR. Tipo dado: %s.", returnType.type));
        } else {
            SymbolFunction sFunc = new SymbolFunction(identificador.image, parametros, returnType.type);
            try {
                sFunc.offset = CGUtils.memorySpaces[st.level]++;
                st.insertSymbol(sFunc);
                insertParameters(parametros);
                sFunc.tam = CGUtils.memorySpaces[st.level] - 3;
            } catch(AlreadyDefinedSymbolException e) {
                printError(String.format("Ya definido valor de identificador \"%s\".", identificador.image));
            }
        }
        return cb;
    }

    /**
     * Genera el código para copiar un array pasado por valor.
     *
     * @param array Array del que se genera la copia.
     * @return Bloque de código que genera la copia del array.
     */
    private static CodeBlock generarCopiaArray(Symbol array) {
        CodeBlock cb = new CodeBlock();

        String etiqueta_inicio = array.name + "_copia_inicio";
        String etiqueta_final  = array.name + "_copia_final";

        // Longitud del array = maxInd - minInd + 1
        SymbolArray symbol_array = (SymbolArray) array;
        int longitud = symbol_array.maxInd - symbol_array.minInd + 1;

        // Inicializar índice: idx = 0
        cb.addInst(OpCode.STC, 0);

        // Etiqueta de inicio de bucle
        cb.addLabel(etiqueta_inicio);

        // Comparar: idx < longitud, si no se cumple saltar al final
        cb.addInst(OpCode.DUP);                      // duplicar idx (LT lo destruye)
        cb.addInst(OpCode.STC, longitud);            // cargar longitud
        cb.addInst(OpCode.LT);                       // comparar idx < longitud
        cb.addInst(OpCode.JMF, etiqueta_final);      // si no, saltar al final

        // Cargar elemento origen: DRF [base + idx]
        int bloques_diferencia = st.level - array.nivel;
        cb.addInst(OpCode.SRF, bloques_diferencia, array.offset); // dirección base origen
        cb.addInst(OpCode.SWP);                                   // traer idx arriba
        cb.addInst(OpCode.PLUS);                                  // base + idx
        cb.addInst(OpCode.DRF);                                   // cargar valor

        // Guardar en destino: ASG [base + idx] = valor
        cb.addInst(OpCode.SRF, bloques_diferencia, array.offset); // dirección base destino
        cb.addInst(OpCode.SWP);                                   // traer idx arriba
        cb.addInst(OpCode.PLUS);                                  // base + idx
        cb.addInst(OpCode.ASG);                                   // guardar valor

        // Incrementar idx y repetir
        cb.addInst(OpCode.STC, 1);                // cargar 1
        cb.addInst(OpCode.PLUS);                  // idx = idx + 1
        cb.addInst(OpCode.JMP, etiqueta_inicio);  // saltar al inicio del bucle

        // Fin del bucle
        cb.addLabel(etiqueta_final);

        return cb;
    }

    private static void insertParameters(ArrayList<Symbol> parametros) {
        st.insertBlock();
        for(Symbol param : parametros) {
            try {
                param.offset = CGUtils.memorySpaces[st.level]++;
                st.insertSymbol(param);
                printMessage("Tabla de símbolos",
                    String.format("\"%s\" %d (offset %d).", param.name, st.level, param.offset));
            } catch(AlreadyDefinedSymbolException e) {
                printError(String.format("Ya definida variable de identificador \"%s\".", param.name));
            }
        }
    }

    private static void checkParameters(Token identificador, ArrayList<AtribExp> parametros) {
        try {
            Symbol funOproc = st.getSymbol(identificador.image);
            ArrayList<Symbol> params;
            if(funOproc.type == Symbol.Types.FUNCTION || funOproc.type == Symbol.Types.PROCEDURE) {
                if(funOproc.type == Symbol.Types.FUNCTION)
                    params = ((SymbolFunction)funOproc).parList;
                else
                    params = ((SymbolProcedure)funOproc).parList;
            } else {
                printError(String.format("\"%s\" no es una función o procedimiento.", identificador.image));
                return;
            }
            // Comprobar que el número de parámetros es el adecuado
            if(params.size() != parametros.size()) {
                printError(String.format("\"%s\" esperaba %d parámetros. Recibidos %d parámetros.",
                    identificador.image, params.size(), parametros.size()));
                return;
            }
            // Comprobar validez parámetro a parámetro
            for(int i = 0; i < params.size(); ++i) {
                // Comprobar que parámetro pasado es del tipo correcto
                if(params.get(i).type != parametros.get(i).type) {
                    printError(String.format("Parámetro no compatible con valor dado. Tipo esperado: %s. Tipo recibido: %s.",
                        params.get(i).type, parametros.get(i).type));
                }
                // Comprobar que parámetro pasado es una variable si se requiere paso por referencia
                if(params.get(i).parClass == Symbol.ParameterClass.REF && !parametros.get(i).isVar) {
                    printError("Parámetro por referencia. Espera variable, recibido constante.");
                }
            }
        } catch(SymbolNotFoundException e) {
            printError(String.format("\"%s\" no es una función o procedimiento.", identificador.image));
        }
    }

    private static void printError(String error) {
        String crojo = "\u001B[31m";
        String reset = "\u001B[0m";
        System.err.printf("%sError: (%d, %d):%s %s\n", crojo, 
            token.beginLine, token.beginColumn, reset, error);
    }

    private static void printMessage(String label, String message) {
        String verde = "\u001B[32m";
        String reset = "\u001B[0m";
        System.out.printf("%s%s:%s %s\n", verde, label, reset, message);
    }

    /**
     * Declara variables en la tabla de símbolos y asigna espacio en memoria.
     * 
     * @param tipoVar Tipo de las variables a declarar
     * @param ids Lista de identificadores de variables
     * @throws AlreadyDefinedSymbolException Si algún identificador ya existe
     */
    private static void declararVariablesGenerarCodigo(AtribTipo tipoVar, List<String> ids) {
        for (String nombre : ids) {
            try {
                Symbol simbolo = crearSimboloVariable(nombre, tipoVar);
                simbolo.offset = CGUtils.memorySpaces[st.level]++;
                st.insertSymbol(simbolo);
                
                printMessage("Tabla de símbolos", 
                    String.format("\"%s\"  %d (offset %d).", 
                    nombre, st.level, simbolo.offset));
                    
            } catch (AlreadyDefinedSymbolException e) {
                printError(String.format("Ya existe \"%s\".", nombre));
            }
        }
    }

    /**
     * Crea un símbolo de variable según su tipo (entero, booleano, carácter o array).
     * 
     * @param nombre Nombre de la variable
     * @param tipo_variable Tipo y dimensiones de la variable
     * @return Símbolo creado o null si el tipo no es válido o el nombre es null
     */
    private static Symbol crearSimboloVariable(String nombre, AtribTipo tipo_variable) {
        if (nombre == null) {
            return null;
        }
        
        if (tipo_variable.isArray) {
            return new SymbolArray(nombre, 0, tipo_variable.size-1, tipo_variable.type);
        }
        
        switch (tipo_variable.type) {
            case INT:  return new SymbolInt(nombre);
            case BOOL: return new SymbolBool(nombre);
            case CHAR: return new SymbolChar(nombre);
            default:
                printError("Tipo no válido para \"" + nombre + "\"");
                return null;
        }
    }

    /**
     * Genera asignación de variable normal o de un componente de un array en P-Code
     * 
     * @param nombre_variable Nombre de la variable/array a asignar
     * @param expresion_indice Expresión con el índice del componente si es una variable array (null en caso contrario)
     * @param expresion_valor Expresión con el valor a asignar
     * @return el código generado
     */
    private static CodeBlock asignacionVariableGenerarCodigo(
        String nombre_variable, 
        AtribExp expresion_indice, 
        AtribExp expresion_valor
    ) {
        CodeBlock cb = new CodeBlock();
        try {

            // Validación de que la variable tiene asociado un trozo de memoria
            Symbol simbolo_var = st.getSymbol(nombre_variable);
            int offset = simbolo_var.offset;
            if (offset == -1) {
                printError(String.format("Variable \"%s\" no declarada (sin offset).", nombre_variable));
                return cb;
            }
    
            // Calculo de dirección de destino
            int nivel_anidamiento = st.level - simbolo_var.nivel;;
            cb.addComment("assignment " + nombre_variable);
            if (expresion_indice != null) {
                // Caso array: base + índice
                cb.addInst(PCodeInstruction.OpCode.SRF, nivel_anidamiento, offset);
                cb.addBlock(expresion_indice.code);
                cb.addInst(PCodeInstruction.OpCode.PLUS);
                cb.addInst(PCodeInstruction.OpCode.STC, 0);
                cb.addInst(PCodeInstruction.OpCode.SBT);
            } else {
                // Caso variable simple
                cb.addInst(PCodeInstruction.OpCode.SRF, nivel_anidamiento, offset);
            }

            // Generación del valor
            cb.addBlock(expresion_valor.code);

            // Almacenamiento
            cb.addInst(PCodeInstruction.OpCode.ASG);

        } catch (SymbolNotFoundException e) {
            printError(String.format("Variable \"%s\" no encontrada.", nombre_variable));
        }

        return cb;
    }


    /** Genera bucle con inversión en P-Code
     * 
     * @param condicion bloque con el código para evaluar la condición del bucle
     * @param cuerpo bloque con las instrucciones que forman el cuerpo del bucle
     * @return el código generado
     */
    private static CodeBlock bucleGenerarCodigo(AtribExp condicion, CodeBlock cuerpo) {
        CodeBlock cb = new CodeBlock();

        String etiqueta_inicio = CGUtils.newLabel();
        String etiqueta_prueba = CGUtils.newLabel();
        String etiqueta_final  = CGUtils.newLabel();

        // Salto inicial a la prueba invertida
        cb.addInst(OpCode.JMP, etiqueta_prueba);

        // Cuerpo
        cb.addLabel(etiqueta_inicio);
        cb.addBlock(cuerpo);

        // Prueba invertida
        cb.addLabel(etiqueta_prueba);
        cb.addBlock(condicion.code);
        cb.addInst(OpCode.JMF, etiqueta_final);
        cb.addInst(OpCode.JMP, etiqueta_inicio);
        cb.addLabel(etiqueta_final);

        return cb;
    }

    /** Genera bloque switch en P-Code
     * 
     * @param condiciones Lista de expresiones booleanas que determinan cada caso
     * @param cuerpos     Lista de bloques de código a ejecutar para cada caso correspondiente
     * @param otherwise   Bloque de código opcional que se ejecuta cuando ningún caso coincide (puede ser null)
     * @return el código generado
     */
    private static CodeBlock seleccionGenerarCodigo(
        java.util.List<AtribExp> condiciones,
        java.util.List<CodeBlock> cuerpos,
        CodeBlock otherwise
    ) {
        CodeBlock cb = new CodeBlock();

        String etiqueta_final = CGUtils.newLabel();
        java.util.List<String> etiquetas_salto = new java.util.ArrayList<String>();

        // Asociar una etiqueta a cada condición
        for (int i = 0; i < condiciones.size(); i++) {
            etiquetas_salto.add(CGUtils.newLabel());
        }

        // Generar código para cada condición
        for (int i = 0; i < condiciones.size(); i++) {
            // Evaluar la i-ésima condición
            cb.addBlock(condiciones.get(i).code);
            
            // Caso falso: continuar con la siguiente condición
            cb.addInst(OpCode.JMF, etiquetas_salto.get(i));
            
            // Caso verdadero: ejecutar el bloque y saltar al final del switch
            cb.addBlock(cuerpos.get(i));
            cb.addInst(OpCode.JMP, etiqueta_final);

            // Etiqueta para continuar con la siguiente condición si el caso es falso
            cb.addLabel(etiquetas_salto.get(i));
        }

        // Manejar el bloque por defecto (si existe)
        if (otherwise != null) {
            cb.addBlock(otherwise);
        }

        // Etiqueta a la que se salta si alguna condición es verdadera
        cb.addLabel(etiqueta_final);

        return cb;
    }

    public static CodeBlock declaracionProcedimientoGenerarCodigo(
        String nombre,
        ArrayList<Symbol> parametros,
        CodeBlock cuerpo
    ) {
        CodeBlock cb = new CodeBlock();
    
        cb.addLabel(nombre);

        // Asignar parámetros (importante que quien llame haga push en orden)
        for (Symbol param : parametros) {
            cb.addInst(PCodeInstruction.OpCode.SRF, 0, param.offset);
            cb.addInst(PCodeInstruction.OpCode.ASGI);
        }

        cb.addBlock(cuerpo);

        cb.addInst(PCodeInstruction.OpCode.CSF);
        
        return cb;
    }
}

PARSER_END(gcl)

///////////////////////////////////////////////////////////////////////////////
// 2. ANALIZADOR SINTÁCTICO
///////////////////////////////////////////////////////////////////////////////

// --- INICIO DE tokens.jj ---
// sacado de https://cs.lmu.edu/~ray/notes/javacc/
// "preprocesado"
SKIP: {
  " "
| "\t"
| "\n"
| "\r"
| <"--" (~["\n","\r"])* ("\n"|"\r")> // comentarios monolínea
}

// auxiliares
TOKEN : {
	< #LETTER: (["a"-"z","A"-"Z"]) >
|	< #DIGIT: ["0"-"9"] >
}

// todos los tokens de gcl
// tOTHER no es léxicamente válido, el resto de tokens si
TOKEN : {
     // palabras reservadas
     < tPROGRAMA: "Programa" >
|    < tESCRIBIR_LIN: "escribir_lin" >
|    < tESCRIBIR: "escribir" >
|    < tLEER_LIN: "leer_lin" >
|    < tLEER: "leer" >
|    < tENTACAR: "entAcar" >
|    < tCARAENT: "carAent" >
|    < tREF: "ref" > 
|    < tINTEGER: "entero" >
|    < tCHARACTER: "caracter" >
|    < tBOOLEAN: "booleano" >
|    < tSELECTION: "Sel" >
|    < tEND_SELECTION: "Fsel" >
|    < tCASE: "caso" >
|    < tITERATION: "Mq" >
|    < tEND_ITERATION: "FMq" >
|    < tBEGGINING: "Principio" >
|    < tEND: "Fin" >
|    < tTRUE: "verdadero" >
|    < tFALSE: "falso" >
|    < tOTHERWISE: "dlc" >
|    < tABANDONAR: "abandonar" > 
|    < tNADA: "nada" >
    
     // literales
|    < tSTRING: "\"" ( ("\"\"") | ~["\""] )* "\"" >
|    < tCHAR: "'''" | "'" ~[] "'" > 
|    < tCONSTANT: ( <DIGIT> )+ >
    
     // operadores y símbolos
|    < tCOMA: "," >
|    < tSEMICOLON: ";" >
|    < tUNDERSCORE: "_" >
|    < tASSIGN: ":=" >
|    < tOPENING_SQUARE_BRACKET: "[" >
|    < tCLOSING_SQUARE_BRACKET: "]" >
|    < tCOLON: ":" >
|    < tOPENING_PARENTHESIS: "(" >
|    < tCLOSING_PARENTHESIS: ")" >
|    < tPLUS: "+" >
|    < tMINUS: "-" >
|    < tTIMES: "*" >
|    < tDIVIDE: "/" >
|    < tMOD: "mod" >
|    < tAND: "&" >
|    < tOR: "|" >
|    < tNOT: "!" >
|    < tGT: ">" >
|    < tGE: ">=" >
|    < tLT: "<" >
|    < tLE: "<=" >
|    < tEQUAL: "=" >
|    < tNOTEQUAL: "<>" >
|    < tDOT: "." >

|    < tIDENTIFICADOR: ( <LETTER> | "_" ) ( <LETTER> | <DIGIT> | "_" )* >

|    < tOTHER: ~[] >  // tOTHER no es léxicamente válido, el resto de tokens si
}

// deprecado al parecer, https://parsers.org/javacc21/token-hooks-revisited/
TOKEN_MGR_DECLS : {
    public static void CommonTokenAction(Token t) {
        if(false)
            System.out.printf("(%d,%d): %s \"%s\"%n", 
                t.beginLine, t.beginColumn, getTokenName(t.kind), t.image);
    }

    // función épica que devuelve el token (no su lexema)
    private static String getTokenName(int kind) {
        try {
            java.lang.reflect.Field[] fields = gclConstants.class.getDeclaredFields();
            for (java.lang.reflect.Field field : fields) {
                if (field.getType() == int.class 
                        && field.getInt(null) == kind 
                        && field.getName().startsWith("t")) {
                    return field.getName();
                }
            }
            return "UNKNOWN_TOKEN";
        } catch (IllegalAccessException e) {
            return "ERROR: " + e.getMessage();
        }
    }
}

// --- INICIO DE programa.jj ---
void Programa() :
{
    Token identificadorPrograma;
    CodeBlock cprog, cbloque, cprocfun = new CodeBlock();
}
{
    < tPROGRAMA >
    identificadorPrograma = < tIDENTIFICADOR >

    {
        // Basado en diapositiva 16, Tema 6, Lección 11
        cprog = new CodeBlock();
    }

    ( LOOKAHEAD(3) declaracionVariables() )*
    ( cprocfun = declaracion_proc() | cprocfun = declaracion_func() )?
    < tBEGGINING >
    cbloque = BloqueSentencias()

    {
        // Basado en diapositiva 16, Tema 6, Lección 11
        String etiqEnterProgram = CGUtils.newLabel();
        cprog.addInst(OpCode.ENP, etiqEnterProgram); // Instrucción para saltar al programa ~enter program~
        cprog.addBlock(cprocfun);
        cprog.addComment("Comienzo del programa " + identificadorPrograma.image);
        cprog.addLabel(etiqEnterProgram);
        cprog.addBlock(cbloque);
        cprog.addComment("Fin del programa " + identificadorPrograma.image);
        cprog.addInst(OpCode.LVP); // Instrucción para salir del programa ~leave program~
        code.addBlock(cprog);
    }

    < tEND >
}

CodeBlock BloqueSentencias() :
{
    CodeBlock cprocfun = new CodeBlock(), aux;
}
{
    (
        aux = instruccion()   { cprocfun.addBlock(aux); }
    )*
    { return cprocfun; }
}

// --- INICIO DE tipos.jj ---
AtribTipo tipo() :
{
    AtribTipo aT;
}
{
    (
        LOOKAHEAD(2) 
        aT = tipoArray() 
        | aT = tipoEscalar()
    )
    { return aT; }
}

AtribTipo tipoEscalar() :
{}
{
    <tINTEGER>      { return new AtribTipo(Symbol.Types.INT ); }
    | <tCHARACTER>  { return new AtribTipo(Symbol.Types.CHAR); }
    | <tBOOLEAN>    { return new AtribTipo(Symbol.Types.BOOL); }
}

AtribTipo tipoArray() :
{
    Symbol.Types t;
    AtribExp aE;
}
{
    (
        <tCHARACTER> { t = Symbol.Types.CHAR; }
        | <tBOOLEAN> { t = Symbol.Types.BOOL; }
        | <tINTEGER> { t = Symbol.Types.INT; }
    )
    <tOPENING_SQUARE_BRACKET>
    aE = expresionSimple()
    <tCLOSING_SQUARE_BRACKET>
    {
        return new AtribTipo(t, Integer.parseInt(aE.image));
    }
}

// --- INICIO DE variables.jj ---
ArrayList<String> listaIDs() :
{
    Token             token_id;
    ArrayList<String> ids = new ArrayList<String>();
}
{
    token_id = <tIDENTIFICADOR>    { ids.add(token_id.image); }
    (
      <tCOMA>
      token_id = <tIDENTIFICADOR>  { ids.add(token_id.image); }
    )*
    { return ids; }
}

void declaracionVariables() :
{
    AtribTipo         tipo_variables;
    ArrayList<String> ids;
}
{
    tipo_variables = tipo()
    ids            = listaIDs() 
    <tSEMICOLON>
    {
        declararVariablesGenerarCodigo(tipo_variables, ids);
    }
}

CodeBlock asignacionVariable() :
{
    Token token_id;
    AtribExp index_expr = null; 
    AtribExp value_expr;
}
{
    token_id = <tIDENTIFICADOR>
    ( 
      <tOPENING_SQUARE_BRACKET>
      index_expr = expresionSimple()
      <tCLOSING_SQUARE_BRACKET>
    )?
    <tASSIGN>
    value_expr = expresion()
    <tSEMICOLON>
    {
        return asignacionVariableGenerarCodigo(token_id.image, index_expr, value_expr);
    }
}

// --- INICIO DE expresiones.jj ---
/**
 * Orden de prioridad de expansión (cuanto más izquierda, más prioridad).
 * primario - factor - termino - expresionSimple - relacion - expresion
 */

AtribExp primario() :
{
    Token t;
    AtribExp ae;
    Symbol s = null;
    SymbolFunction s_func;
    SymbolArray s_array;
    boolean ok = true;
    AtribExp primarioInfo = null;
}
{
    (
        /** Caso: llamada a entAcar */
        primarioInfo = entAcar() { return primarioInfo; }
    |    
        /** Caso: llamada a carAent */
        primarioInfo = carAent() { return primarioInfo; }
    |
        /** Caso: llamada a función excluyendo procedimientos. */
        LOOKAHEAD(2) // Para distinguirlo de un array o variable.
        t = <tIDENTIFICADOR>
        <tOPENING_PARENTHESIS>
        parametros_llamada_funcion()
        <tCLOSING_PARENTHESIS>
        {
            try {
                s = st.getSymbol(t.image);
            } catch(SymbolNotFoundException e) {
                printError(String.format("Función \"%s\" no encontrada en tabla de símbolos.", t.image));
                return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
            }
            if(typeEqual(Symbol.Types.FUNCTION, s.type, String.format("Tipo incorrecto. Se esperaba FUNCTION pero se encontró %s.", s.type))) {
                // Generación de código basada en diapositiva 45 de Tema 6, lección 11
                SymbolFunction f = (SymbolFunction) s;
                primarioInfo = new AtribExp(f.returnType, null, false, false);
                primarioInfo.code.addInst(PCodeInstruction.OpCode.OSF, f.tam, st.level - s.nivel, (int)f.dir);

                return new AtribExp(((SymbolFunction)s).returnType, null, false, false);

            }
            else return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
        }
    |
        /** Caso: acceso a array */
        LOOKAHEAD(2) // Para distinguirlo del acceso a una variable.
        t = <tIDENTIFICADOR>
        <tOPENING_SQUARE_BRACKET>
        ae = expresion()
        <tCLOSING_SQUARE_BRACKET>
        {
            try {
                s = st.getSymbol(t.image);
            } catch (SymbolNotFoundException e) {
                printError(String.format("Array \"%s\" no encontrada en tabla de símbolos.", t.image));
                return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
            }
            /** El identificador hace referencia a un array */
            ok = typeEqual(Symbol.Types.ARRAY, s.type, String.format("Tipo incorrecto. Se esperaba ARRAY pero se encontró %s.", s.type));
            /** El indice de acceso al array es un entero */
            ok &= typeEqual(Symbol.Types.INT, ae.type, String.format("Tipo incorrecto. Se esperaba que el índice del array fuera un INT pero se encontró %s.", ae.type));
            /** Si el valor de acceso al vector es un entero y es constante, comprobar que es válido */
            s_array = (SymbolArray) s;
            if(ae.isConst && Integer.valueOf(ae.image) > s_array.maxInd) {
                printError(String.format("El índice %s es demasiado grande para el vector %s de tamaño %s.", ae.image, t.image, Integer.toString(s_array.maxInd + 1)));
                ok = false;
            }
            // Generación de código basada en diapositiva 25 de Tema 6, lección 11
            primarioInfo = new AtribExp(s_array.baseType, null, true, false);
            primarioInfo.code.addInst(PCodeInstruction.OpCode.SRF, st.level - s.nivel, s.offset);
            primarioInfo.code.addBlock(ae.code);
            primarioInfo.code.addInst(PCodeInstruction.OpCode.STC, s_array.minInd);
            primarioInfo.code.addInst(PCodeInstruction.OpCode.SBT);
            primarioInfo.code.addInst(PCodeInstruction.OpCode.STC, 1);
            primarioInfo.code.addInst(PCodeInstruction.OpCode.TMS);
            primarioInfo.code.addInst(PCodeInstruction.OpCode.PLUS);
            primarioInfo.code.addInst(PCodeInstruction.OpCode.DRF);

            return ok ? primarioInfo : new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
        }
    |
        /** Caso: acceso a una variable */
        t = <tIDENTIFICADOR>
        {
            try {
                s = st.getSymbol(t.image);
                
                primarioInfo = new AtribExp(s.type, t.image, true, false);
                primarioInfo.code.addInst(PCodeInstruction.OpCode.SRF, st.level - s.nivel, s.offset);
                primarioInfo.code.addInst(PCodeInstruction.OpCode.DRF);
                return primarioInfo;

            } catch (SymbolNotFoundException e) {
                printError(String.format("Identificador \"%s\" no encontrado en tabla de símbolos.", t.image));
                return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
            }
        }
    |
        /** Caso: constante int */
        t = <tCONSTANT>
        { 
            primarioInfo = new AtribExp(Symbol.Types.INT, t.image, false, true); 
            primarioInfo.code.addInst(PCodeInstruction.OpCode.STC, Integer.parseInt(t.image));
            return primarioInfo;
        }
    |
        /** Caso: constante char */
        t = <tCHAR>
        {
            primarioInfo = new AtribExp(Symbol.Types.CHAR, t.image, false, true); 
            primarioInfo.code.addInst(PCodeInstruction.OpCode.STC, (int)t.image.charAt(1));
            return primarioInfo;
            
        }
    |
        /** Caso: constante string. */
        t = <tSTRING>
        {
            String contenido = t.image.substring(1, t.image.length() - 1); // Quitar las comillas
            primarioInfo = new AtribExp(Symbol.Types.STRING, contenido, false, true); 
            for(int i = contenido.length() - 1; i >= 0; i--) {
                char c = contenido.charAt(i);
                primarioInfo.code.addInst(PCodeInstruction.OpCode.STC, (int) c);
            }
            return primarioInfo;
        }
    |
        /** Caso: constante bool con valor true */
        t = <tTRUE>
        {
            primarioInfo = new AtribExp(Symbol.Types.BOOL, "true", false, true);
            primarioInfo.code.addInst(PCodeInstruction.OpCode.STC, 1);
            return primarioInfo;
        }
    |
        /** Caso: constante bool con valor false */
        t = <tFALSE>
        {
            primarioInfo = new AtribExp(Symbol.Types.BOOL, "false", false, true); 
            primarioInfo.code.addInst(PCodeInstruction.OpCode.STC, 0);
            return primarioInfo;
        }
    )
}

AtribExp factor() :
{
    Token op = null;
    boolean ok = true;
    AtribExp factorInfo = new AtribExp(); // Factor final producido si hay que operar con la expresión o primario recibido
    AtribExp expressionInfo = null;       // Expresión o primario recibido
    String val = null;                    // Valor constante si se puede evaluar en tiempo de compilación
}
{
    (op = <tNOT> | op = <tPLUS> | op = <tMINUS>)?
    (
        <tOPENING_PARENTHESIS> expressionInfo = expresion() <tCLOSING_PARENTHESIS>
    |
        expressionInfo = primario()
    )
    {
        /** Devolver exactamente la expresión recibida si no tiene ningún operador delante */
        if (op == null) {
            return expressionInfo;
        }

        /** Mirar si el operando es válido respecto al operador */
        switch(op.image) {
            case "!":
                ok = typeEqual(Symbol.Types.BOOL, expressionInfo.type,
                    String.format("El operador \"%s\" requiere un valor de tipo BOOL, pero se ha proporcionado %s.", op.image, expressionInfo.type));
                break;
            case "+":
            case "-":
                ok = typeEqual(Symbol.Types.INT, expressionInfo.type,
                    String.format("El operador \"%s\" requiere un valor de tipo INT, pero se ha proporcionado %s.", op.image, expressionInfo.type));  
                break;   
            default:
                ok = false;
        }

        /** Si hubo error semántico, se devuelve tipo indefinido */
        if (!ok) {
            factorInfo.type = Symbol.Types.UNDEFINED;
            return factorInfo;
        }

        /** Evaluar la expresión recibida si es constante */
        boolean isConst = expressionInfo.isConst;
        if(isConst) {
            switch(op.image) {
                case "!":
                    val = String.valueOf(!Boolean.parseBoolean(expressionInfo.image));
                    break;
                case "+":
                    val = expressionInfo.image;
                    break;
                case "-":
                    val = String.valueOf(-Integer.parseInt(expressionInfo.image));
                    break;
            }
        }

        /** Generación de código */
        factorInfo.code.addBlock(expressionInfo.code);
        switch(op.image) {
            case "!":
                factorInfo.code.addInst(PCodeInstruction.OpCode.NGB); break;
            case "-":
                factorInfo.code.addInst(PCodeInstruction.OpCode.NGI); break;
            case "+":
                break; // El entero se queda igual
        }

        factorInfo.type = (op.image.equals("!")) ? Symbol.Types.BOOL : Symbol.Types.INT;
        factorInfo.image = val;
        factorInfo.isConst = isConst;
        factorInfo.isVar = true; // Si era referencia, ya no lo es

        return factorInfo;
    }
}

AtribExp termino() :
{
    AtribExp left, right;
    boolean ok = true;
    Token op;
    String val = null;
    boolean isConst = false;
}
{
    left = factor()
    (
        op = operador_multiplicativo()
        right = factor()
        {
            ok &= typeEqual(Symbol.Types.INT, Arrays.asList(left.type, right.type),
                String.format("Los operandos del operador \"%s\" deben ser de tipo INT. Recibido %s de tipo %s.", op.image, right.image, right.type));

            /** Evaluar término si ambos factores constantes */
            isConst = left.isConst && right.isConst;
            if(isConst && ok) {
                int l = Integer.parseInt(left.image), r = Integer.parseInt(right.image);
                switch(op.image.toLowerCase()) {
                    case "*":
                        val = String.valueOf(l * r); break;
                    case "/":
                        val = (r != 0) ? String.valueOf(l / r) : "0"; break;
                    case "mod":
                        val = (r != 0) ? String.valueOf(l % r) : "0"; break;
                }
            }

            /** Generación de código */
            if (!isConst && ok) {
                left.code.addBlock(right.code);
                switch(op.image.toLowerCase()) {
                    case "*":
                        left.code.addInst(PCodeInstruction.OpCode.TMS);
                        break;
                    case "/":
                        left.code.addInst(PCodeInstruction.OpCode.DIV);
                        break;
                    case "mod":
                        left.code.addInst(PCodeInstruction.OpCode.MOD);
                        break;
                }
            }

            if (ok) {
                left = new AtribExp(Symbol.Types.INT, val, false, isConst);
            }
            else {
                left = new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
            }
             
        }
    )*
    { return left; }
}

AtribExp expresionSimple() :
{
    AtribExp left, right;
    boolean ok = true, isConst = false;
    String val = null;
    Token op;
}
{
    left = termino()
    (
        LOOKAHEAD(2) (op = <tPLUS> | op = <tMINUS>)
        right = termino()
        {
            ok = typeEqual(Symbol.Types.INT, Arrays.asList(right.type, left.type),
                String.format("Los operandos del operador \"%s\" deben ser de tipo INT. Recibido %s de tipo %s.", op.image, right.image, right.type));
            
            /** Evaluar expresión simple si ambos factores constantes */
            isConst = left.isConst && right.isConst;
            if (isConst && ok) {
                int l = Integer.parseInt(left.image);
                int r = Integer.parseInt(right.image);
                val = op.image.equals("+") ? String.valueOf(l + r): String.valueOf(l - r);
            }
            
            if (!isConst && ok) {
                left.code.addBlock(right.code);
                switch(op.image.toLowerCase()) {
                    case "+":
                        left.code.addInst(PCodeInstruction.OpCode.PLUS);
                        break;
                    case "-":
                        left.code.addInst(PCodeInstruction.OpCode.SBT);
                        break;
                }
            }

            if(ok) {
                left = new AtribExp(Symbol.Types.INT, val, false, isConst);
            } else {
                left = new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
            }
        }
    )*
    { return left; }
}


AtribExp relacion() :
{
    AtribExp left, right;
    boolean ok = true, isConst = false;
    Token op;
    Boolean result = null;
}
{
    left = expresionSimple()
    (
        op = operador_relacional()
        right = expresionSimple()
        {

            /** Si el operador lo requiere, ambos operandos deben ser del mismo tipo = <> */
            if(op.image.matches("=|<>"))
                ok &= typeEqual(left.type, right.type,
                    String.format("Los operandos del operador \"%s\" deben ser del mismo tipo. Se proporciono %s y %s.", op.image, left.type, right.type));

            /** Si el operador lo requiere, ambos operandos deben ser del tipo INT  */
            if(op.image.matches("<|<=|>|>="))
                ok &= typeEqual(Symbol.Types.INT, Arrays.asList(left.type, right.type),
                    String.format("Los operandos del operador \"%s\" deben ser de tipo INT. Se proporciono %s y %s.", op.image, left.type, right.type));
            
            /** Evaluar la relación si las dos expresiones simples son constantes */
            isConst = left.isConst && right.isConst;
            if (ok && isConst) {                
                switch (left.type) {
                    case INT:
                        int l = Integer.parseInt(left.image);
                        int r = Integer.parseInt(right.image);
                        switch (op.image) {
                            case "=":   result = (l == r);  break;
                            case "<>":  result = (l != r);  break;
                            case "<":   result = (l < r);   break;
                            case "<=":  result = (l <= r);  break;
                            case ">":   result = (l > r);   break;
                            case ">=":  result = (l >= r);  break;
                        }
                        break; 
                    case BOOL:
                        boolean bl = Boolean.parseBoolean(left.image);
                        boolean br = Boolean.parseBoolean(right.image);
                        result = op.image.equals("=") ? (bl == br) : (bl != br);
                        break;
                }
            }
            // Generación de código
            if(ok && !isConst) {
                left.code.addBlock(right.code);
                switch(op.image) {
                    case "=":   left.code.addInst(PCodeInstruction.OpCode.EQ);  break;
                    case "<>":  left.code.addInst(PCodeInstruction.OpCode.NEQ); break;
                    case "<":   left.code.addInst(PCodeInstruction.OpCode.LT);  break;
                    case "<=":  left.code.addInst(PCodeInstruction.OpCode.LTE); break;
                    case ">":   left.code.addInst(PCodeInstruction.OpCode.GT);  break;
                    case ">=":  left.code.addInst(PCodeInstruction.OpCode.GTE); break;
                }
            }

            if(ok)
                left = new AtribExp(Symbol.Types.BOOL, String.valueOf(result), false, isConst);
            else
                left = new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
        }
    )?
    { 
        return left;
    }
}

AtribExp expresion() :
{
    AtribExp left, right;
    boolean ok = true, isConst = false;
    Token op;
    String val = null;
}
{
    left = relacion()
    (
        (op = <tAND> | op = <tOR>)
        right = relacion()
        {
            /** ambos operandos deber ser del mismo tipo */
            ok = typeEqual(left.type, right.type,
                String.format("Los operandos para el operador \"%s\" deben de ser del mismo tipo. %s != %s.", op.image, left.type, right.type));

            /** los operadores & y | requieren operandos del tipo BOOL */
            ok &= typeEqual(Symbol.Types.BOOL, Arrays.asList(left.type, right.type),
                String.format("Los operandos para el operador \"%s\" deben ser de tipo BOOL. Recibido %s %s.", op.image, left.type, right.type));
                        
            /** Evaluar la expresion si las 2 relaciones son constantes.*/
            isConst = left.isConst && right.isConst;
            if (isConst && ok) {
                boolean l = Boolean.parseBoolean(left.image);
                boolean r = Boolean.parseBoolean(right.image);
                
                val = op.image.equals("&") ? String.valueOf(l && r) : String.valueOf(l || r);
            }

            if(ok && !isConst) {
                left.code.addBlock(right.code);
                if (op.image.equals("&")) {
                    left.code.addInst(PCodeInstruction.OpCode.AND);
                } else {
                    left.code.addInst(PCodeInstruction.OpCode.OR);
                }
            }

            if(ok)
                left = new AtribExp(Symbol.Types.BOOL, val, false, isConst);
            else
                left = new AtribExp(Symbol.Types.UNDEFINED, null, false, false);       
        }
    )*
    {
        return left; 
    }
}


void lista_una_o_mas_exps() :
{}
{
    ( expresion() )+
}

Token operador_multiplicativo() :
{
    Token t;
}
{
    t = <tTIMES>    { return t; }
  | t = <tDIVIDE>   { return t; }
  | t = <tMOD>      { return t; }
}

Token operador_relacional() :
{
    Token t;
}
{
    t = <tEQUAL>    { return t; }
  | t = <tNOTEQUAL> { return t; }
  | t = <tLT>       { return t; }
  | t = <tLE>       { return t; }
  | t = <tGT>       { return t; }
  | t = <tGE>       { return t; }
}

// --- INICIO DE funciones.jj ---
CodeBlock declaracion_proc() :
{
    Token t;
    ArrayList<Symbol> parametros = new ArrayList<Symbol>();
    CodeBlock headerPartCode; // Recibirá el CodeBlock con solo la etiqueta
    CodeBlock cuerpo = new CodeBlock();     // Para el código de las instrucciones del cuerpo
    CodeBlock footerPartCode; // Recibirá el CodeBlock con solo el CSF
    CodeBlock finalProcedureCode = new CodeBlock(); // Para combinar todas las partes
}
{
    // --- 1. Parsear la Cabecera y llamar a la función de Setup ---
    t = <tIDENTIFICADOR>
    <tOPENING_PARENTHESIS>
    ( parametros = parametros_declaraciones() )? // Asume que esta regla parsea y retorna la lista
    <tCLOSING_PARENTHESIS>

    // Bloque de Acción Semántica 1: Llamar a la función de setup.
    // Esta función crea el símbolo, el ámbito e inserta los símbolos de parámetro con offsets.
    // Devuelve un CodeBlock que contiene SOLAMENTE la etiqueta de entrada.
    {
        headerPartCode = setupProcedure(t, parametros);
        // Añadir el CodeBlock de cabecera (que ahora solo contiene la etiqueta) al bloque final
        finalProcedureCode.addBlock(headerPartCode);
    }

    // Parsear Declaraciones Locales y Procedimientos/Funciones Anidados
    // Estas declaraciones ocurrirán DENTRO del ámbito creado por setupProcedure y usarán ese ámbito.
    ( LOOKAHEAD(3) declaracionVariables() )* // Asume esta regla parsea variables locales
    ( declaracion_proc() | declaracion_func() )* // Llamadas recursivas para anidados

    // --- 2. Parsear el Cuerpo del Procedimiento ---
    <tBEGGINING>
    {
         // Asegurarse de que 'cuerpo' esté inicializado antes del bucle de instrucciones
         cuerpo = new CodeBlock();
    }
    ( // Bucle para parsear cero o más instrucciones en el cuerpo
        {
            CodeBlock instruccionBlock; // Bloque temporal para el código generado por una instrucción
        }
        instruccionBlock = instruccion() // Asume que esta regla parsea una instrucción y retorna su CodeBlock
        {
            // Añadir el código generado por la instrucción al bloque del cuerpo
            cuerpo.addBlock(instruccionBlock);
        }
    )*
    <tEND>

    // Después de parsear el cuerpo, añadir el CodeBlock 'cuerpo' al CodeBlock final del procedimiento.
    {
        finalProcedureCode.addBlock(cuerpo);
    }

    // --- 3. Llamar a la función de Cleanup y Finalizar ---
    // Bloque de Acción Semántica 2: Llamar a la función de cleanup.
    // Esta función generará CSF y eliminará el ámbito.
    {
        footerPartCode = cleanupProcedure();
        // Añadir el CodeBlock de pie de página (que solo contiene el CSF) al bloque final
        finalProcedureCode.addBlock(footerPartCode);
    }

    // El resultado de la regla es el CodeBlock completo del procedimiento.
    {
        return finalProcedureCode;
    }
}

CodeBlock declaracion_func() :
{ 

    Token t;
    AtribTipo aT;
    ArrayList<Symbol> parametros = new ArrayList<Symbol>();
}
{
    aT = tipoEscalar()
    t = <tIDENTIFICADOR>
    < tOPENING_PARENTHESIS >
    ( parametros = parametros_declaraciones() )?
    < tCLOSING_PARENTHESIS >
    {
        insertFunction(t, aT, parametros);
    }
    ( LOOKAHEAD(3) declaracionVariables() )*
    ( declaracion_proc() | declaracion_func() )*
    < tBEGGINING >
    ( instruccion() )*
    < tEND >
    {
        st.removeBlock();
        return null;
    }
}

CodeBlock llamar_funcion() :
{ 
    ArrayList<AtribExp> lPar = new ArrayList<AtribExp>();
    Symbol fun;
    Token t;
    CodeBlock c = new CodeBlock();
}
{
    t = < tIDENTIFICADOR >
    < tOPENING_PARENTHESIS >
    lPar = parametros_llamada_funcion()
    {
        checkParameters(t, lPar);
    }
    < tCLOSING_PARENTHESIS >
    < tSEMICOLON >

    {
        // Generación de código
        try {
            fun = st.getSymbol(t.image);
        } catch (SymbolNotFoundException e) {
            printError(String.format("Función \"%s\" no encontrada en la tabla de símbolos.", t.image));
            return new CodeBlock();
        }
        // añadir código de los parámetros
        for(AtribExp ae : lPar) {
            c.addBlock(ae.code);
        }
        // abrir stack frame
        c.addOSFInst(lPar.size(), st.level - fun.nivel, t.image);
            
        // si es una función (no procedimiento)
        if(fun instanceof SymbolFunction) {
            c.addInst(PCodeInstruction.OpCode.DRF);
        }

        return c;
    }
}

ArrayList<AtribExp> parametros_llamada_funcion() :
{ 
    ArrayList<AtribExp> lpar = new ArrayList<AtribExp>();
    AtribExp ae = null;    
}
{
    (  ae = expresion() )?
    {
        if(ae != null)
            lpar.add(ae);
    }
    (
        <tCOMA> ae = expresion()
        {
            if(ae != null)
                lpar.add(ae);
        }
    )*
    { return lpar; }
}

ArrayList<Symbol> parametros_declaraciones() :
{   
    AtribTipo aT;
    ArrayList<String> lVars;
    boolean isRef = false;
    ArrayList<Symbol> allSymbols = new ArrayList<Symbol>();
}
{
    aT = tipo()
    ( <tREF> { isRef = true; } )?
    lVars = listaIDs()
    {
        for (String id : lVars) {
            Symbol sV = null;
            if(aT.isArray) {
                sV = new SymbolArray(
                    id, 0, aT.size-1, aT.type, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
            } else {
                switch(aT.type) {
                    case INT:
                        sV = new SymbolInt(
                            id, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                        break;
                    case BOOL:
                        sV = new SymbolBool(
                            id, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                        break;
                    case CHAR:
                        sV = new SymbolChar(
                            id, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                        break;
                    default:
                        printError("Tipo no válido.");
                        break;
                }
            }
            allSymbols.add(sV);
        }
        isRef = false;
    }
    (
        <tSEMICOLON>
        aT = tipo()
        ( <tREF> { isRef = true; } )? 
        lVars = listaIDs()
        {
        for (String id : lVars) {
                Symbol sV = null;
                if(aT.isArray) {
                    sV = new SymbolArray(
                        id, 0, aT.size-1, aT.type, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                } else {
                    switch(aT.type) {
                        case INT:
                            sV = new SymbolInt(
                                id, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                            break;
                        case BOOL:
                            sV = new SymbolBool(
                                id, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                            break;
                        case CHAR:
                            sV = new SymbolChar(
                                id, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                            break;
                        default:
                            System.out.println("Tipo no válido.");
                            break;
                    }
                }
                allSymbols.add(sV);
            }
        }
    )*
    { return allSymbols; }
}

// --- INICIO DE instrucciones.jj ---
CodeBlock instruccion() :
{
    CodeBlock c = new CodeBlock();
}
{
    (
    c =  escribir_linea() <tSEMICOLON>
    | c = escribir() <tSEMICOLON>
    | c = leer_linea() <tSEMICOLON>
    | c = leer() <tSEMICOLON>
    | entAcar() <tSEMICOLON> // no sirven de nada, si se llaman solas
    | carAent() <tSEMICOLON> // no sirven de nada, si se llaman solas
    | LOOKAHEAD(2) c = llamar_funcion()
    | LOOKAHEAD(2) c = asignacionVariable()
    | c = seleccion()
    | c = bucle()
    | LOOKAHEAD(2) ( declaracion_proc() | declaracion_func() )
    | <tABANDONAR> <tSEMICOLON>
    {
        code.addInst(OpCode.LVP, 0);
    }
    | <tNADA> <tSEMICOLON>
    {
        code.addInst(OpCode.NOP, 0);
    }
    )
    
    { return c; }
}

CodeBlock bucle() :
{
    AtribExp condicion;
    CodeBlock cuerpo = new CodeBlock();
    CodeBlock b = new CodeBlock();  // Bloque final para el bucle generado
    CodeBlock c;                    // Bloque temporal para cada instrucción
}
{
    <tITERATION>
    condicion = expresion()

    ( c = instruccion() { cuerpo.addBlock(c); } )*
    <tEND_ITERATION>
    {
        b = bucleGenerarCodigo(condicion, cuerpo);
    }
    { return b; }
}


CodeBlock seleccion() :
{
    java.util.List<AtribExp> condiciones = new java.util.ArrayList<AtribExp>();
    java.util.List<CodeBlock> cuerpos = new java.util.ArrayList<CodeBlock>();
    CodeBlock auxiliar; // Almacena temporalmente el cuerpo asociado a cada condición del select
    CodeBlock otherwise = null;
    AtribExp condicion;
    CodeBlock c;                   // Bloque temporal para cada instrucción
    CodeBlock s = new CodeBlock(); // Bloque final para el bucle generado
}
{
    <tSELECTION>
    (
        <tCASE> { auxiliar = new CodeBlock(); }
        condicion = expresion()
        <tCOLON>
        ( c = instruccion() { auxiliar.addBlock(c); } )*
        {
            condiciones.add(condicion);
            cuerpos.add(auxiliar);
        }
    )+
    [
        <tOTHERWISE> <tCOLON>
        { auxiliar = new CodeBlock(); }
        ( c = instruccion() { auxiliar.addBlock(c); } )*
        {
            otherwise = auxiliar;
        }
    ]
    <tEND_SELECTION>
    {
        s = seleccionGenerarCodigo(condiciones, cuerpos, otherwise);
    }
    { return s; }
}

// --- INICIO DE especiales.jj ---
CodeBlock escribir_linea() :
{
    ArrayList<AtribExp> args = new ArrayList<AtribExp>();
    CodeBlock c = new CodeBlock();
}
{
    <tESCRIBIR_LIN>
    <tOPENING_PARENTHESIS>
    (args = escribir_params())?
    <tCLOSING_PARENTHESIS>
    {
        c.addComment("Comienzo escribir línea");
        for (AtribExp a : args) {
            c.addBlock(a.code);
            if(a.type == Symbol.Types.STRING) {
                String str = a.image;
                for(char caract : str.toCharArray()) {
                    c.addInst(OpCode.WRT, 0);
                }
            }
            else if(a.type == Symbol.Types.CHAR) {
                c.addInst(OpCode.WRT, 0);
            }
            else if(a.type == Symbol.Types.INT) {
                c.addInst(OpCode.WRT, 1);
            }
        }
        // Salto de línea
        c.addInst(OpCode.STC, (int)'\n');
        c.addInst(OpCode.WRT, 0);
        c.addComment("Fin escribir línea");
        return c;
    }
}

CodeBlock escribir() :
{
    ArrayList<AtribExp> args = new ArrayList<AtribExp>();
    CodeBlock c = new CodeBlock();
}
{
    <tESCRIBIR>
    <tOPENING_PARENTHESIS>
    args = escribir_params()
    <tCLOSING_PARENTHESIS>
    {
        c.addComment("Comienzo escribir");
        for (AtribExp a : args) {
            c.addBlock(a.code);
            if(a.type == Symbol.Types.STRING) {
                String str = a.image;
                for(char caract : str.toCharArray()) {
                    c.addInst(OpCode.WRT, 0);
                }
            }
            else if(a.type == Symbol.Types.CHAR) {
                c.addInst(OpCode.WRT, 0);
            }
            else if(a.type == Symbol.Types.INT) {
                c.addInst(OpCode.WRT, 1);
            }
        }
        c.addComment("Fin escribir");
        return c;
    }
}

ArrayList<AtribExp> escribir_params() :
{
    ArrayList<AtribExp> args = new ArrayList<AtribExp>();
    AtribExp a;
}
{
    (a = expresion()
    {
        typeNotEqual(Arrays.asList(Symbol.Types.ARRAY, Symbol.Types.PROCEDURE, Symbol.Types.UNDEFINED),
            a.type, String.format("No se puede escribir tipo de dato \"%s\"", a.type));
        args.add(a);
    }
    (
        <tCOMA> (a = expresion())
        {
            typeNotEqual(Arrays.asList(Symbol.Types.ARRAY, Symbol.Types.PROCEDURE, Symbol.Types.UNDEFINED),
            a.type, String.format("No se puede escribir tipo de dato \"%s\"", a.type));
            args.add(a);
        }
    )*)
    { return args; }
}

CodeBlock leer_linea() :
{
    ArrayList<String> lVars = new ArrayList<String>();
    CodeBlock c = new CodeBlock();
}
{
    <tLEER_LIN>
    <tOPENING_PARENTHESIS>
    (
        (lVars = listaIDs())
        {
            typeNotEqual(Arrays.asList(Symbol.Types.ARRAY, Symbol.Types.PROCEDURE, Symbol.Types.UNDEFINED, Symbol.Types.PROCEDURE), lVars);
            for (String id : lVars) {
                try {
                    Symbol s = st.getSymbol(id);
                    c.addComment("Comienzo leer");
                    c.addInst(OpCode.SRF, st.level - s.nivel, s.offset);
                    int tipo = (s.type == Symbol.Types.CHAR) ? 0 : 1;
                    c.addInst(OpCode.RD, tipo);
                    c.addComment("Fin leer");
                } catch (SymbolNotFoundException e) {
                    printError("Variable \"" + id + "\" no encontrada.");
                }
            }
        }
    )?
    <tCLOSING_PARENTHESIS>

    { return c; }
}

CodeBlock leer() :
{
    ArrayList<String> lVars = new ArrayList<String>();
    CodeBlock c = new CodeBlock();
}
{
    <tLEER> 
    <tOPENING_PARENTHESIS>
    lVars = listaIDs()
    {
        typeNotEqual(Arrays.asList(Symbol.Types.ARRAY, Symbol.Types.PROCEDURE, Symbol.Types.UNDEFINED, Symbol.Types.PROCEDURE), lVars);
        for(String id : lVars) {
            try {
                Symbol s = st.getSymbol(id);
                c.addComment("Comienzo leer línea");
                c.addInst(OpCode.SRF, st.level - s.nivel, s.offset);
                int tipo = (s.type == Symbol.Types.CHAR) ? 0 : 1;
                c.addInst(OpCode.RD, tipo);
                c.addComment("Fin leer línea");
            } catch (SymbolNotFoundException e) {
                printError("Variable \"" + id + "\" no encontrada.");
            }
        }
    }
    <tCLOSING_PARENTHESIS> 
    { return c; }
}

AtribExp entAcar() :
{
    AtribExp i;
}
{
    < tENTACAR >
    <tOPENING_PARENTHESIS>
    i = expresionSimple()
    <tCLOSING_PARENTHESIS>

    {
        if(!typeEqual(Symbol.Types.INT, i.type, String.format("Tipo incorrecto. Se esperaba INT pero se encontró %s.", i.type))) {
            return new AtribExp(Symbol.Types.UNDEFINED, null, false, false); 
        }
        // No hace falta transformarlo porque CHAR e INT son ambos 32 bits en máquina P
        AtribExp resultado = new AtribExp(Symbol.Types.CHAR, null, false, false);
        resultado.code.addBlock(i.code);
        return resultado;
    }
}

AtribExp carAent() :
{
    AtribExp c;
}
{
    < tCARAENT >
    < tOPENING_PARENTHESIS>
    c = primario()
    <tCLOSING_PARENTHESIS>

    {
        if(!typeEqual(Symbol.Types.CHAR, c.type, String.format("Tipo incorrecto. Se esperaba CHAR pero se encontró %s.", c.type))) {
            return new AtribExp(Symbol.Types.UNDEFINED, null, false, false);
        }
        // No hace falta transformarlo porque CHAR e INT son ambos 32 bits en máquina P
        AtribExp resultado = new AtribExp(Symbol.Types.INT, null, false, false);
        resultado.code.addBlock(c.code);
        return resultado;
    }
}

