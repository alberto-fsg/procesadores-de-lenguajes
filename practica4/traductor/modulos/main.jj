//*****************************************************************
// File:   gcl.jj
// Author: Procesadores de Lenguajes-University of Zaragoza
// Date:   enero 25
// Coms:   compilar mediante "ant"
//*****************************************************************

///////////////////////////////////////////////////////////////////////////////
// 1. ANALIZADOR LÉXICO
///////////////////////////////////////////////////////////////////////////////

options {
    IGNORE_CASE = true;
    COMMON_TOKEN_ACTION = true;
}

PARSER_BEGIN(gcl)

package traductor;

import lib.symbolTable.*;
import lib.symbolTable.exceptions.*;
import lib.tools.codeGeneration.*;
import lib.tools.codeGeneration.PCodeInstruction.OpCode;

import java.util.*;

public class gcl {
    // tabla de símbolos
    static SymbolTable st;

    // código generado
    static CodeBlock code = new CodeBlock();
    static Map<String,Integer> varOffset = new HashMap<String,Integer>();
    
   public static void main(String[] args) {
	   gcl parser = null;
	   
	   try {
           st = new SymbolTable();

		   if(args.length == 0) {
			   parser = new gcl(System.in);
		   }
		   else {
			   parser = new gcl(new java.io.FileInputStream(args[0]));
		   }
		   //Programa es el símbolo inicial de la gramática
		   parser.Programa();

		   System.out.println("***** Análisis terminado con éxito *****");

           System.out.println(code.toString());

           System.out.println("***** P-Code generado *****");
	   }
	   catch (java.io.FileNotFoundException e) {
		   System.out.println ("Fichero " + args[0] + " no encontrado.");
	   }
	   catch (TokenMgrError e) {
		   System.out.println("LEX_ERROR: " + e.getMessage());
	   }
	   catch (Exception e) {
			System.out.println("Ha ocurrido una excepción: " + e.getMessage());
	   }
	}

    // inserta todos los símbolos de "lVars" de tipo "aT" y los marca como ref si "isRef",
    // auxiliar para "parametros_declaraciones" (los parámetros de la declaración de una función/procedimiento)
    private static void insertSymbols(AtribTipo aT, boolean isRef, ArrayList<String> lVars) {
        for (String id : lVars) {
            try {
                Symbol sV = null;
                if (aT.isArray) {
                    sV = new SymbolArray(id, 0, aT.size-1, aT.type);
                } else {
                    switch(aT.type) {
                        case INT:
                            sV = new SymbolInt(id); break;
                        case BOOL:
                            sV = new SymbolBool(id); break;
                        case CHAR:
                            sV = new SymbolChar(id); break;
                        default:
                            System.out.println("Error: tipo no definido para variable \"" + id + "\".");
                    }
                }
                if (sV != null) {
                    sV.parClass = isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL;
                    st.insertSymbol(sV);
                    System.out.println("[TABLA DE SÍMBOLOS] Insertado " + sV.toString());
                }
            } catch (AlreadyDefinedSymbolException e) {
                System.out.println("Error: Identificador ya existe: \"" + id + "\"");
            }
        }
    }

    private static boolean typeNotEqual(Symbol.Types esperado, Symbol.Types real, String error) {
        if(esperado == real) {
            if(error != null) printError(error);
            return false;
        }
        return true;
    }

    private static boolean typeEqual(Symbol.Types esperado, Symbol.Types real, String error) {
        if(esperado != real) {
            if(error != null) printError(error);
            return false;
        }
        return true;
    }

    private static boolean typeNotEqual(List<Symbol.Types> esperado, Symbol.Types real, String error) {
        if(!esperado.isEmpty()) {
            for(Symbol.Types t : esperado) {
                if(t == real) {
                    if(error != null) printError(error);
                    return false;
                }
            }
        }
        return true;
    }

    private static boolean typeEqual(Symbol.Types esperado, List<Symbol.Types> real, String error) {
        if(!real.isEmpty()) {
            for(Symbol.Types t : real) {
                if(esperado != t) {
                    if(error != null) printError(error);
                    return false;
                }
            }
        }
        return true;
    }

    private static boolean typeNotEqual(List<Symbol.Types> esperado, ArrayList<String> real) {
        boolean ok = true;
        Symbol s;
        for(String i : real) {
            try {
                s = st.getSymbol(i);
                ok = ok && typeNotEqual(esperado, s.type, String.format("leer_lin o leer incompatible con tipo de dato \"%s\"", s.type));
            } catch(SymbolNotFoundException e) {
                printError(String.format("Variable \"%s\" no encontrada en tabla de símbolos.", i));
            }
        }
        return ok;
    }

    private static void insertProcedure(Token identificador, ArrayList<Symbol> parametros) {
        SymbolProcedure sProc = new SymbolProcedure(identificador.image, parametros);
        try {
            st.insertSymbol(sProc);
            insertParameters(parametros);
        } catch(AlreadyDefinedSymbolException e) {
            printError(String.format("Ya definido valor de identificador \"%s\".", identificador.image));
        }
    }

    private static void insertFunction(Token identificador, AtribTipo returnType, ArrayList<Symbol> parametros) {
        if(returnType.type != Symbol.Types.INT && returnType.type != Symbol.Types.BOOL && returnType.type != Symbol.Types.CHAR) {
            printError(String.format("Una función solo puede devolver valores de tipo INT, BOOL o CHAR. Tipo dado: %s.", returnType.type));
        } else {
            SymbolFunction sFunc = new SymbolFunction(identificador.image, parametros, returnType.type);
            try {
                st.insertSymbol(sFunc);
                insertParameters(parametros);
            } catch(AlreadyDefinedSymbolException e) {
                printError(String.format("Ya definido valor de identificador \"%s\".", identificador.image));
            }
        }
    }

    private static void insertParameters(ArrayList<Symbol> parametros) {
        st.insertBlock();
        for(Symbol param : parametros) {
            try {
                st.insertSymbol(param);
                printMessage("Tabla de símbolos",
                    String.format("\"%s\" insertado en nivel %d.", param.name, st.level));
            } catch(AlreadyDefinedSymbolException e) {
                printError(String.format("Ya definida variable de identificador \"%s\".", param.name));
            }
        }
    }

    private static void checkParameters(Token identificador, ArrayList<AtribExp> parametros) {
        try {
            Symbol funOproc = st.getSymbol(identificador.image);
            ArrayList<Symbol> params;
            if(funOproc.type == Symbol.Types.FUNCTION || funOproc.type == Symbol.Types.PROCEDURE) {
                if(funOproc.type == Symbol.Types.FUNCTION)
                    params = ((SymbolFunction)funOproc).parList;
                else
                    params = ((SymbolProcedure)funOproc).parList;
            } else {
                printError(String.format("\"%s\" no es una función o procedimiento.", identificador.image));
                return;
            }
            // Comprobar que el número de parámetros es el adecuado
            if(params.size() != parametros.size()) {
                printError(String.format("\"%s\" esperaba %d parámetros. Recibidos %d parámetros.",
                    identificador.image, params.size(), parametros.size()));
                return;
            }
            // Comprobar validez parámetro a parámetro
            for(int i = 0; i < params.size(); ++i) {
                // Comprobar que parámetro pasado es del tipo correcto
                if(params.get(i).type != parametros.get(i).type) {
                    printError(String.format("Parámetro no compatible con valor dado. Tipo esperado: %s. Tipo recibido: %s.",
                        params.get(i).type, parametros.get(i).type));
                }
                // Comprobar que parámetro pasado es una variable si se requiere paso por referencia
                if(params.get(i).parClass == Symbol.ParameterClass.REF && !parametros.get(i).isVar) {
                    printError("Parámetro por referencia. Espera variable, recibido constante.");
                }
            }
        } catch(SymbolNotFoundException e) {
            printError(String.format("\"%s\" no es una función o procedimiento.", identificador.image));
        }
    }

    private static void printError(String error) {
        String crojo = "\u001B[31m";
        String reset = "\u001B[0m";
        System.err.printf("%sError: (%d, %d):%s %s\n", crojo, 
            token.beginLine, token.beginColumn, reset, error);
    }

    private static void printMessage(String label, String message) {
        String verde = "\u001B[32m";
        String reset = "\u001B[0m";
        System.out.printf("%s%s:%s %s\n", verde, label, reset, message);
    }

    /**
     * Declara variables en la tabla de símbolos y asigna espacio en memoria.
     * 
     * @param tipoVar Tipo de las variables a declarar
     * @param ids Lista de identificadores de variables
     * @throws AlreadyDefinedSymbolException Si algún identificador ya existe
     */
    private static void declararVariablesGeneradorCodigo(AtribTipo tipoVar, List<String> ids) {
        for (String nombre : ids) {
            try {
                Symbol simbolo = crearSimboloVariable(nombre, tipoVar);
                st.insertSymbol(simbolo);

                // Reservar espacio en memoria, offset indica en qué posición del stack frame está la variable
                int offset = CGUtils.memorySpaces[st.level]++;
                varOffset.put(nombre, offset);
                
                printMessage("Tabla de símbolos", 
                    String.format("\"%s\" insertado en nivel %d (offset %d).", 
                    nombre, st.level, offset));
                    
            } catch (AlreadyDefinedSymbolException e) {
                printError(String.format("Ya existe \"%s\".", nombre));
            }
        }
    }

    /**
     * Crea un símbolo de variable según su tipo (entero, booleano, carácter o array).
     * 
     * @param nombre Nombre de la variable
     * @param tipo_variable Tipo y dimensiones de la variable
     * @return Símbolo creado o null si el tipo no es válido o el nombre es null
     */
    private static Symbol crearSimboloVariable(String nombre, AtribTipo tipo_variable) {
        if (nombre == null) {
            return null;
        }
        
        if (tipo_variable.isArray) {
            return new SymbolArray(nombre, 0, tipo_variable.size-1, tipo_variable.type);
        }
        
        switch (tipo_variable.type) {
            case INT:  return new SymbolInt(nombre);
            case BOOL: return new SymbolBool(nombre);
            case CHAR: return new SymbolChar(nombre);
            default:
                printError("Tipo no válido para \"" + nombre + "\"");
                return null;
        }
    }

    /**
     * Genera asignación de variable normal o de un componente de un array en P-Code
     * 
     * @param nombre_variable Nombre de la variable/array a asignar
     * @param expresion_indice Expresión con el índice del componente si es una variable array (null en caso contrario)
     * @param expresion_valor Expresión con el valor a asignar
     */
    private static void asignacionVariableGeneradorCodigo(
        String nombre_variable, 
        AtribExp expresion_indice, 
        AtribExp expresion_valor
    ) {
        try {
            // Validación de que la variable tiene asociado un trozo de memoria
            Symbol simbolo_var = st.getSymbol(nombre_variable);
            Integer offset = varOffset.get(nombre_variable);
            if (offset == null) {
                printError(String.format("Variable \"%s\" no declarada (sin offset).", nombre_variable));
                return;
            }
    
            // Calculo de dirección de destino
            int offset_var = offset.intValue();
            int nivel_anidamiento = st.level;
            if (expresion_indice != null) {
                // Caso array: base + índice
                code.addBlock(expresion_indice.code);
                code.addInst(PCodeInstruction.OpCode.SRF, offset_var, nivel_anidamiento);
                code.addInst(PCodeInstruction.OpCode.PLUS);
            } else {
                // Caso variable simple
                code.addInst(PCodeInstruction.OpCode.SRF, offset_var, nivel_anidamiento);
            }

            // Generación del valor
            code.addBlock(expresion_valor.code);

            // Almacenamiento
            code.addInst(PCodeInstruction.OpCode.ASG);

        } catch (SymbolNotFoundException e) {
            printError(String.format("Variable \"%s\" no encontrada.", nombre_variable));
        }
    }


    /** Genera bucle con inversión en P-Code
     * 
     * @param condicion bloque con el código para evaluar la condición del bucle
     * @param cuerpo bloque con las instrucciones que forman el cuerpo del bucle
     */
    private static void generarBucle(AtribExp condicion, CodeBlock cuerpo) {
        String etiquetaInicio = CGUtils.newLabel();
        String etiquetaPrueba = CGUtils.newLabel();
        String etiquetaFinal  = CGUtils.newLabel();

        // Salto inicial a la prueba invertida
        code.addInst(OpCode.JMP, etiquetaPrueba);

        // Cuerpo
        code.addLabel(etiquetaInicio);
        code.addBlock(cuerpo);

        // Prueba invertida
        code.addLabel(etiquetaPrueba);
        code.addBlock(condicion.code);
        code.addInst(OpCode.JMF, etiquetaFinal);
        code.addInst(OpCode.JMP, etiquetaInicio);
        code.addLabel(etiquetaFinal);
    }

    /** Genera bloque switch en P-Code
     * 
    * @param condiciones Lista de expresiones booleanas que determinan cada caso
    * @param cuerpos     Lista de bloques de código a ejecutar para cada caso correspondiente
    * @param otherwise   Bloque de código opcional que se ejecuta cuando ningún caso coincide (puede ser null)
     */
    private static void generarSeleccion(
        java.util.List<AtribExp> condiciones,
        java.util.List<CodeBlock> cuerpos,
        CodeBlock otherwise
    ) {
        String etiqueta_final = CGUtils.newLabel();
        java.util.List<String> etiquetas_salto = new java.util.ArrayList<String>();

        // Asociar una etiqueta a cada condición
        for (int i = 0; i < condiciones.size(); i++) {
            etiquetas_salto.add(CGUtils.newLabel());
        }

        // Generar código para cada condición
        for (int i = 0; i < condiciones.size(); i++) {
            // Evaluar la i-ésima condición
            code.addBlock(condiciones.get(i).code);
            
            // Caso falso: continuar con la siguiente condición
            code.addInst(OpCode.JMF, etiquetas_salto.get(i));
            
            // Caso verdadero: ejecutar el bloque y saltar al final del switch
            code.addBlock(cuerpos.get(i));
            code.addInst(OpCode.JMP, etiqueta_final);

            // Etiqueta para continuar con la siguiente condición si el caso es falso
            code.addLabel(etiquetas_salto.get(i));
        }

        // Manejar el bloque por defecto (si existe)
        if (otherwise != null) {
            code.addBlock(otherwise);
        }

        // Etiqueta a la que se salta si alguna condición es verdadera
        code.addLabel(etiqueta_final);
    }
}

PARSER_END(gcl)

///////////////////////////////////////////////////////////////////////////////
// 2. ANALIZADOR SINTÁCTICO
///////////////////////////////////////////////////////////////////////////////
