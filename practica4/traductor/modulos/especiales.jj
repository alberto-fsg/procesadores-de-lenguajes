void escribir_linea() :
{}
{
    <tESCRIBIR_LIN>
    <tOPENING_PARENTHESIS>
    (escribir_params())?
    <tCLOSING_PARENTHESIS>
}

void escribir() :
{}
{
    <tESCRIBIR>
    <tOPENING_PARENTHESIS>
    (escribir_params())
    <tCLOSING_PARENTHESIS>
}

void escribir_params() :
{
    AtribExp a;
}
{
    (a = expresion())
    {
        typeNotEqual(Arrays.asList(Symbol.Types.ARRAY, Symbol.Types.PROCEDURE, Symbol.Types.UNDEFINED),
            a.type, String.format("No se puede escribir tipo de dato \"%s\"", a.type));
    }
    (
        <tCOMA> (a = expresion())
        {
            typeNotEqual(Arrays.asList(Symbol.Types.ARRAY, Symbol.Types.PROCEDURE, Symbol.Types.UNDEFINED),
            a.type, String.format("No se puede escribir tipo de dato \"%s\"", a.type));
        }
    )*
}

void leer_linea() :
{
     ArrayList<String> lVars = new ArrayList<String>();
}
{
    <tLEER_LIN>
    <tOPENING_PARENTHESIS>
    (
        (lVars = listaIDs())
        {
            typeNotEqual(Arrays.asList(Symbol.Types.ARRAY, Symbol.Types.PROCEDURE, Symbol.Types.UNDEFINED, Symbol.Types.PROCEDURE), lVars);
        }
    )?
    <tCLOSING_PARENTHESIS>
}

void leer() :
{
     ArrayList<String> lVars = new ArrayList<String>();
}
{
    <tLEER> 
    <tOPENING_PARENTHESIS>
    (lVars = listaIDs())
    {
            typeNotEqual(Arrays.asList(Symbol.Types.ARRAY, Symbol.Types.PROCEDURE, Symbol.Types.UNDEFINED, Symbol.Types.PROCEDURE), lVars);
    }
    <tCLOSING_PARENTHESIS> 
}

void entAcar() :
{
    AtribExp i;
}
{
    < tENTACAR >
    <tOPENING_PARENTHESIS>
    i = expresionSimple()
    {
        typeEqual(Symbol.Types.INT, i.type, String.format("Tipo incorrecto. Se esperaba INT pero se encontró %s.", i.type));
    }
    <tCLOSING_PARENTHESIS>
}

void carAent() :
{
    AtribExp c;
}
{
    < tCARAENT >
    < tOPENING_PARENTHESIS>
    c = primario()
    {
        typeEqual(Symbol.Types.CHAR, c.type, String.format("Tipo incorrecto. Se esperaba CHAR pero se encontró %s.", c.type));
    }
    <tCLOSING_PARENTHESIS>
}
