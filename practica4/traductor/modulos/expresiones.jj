AtribExp primario() :
{
    AtribExp prim, ae;
    Symbol s;
    Token t;
    ArrayList<AtribExp> lPar = new ArrayList<AtribExp>();
}
{
    (
        prim = entAcar()    { return prim; }
    | 
        prim = carAent()    { return prim; }
    |
        LOOKAHEAD(2)
        t = <tIDENTIFICADOR>
        <tOPENING_PARENTHESIS>
        lPar = parametros_llamada_funcion()
        {
            checkParametersFunction(t, lPar);
        }
        <tCLOSING_PARENTHESIS>
        {
            try {
                s = st.getSubprogram(t.image);
                SymbolFunction f = (SymbolFunction) s;
                prim = new AtribExp(f.returnType, false);
                prim.code.addComment("call " + t.image);
                for(int i = 0; i < lPar.size(); i++) {
                    if(f.parList.get(i).parClass == Symbol.ParameterClass.REF)
                        lPar.get(i).code.pop();
                    prim.code.addBlock(lPar.get(i).code);
                }
                prim.code.addOSFInst(CGUtils.memorySpaces[st.level], st.level - s.nivel, s.label);
                //prim.code.addInst(PCodeInstruction.OpCode.DRF);
                return prim;
            } catch(SymbolNotFoundException e) {
                printError(String.format("Función \"%s\" no encontrada en la tabla de símbolos.", t.image));
                return new AtribExp();
            }
        }
    |
        LOOKAHEAD(2)
        t = <tIDENTIFICADOR>
        <tOPENING_SQUARE_BRACKET>
        ae = expresion()
        <tCLOSING_SQUARE_BRACKET>
        {
            /*try {
                s = st.getSymbol(t.image);
            } catch (SymbolNotFoundException e) {
                printError(String.format("Array \"%s\" no encontrada en tabla de símbolos.", t.image));
                return new AtribExp();
            }
            SymbolArray s_array = (SymbolArray) s;
            prim = new AtribExp(s_array.baseType, false);
            prim.code.addInst(PCodeInstruction.OpCode.SRF, st.level - s.nivel, s.offset);
            if(s.parClass == Symbol.ParameterClass.REF) prim.code.addInst(PCodeInstruction.OpCode.DRF);
            prim.code.addBlock(ae.code);
            prim.code.addInst(PCodeInstruction.OpCode.STC, s_array.minInd);
            prim.code.addInst(PCodeInstruction.OpCode.SBT);
            prim.code.addInst(PCodeInstruction.OpCode.STC, 1);
            prim.code.addInst(PCodeInstruction.OpCode.TMS);
            prim.code.addInst(PCodeInstruction.OpCode.PLUS);
            prim.code.addInst(PCodeInstruction.OpCode.DRF);
            return prim;*/

            try {
                s = st.getSymbol(t.image);
            } catch(SymbolNotFoundException e) {
                printError(String.format("Array \"%s\" no encontrada en tabla de símbolos.", t.image));
                return new AtribExp();
            }
            SymbolArray s_array = (SymbolArray) s;
            prim = new AtribExp(s_array.baseType, false);
            prim.code.addInst(PCodeInstruction.OpCode.SRF, st.level - s.nivel, s.offset);
            if(s.parClass == Symbol.ParameterClass.REF) prim.code.addInst(PCodeInstruction.OpCode.DRF);
            prim.code.addBlock(ae.code);
            prim.code.addInst(PCodeInstruction.OpCode.PLUS);
            prim.code.addInst(PCodeInstruction.OpCode.STC, s_array.minInd);
            prim.code.addInst(PCodeInstruction.OpCode.SBT);
            prim.code.addInst(PCodeInstruction.OpCode.DRF);
            return prim;
        }
    |
        t = <tIDENTIFICADOR>
        {
            try {
                s = st.getSymbol(t.image);
                prim = new AtribExp(s.type, false);
                prim.code.addInst(PCodeInstruction.OpCode.SRF, st.level - s.nivel, s.offset);
                prim.code.addInst(PCodeInstruction.OpCode.DRF);
                if(s.parClass == Symbol.ParameterClass.REF) prim.code.addInst(PCodeInstruction.OpCode.DRF);
                
                if(s instanceof SymbolArray) {
                    SymbolArray arr = (SymbolArray) s;
                    for(int offset = s.offset; offset <= s.offset + arr.maxInd - arr.minInd; ++offset) {
                        prim.codeVal.addInst(PCodeInstruction.OpCode.SRF, st.level - s.nivel, offset);
                        prim.codeVal.addInst(PCodeInstruction.OpCode.DRF);
                    }
                }

                return prim;
            } catch (SymbolNotFoundException e) {
                printError(String.format("Identificador \"%s\" no encontrado en tabla de símbolos.", t.image));
                return new AtribExp();
            }
        }
    |
        t = <tCONSTANT>
        {
            prim = new AtribExp(Symbol.Types.INT, true, t.image);
            prim.code.addInst(PCodeInstruction.OpCode.STC, Integer.parseInt(t.image));
            return prim;
        }
    |
        t = <tCHAR>
        {
            prim = new AtribExp(Symbol.Types.CHAR, true, Character.toString(t.image.charAt(1)));
            prim.code.addInst(PCodeInstruction.OpCode.STC, (int) t.image.charAt(1));
            return prim;
        }
    |
        t = <tSTRING>
        {
            String cadena = t.image.substring(1, t.image.length() - 1);
            try {
                byte[] bytes = cadena.getBytes("UTF-8");
                prim = new AtribExp(Symbol.Types.STRING, true, cadena);
                for(int i = bytes.length - 1; i >= 0; --i)
                    prim.code.addInst(PCodeInstruction.OpCode.STC, (int) bytes[i]);
                return prim;
            } catch(UnsupportedEncodingException e) {
                printError("Carácter irreconocible");
                return new AtribExp();
            }
        }
    |
        <tTRUE>
        {
            prim = new AtribExp(Symbol.Types.BOOL, true, "true");
            prim.code.addInst(PCodeInstruction.OpCode.STC, 1);
            return prim;

        }
    |
        <tFALSE>
        {
            prim = new AtribExp(Symbol.Types.BOOL, true, "false");
            prim.code.addInst(PCodeInstruction.OpCode.STC, 0);
            return prim;
        }
    )
}

AtribExp factor() :
{
    Token op = null;
    AtribExp res;
    Boolean ok = true;
}
{
    ( op = <tNOT> | op = <tPLUS> | op = <tMINUS> )?
    (
        <tOPENING_PARENTHESIS> res = expresion() <tCLOSING_PARENTHESIS>
    |
        res = primario()
    )

    {
        if(op == null) return res;

        // SEMÁNTICO
        switch(op.image) {
            case "!": ok = typeEqual(Symbol.Types.BOOL, res.type,
                String.format("El operador \"%s\" requiere un valor de tipo BOOL, pero se ha proporcionado %s.", op.image, res.type));
                break;
            default: ok &=  typeEqual(Symbol.Types.INT, res.type,
                String.format("El operador \"%s\" requiere un valor de tipo INT, pero se ha proporcionado %s.", op.image, res.type));   
                break;
        }
        if(!ok) return new AtribExp();

        // GENERACIÓN DE CÓDIGO
        switch(op.image) {
            case "!":
                res.code.addInst(PCodeInstruction.OpCode.NGB); break;
            case "-":
                res.code.addInst(PCodeInstruction.OpCode.NGI); break;
            default:
                break; // "+" no afecta al entero
        }

        res.isConst = false;
        return res;
    }
}

AtribExp termino() :
{
    Token op = null;
    AtribExp left, right, aux;
    Boolean ok = true;
}
{
    left = factor() { aux = left; }
    ( 
        op = operador_multiplicativo()
        right = factor()
        
        {
            // SEMÁNTICO
            ok &= typeEqual(Symbol.Types.INT, Arrays.asList(aux.type, right.type),
                String.format("Los operandos del operador \"%s\" deben ser de tipo INT. Recibido %s %s %s.", op.image, aux.type, op.image, right.type));
            aux = AtribExp.copy(right);

            // GENERACIÓN DE CÓDIGO
            left.code.addBlock(right.code);
            switch(op.image.toLowerCase()) {
                case "*":
                    left.code.addInst(PCodeInstruction.OpCode.TMS); break;
                case "/":
                    left.code.addInst(PCodeInstruction.OpCode.DIV); break;
                case "mod":
                    left.code.addInst(PCodeInstruction.OpCode.MOD); break;
            }
        }
    )*
    {
        if(!ok) return new AtribExp();
        left.isConst = false;
        return left;
    }
}

AtribExp expresionSimple() :
{
    Token op = null;
    AtribExp left, right, aux;
    Boolean ok = true;
}
{
    left = termino() { aux = left; }
    ( 
        LOOKAHEAD(2) ( op = <tPLUS> | op = <tMINUS> )
        right = termino()

        {
            // SEMÁNTICO
            ok &= typeEqual(Symbol.Types.INT, Arrays.asList(aux.type, right.type),
                String.format("Los operandos del operador \"%s\" deben ser de tipo INT. Recibido %s %s %s.", op.image, aux.type, op.image, right.type));
            aux = AtribExp.copy(right);

            // GENERACIÓN DE CÓDIGO
            left.code.addBlock(right.code);
            switch(op.image.toLowerCase()) {
                case "+":
                    left.code.addInst(PCodeInstruction.OpCode.PLUS); break;
                case "-":
                    left.code.addInst(PCodeInstruction.OpCode.SBT); break;
            }
        }
    )*
    {
        if(!ok) return new AtribExp();
        left.isConst = false;
        return left;
    }
}

AtribExp relacion() :
{
    Token op = null;
    AtribExp left, right;
    Boolean ok = true;
}
{
    left = expresionSimple()
    (
        op = operador_relacional()
        right = expresionSimple()

        {
            // SEMÁNTICO
            if(op.image.matches("=|<>"))
                ok = typeEqual(left.type, right.type,
                    String.format("Los operandos del operador \"%s\" deben ser del mismo tipo. %s != %s.", op.image, left.type, right.type));
            else // <, <=, >, >=
                ok = typeEqual(Symbol.Types.INT, Arrays.asList(left.type, right.type),
                    String.format("Los operandos del operador \"%s\" deben ser de tipo INT. Se proporciono %s y %s.", op.image, left.type, right.type));
            
            if(!ok) return new AtribExp();

            // GENERACIÓN DE CÓDIGO
            left.code.addBlock(right.code);
            switch(op.image) {
                case "=":   left.code.addInst(PCodeInstruction.OpCode.EQ);  break;
                case "<>":  left.code.addInst(PCodeInstruction.OpCode.NEQ); break;
                case "<":   left.code.addInst(PCodeInstruction.OpCode.LT);  break;
                case "<=":  left.code.addInst(PCodeInstruction.OpCode.LTE); break;
                case ">":   left.code.addInst(PCodeInstruction.OpCode.GT);  break;
                case ">=":  left.code.addInst(PCodeInstruction.OpCode.GTE); break;
            }
        }
    )?
    {
        if(op != null) left.type = Symbol.Types.BOOL;
        left.isConst = false;
        return left;
    }
}

AtribExp expresion() :
{
    Token op = null;
    AtribExp left, right, aux;
    Boolean ok = true;
}
{
    left = relacion() { aux = left; }
    (
        ( op = <tAND> | op = <tOR> )
        right = relacion()

        {
            // SEMÁNTICO
            ok &= typeEqual(Symbol.Types.BOOL, Arrays.asList(aux.type, right.type),
                String.format("Los operandos para el operador \"%s\" deben ser de tipo BOOL. Recibido %s %s.", op.image, aux.type, right.type));
            aux = AtribExp.copy(right);

            // GENERACIÓN DE CÓDIGO
            left.code.addBlock(right.code);
            switch(op.image) {
                case "&":   left.code.addInst(PCodeInstruction.OpCode.AND);  break;
                case "|":  left.code.addInst(PCodeInstruction.OpCode.OR); break;
            }
        }
    )*
    {
        if(!ok) return new AtribExp();
        left.isConst = false;
        return left;
    }
}

void lista_una_o_mas_exps() :
{}
{
    ( expresion() )+
}

Token operador_multiplicativo() :
{
    Token t;
}
{
    t = <tTIMES>    { return t; }
  | t = <tDIVIDE>   { return t; }
  | t = <tMOD>      { return t; }
}

Token operador_relacional() :
{
    Token t;
}
{
    t = <tEQUAL>    { return t; }
  | t = <tNOTEQUAL> { return t; }
  | t = <tLT>       { return t; }
  | t = <tLE>       { return t; }
  | t = <tGT>       { return t; }
  | t = <tGE>       { return t; }
}
