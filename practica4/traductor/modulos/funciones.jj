CodeBlock declaracion_proc() :
{
    Token t;
    ArrayList<Symbol> parametros = new ArrayList<Symbol>();
    CodeBlock headerPartCode; // Para guardar el código generado por setupProcedure
    CodeBlock cuerpo = new CodeBlock();     // Para el código de las instrucciones del cuerpo
    CodeBlock footerPartCode; // Para guardar el código generado por cleanupProcedure
    CodeBlock finalProcedureCode = new CodeBlock(); // Para combinar todas las partes
}
{
    // --- 1. Parsear la Cabecera y llamar a la función de Setup ---
    t = <tIDENTIFICADOR>
    <tOPENING_PARENTHESIS>
    ( parametros = parametros_declaraciones() )? // Asume que esta regla parsea y retorna la lista
    <tCLOSING_PARENTHESIS>

    // Bloque de Acción Semántica 1: Llamar a la función de setup.
    // Esta función creará el símbolo, el ámbito, procesará parámetros y generará código.
    {
        headerPartCode = setupProcedure(t, parametros);
        finalProcedureCode.addBlock(headerPartCode); // Añadir el código de cabecera generado al bloque final
    }

    // Parsear Declaraciones Locales y Procedimientos/Funciones Anidados
    // Estas declaraciones ocurrirán DENTRO del ámbito creado por setupProcedure.
    ( LOOKAHEAD(3) declaracionVariables() )* // Asume esta regla parsea variables locales
    ( declaracion_proc() | declaracion_func() )* // Llamadas recursivas para anidados

    // --- 2. Parsear el Cuerpo del Procedimiento ---
    <tBEGGINING>
    {
         // Asegurarse de que 'cuerpo' esté inicializado antes del bucle de instrucciones
         cuerpo = new CodeBlock();
    }
    ( // Bucle para parsear cero o más instrucciones en el cuerpo
        {
            CodeBlock instruccionBlock; // Bloque temporal para el código generado por una instrucción
        }
        instruccionBlock = instruccion() // Asume que esta regla parsea una instrucción y retorna su CodeBlock
        {
            // Añadir el código generado por la instrucción al bloque del cuerpo
            cuerpo.addBlock(instruccionBlock);
        }
    )*
    <tEND>

    // Después de parsear el cuerpo, añadir el CodeBlock 'cuerpo' al CodeBlock final del procedimiento.
    {
        finalProcedureCode.addBlock(cuerpo);
    }


    // --- 3. Llamar a la función de Cleanup y Finalizar ---
    // Bloque de Acción Semántica 2: Llamar a la función de cleanup.
    // Esta función generará CSF y eliminará el ámbito.
    {
        footerPartCode = cleanupProcedure();
        finalProcedureCode.addBlock(footerPartCode); // Añadir el código de pie de página generado al bloque final
    }

    // El resultado de la regla es el CodeBlock completo del procedimiento.
    {
        return finalProcedureCode;
    }
}

CodeBlock declaracion_func() :
{ 

    Token t;
    AtribTipo aT;
    ArrayList<Symbol> parametros = new ArrayList<Symbol>();
}
{
    aT = tipoEscalar()
    t = <tIDENTIFICADOR>
    < tOPENING_PARENTHESIS >
    ( parametros = parametros_declaraciones() )?
    < tCLOSING_PARENTHESIS >
    {
        insertFunction(t, aT, parametros);
    }
    ( LOOKAHEAD(3) declaracionVariables() )*
    ( declaracion_proc() | declaracion_func() )*
    < tBEGGINING >
    ( instruccion() )*
    < tEND >
    {
        st.removeBlock();
        return null;
    }
}

CodeBlock llamar_funcion() :
{ 
    ArrayList<AtribExp> lPar = new ArrayList<AtribExp>();
    Symbol fun;
    Token t;
    CodeBlock c = new CodeBlock();
}
{
    t = < tIDENTIFICADOR >
    < tOPENING_PARENTHESIS >
    lPar = parametros_llamada_funcion()
    {
        checkParameters(t, lPar);
    }
    < tCLOSING_PARENTHESIS >
    < tSEMICOLON >

    {
        // Generación de código
        try {
            fun = st.getSymbol(t.image);
        } catch (SymbolNotFoundException e) {
            printError(String.format("Función \"%s\" no encontrada en la tabla de símbolos.", t.image));
            return new CodeBlock();
        }
        // añadir código de los parámetros
        for(AtribExp ae : lPar) {
            c.addBlock(ae.code);
        }
        // abrir stack frame
        c.addInst(OpCode.OSF, lPar.size(), st.level - fun.nivel, fun.offset);

        // si es una función (no procedimiento)
        if(fun instanceof SymbolFunction) {
            c.addInst(PCodeInstruction.OpCode.DRF);
        }

        return c;
    }
}

ArrayList<AtribExp> parametros_llamada_funcion() :
{ 
    ArrayList<AtribExp> lpar = new ArrayList<AtribExp>();
    AtribExp ae = null;    
}
{
    (  ae = expresion() )?
    {
        if(ae != null)
            lpar.add(ae);
    }
    (
        <tCOMA> ae = expresion()
        {
            if(ae != null)
                lpar.add(ae);
        }
    )*
    { return lpar; }
}

ArrayList<Symbol> parametros_declaraciones() :
{   
    AtribTipo aT;
    ArrayList<String> lVars;
    boolean isRef = false;
    ArrayList<Symbol> allSymbols = new ArrayList<Symbol>();
}
{
    aT = tipo()
    ( <tREF> { isRef = true; } )?
    lVars = listaIDs()
    {
        for (String id : lVars) {
            Symbol sV = null;
            if(aT.isArray) {
                sV = new SymbolArray(
                    id, 0, aT.size-1, aT.type, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
            } else {
                switch(aT.type) {
                    case INT:
                        sV = new SymbolInt(
                            id, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                        break;
                    case BOOL:
                        sV = new SymbolBool(
                            id, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                        break;
                    case CHAR:
                        sV = new SymbolChar(
                            id, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                        break;
                    default:
                        printError("Tipo no válido.");
                        break;
                }
            }
            allSymbols.add(sV);
        }
        isRef = false;
    }
    (
        <tSEMICOLON>
        aT = tipo()
        ( <tREF> { isRef = true; } )? 
        lVars = listaIDs()
        {
        for (String id : lVars) {
                Symbol sV = null;
                if(aT.isArray) {
                    sV = new SymbolArray(
                        id, 0, aT.size-1, aT.type, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                } else {
                    switch(aT.type) {
                        case INT:
                            sV = new SymbolInt(
                                id, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                            break;
                        case BOOL:
                            sV = new SymbolBool(
                                id, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                            break;
                        case CHAR:
                            sV = new SymbolChar(
                                id, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                            break;
                        default:
                            System.out.println("Tipo no válido.");
                            break;
                    }
                }
                allSymbols.add(sV);
            }
        }
    )*
    { return allSymbols; }
}
