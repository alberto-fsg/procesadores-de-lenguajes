CodeBlock declaracion_proc_func() :
{
    CodeBlock res = new CodeBlock();
    CodeBlock aux = new CodeBlock();
}
{
    (
          aux = declaracion_proc()  { res.addBlock(aux); } 
        | aux = declaracion_func()  { res.addBlock(aux); }
    )+
    { return res; }
}

CodeBlock declaracion_proc() :
{
    Token t;
    ArrayList<Symbol> parametros = new ArrayList<Symbol>();
    CodeBlock cres = new CodeBlock();
    CodeBlock cinst = new CodeBlock();
    CodeBlock aux = new CodeBlock();
}
{
    t = <tIDENTIFICADOR>
    <tOPENING_PARENTHESIS>
    ( parametros = parametros_declaraciones() )?
    <tCLOSING_PARENTHESIS>
    {
        insertProcedure(t, parametros);
    }
    ( LOOKAHEAD(3) declaracionVariables() )*
    ( declaracion_proc() | declaracion_func() )*
    <tBEGGINING>
    ( aux = instruccion() { cinst.addBlock(aux); } )*
    <tEND>
    {
        // DECLARACIÓN DE CÓDGIO
        String etiqInicioProc = CGUtils.newLabel();
        st.getSymbol(t.image).label = etiqInicioProc;
        
        cres.addLabel(etiqInicioProc);
        
        // Parámetros
        for (int i = parametros.size() - 1; i >= 0; --i) {
            Symbol param = parametros.get(i);
            cres.addInst(OpCode.SRF, st.level - param.nivel, param.offset);
            cres.addInst(OpCode.ASGI);
        }

        // Cuerpo procedimiento
        cres.addComment("inicio procedimiento " + t.image);
        cres.addBlock(cinst);

        // Fin procedimiento
        cres.addInst(OpCode.CSF);
        cres.addComment("fin procedimiento " + t.image);

        st.removeBlock();
        return cres;
    }
}

CodeBlock declaracion_func() :
{ 

    Token t;
    AtribTipo aT;
    ArrayList<Symbol> parametros = new ArrayList<Symbol>();
}
{
    aT = tipoEscalar()
    t = <tIDENTIFICADOR>
    < tOPENING_PARENTHESIS >
    ( parametros = parametros_declaraciones() )?
    < tCLOSING_PARENTHESIS >
    {
        insertFunction(t, aT, parametros);
    }
    ( LOOKAHEAD(3) declaracionVariables() )*
    ( declaracion_proc() | declaracion_func() )*
    < tBEGGINING >
    ( instruccion() )*
    < tEND >
    {
        st.removeBlock();
        return null;
    }
}

CodeBlock llamar_funcion() :
{ 
    ArrayList<AtribExp> lPar = new ArrayList<AtribExp>();
    Symbol fun;
    Token t;
    CodeBlock c = new CodeBlock();
}
{
    t = < tIDENTIFICADOR >
    < tOPENING_PARENTHESIS >
    lPar = parametros_llamada_funcion()
    {
        checkParameters(t, lPar);
    }
    < tCLOSING_PARENTHESIS >
    < tSEMICOLON >

    {
        // GENERACIÓN DE CÓDIGO
        try {
            fun = st.getSymbol(t.image);
        } catch (SymbolNotFoundException e) {
            printError(String.format("Función \"%s\" no encontrada en la tabla de símbolos.", t.image));
            return new CodeBlock();
        }
        c.addComment("call " + t.image);
        // añadir código de los parámetros
        if(fun instanceof SymbolFunction) {
            SymbolFunction f = (SymbolFunction) fun;
            for(int i = 0; i < lPar.size(); i++) {
                if(f.parList.get(i).parClass == Symbol.ParameterClass.REF)
                    lPar.get(i).code.pop();
                c.addBlock(lPar.get(i).code);
            }
            c.addOSFInst(CGUtils.memorySpaces[st.level], st.level - fun.nivel, fun.label);
        }
        if(fun instanceof SymbolProcedure) {
            SymbolProcedure p = (SymbolProcedure) fun;
            for(int i = 0; i < lPar.size(); i++) {
                if(p.parList.get(i).parClass == Symbol.ParameterClass.REF)
                    lPar.get(i).code.pop();
                c.addBlock(lPar.get(i).code);
            }
            c.addOSFInst(CGUtils.memorySpaces[st.level], st.level - fun.nivel, fun.label);
        }
            
        // si es una función (no procedimiento)
        if(fun instanceof SymbolFunction) {
            c.addInst(PCodeInstruction.OpCode.DRF);
        }

        return c;
    }
}

ArrayList<AtribExp> parametros_llamada_funcion() :
{ 
    ArrayList<AtribExp> lpar = new ArrayList<AtribExp>();
    AtribExp ae = null;    
}
{
    (  ae = expresion() )?
    {
        if(ae != null)
            lpar.add(ae);
    }
    (
        <tCOMA> ae = expresion()
        {
            if(ae != null)
                lpar.add(ae);
        }
    )*
    { return lpar; }
}

ArrayList<Symbol> parametros_declaraciones() :
{   
    AtribTipo aT;
    ArrayList<String> lVars;
    boolean isRef = false;
    ArrayList<Symbol> allSymbols = new ArrayList<Symbol>();
}
{
    aT = tipo()
    ( <tREF> { isRef = true; } )?
    lVars = listaIDs()
    {
        for (String id : lVars) {
            Symbol sV = null;
            if(aT.isArray) {
                sV = new SymbolArray(
                    id, 0, aT.size-1, aT.type, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
            } else {
                switch(aT.type) {
                    case INT:
                        sV = new SymbolInt(
                            id, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                        break;
                    case BOOL:
                        sV = new SymbolBool(
                            id, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                        break;
                    case CHAR:
                        sV = new SymbolChar(
                            id, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                        break;
                    default:
                        printError("Tipo no válido.");
                        break;
                }
            }
            allSymbols.add(sV);
        }
        isRef = false;
    }
    (
        <tSEMICOLON>
        aT = tipo()
        ( <tREF> { isRef = true; } )? 
        lVars = listaIDs()
        {
        for (String id : lVars) {
                Symbol sV = null;
                if(aT.isArray) {
                    sV = new SymbolArray(
                        id, 0, aT.size-1, aT.type, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                } else {
                    switch(aT.type) {
                        case INT:
                            sV = new SymbolInt(
                                id, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                            break;
                        case BOOL:
                            sV = new SymbolBool(
                                id, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                            break;
                        case CHAR:
                            sV = new SymbolChar(
                                id, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                            break;
                        default:
                            System.out.println("Tipo no válido.");
                            break;
                    }
                }
                allSymbols.add(sV);
            }
        }
    )*
    { return allSymbols; }
}
