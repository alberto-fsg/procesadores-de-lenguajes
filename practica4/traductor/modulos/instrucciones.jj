CodeBlock instruccion() :
{
    CodeBlock c = new CodeBlock();
}
{
    (
    c =  escribir_linea() <tSEMICOLON>
    | c = escribir() <tSEMICOLON>
    | c = leer_linea() <tSEMICOLON>
    | c = leer() <tSEMICOLON>
    | entAcar() <tSEMICOLON> // no sirven de nada, si se llaman solas
    | carAent() <tSEMICOLON> // no sirven de nada, si se llaman solas
    | LOOKAHEAD(2) c = llamar_funcion()
    | LOOKAHEAD(2) c = asignacionVariable()
    | c = seleccion()
    | c = bucle()
    | LOOKAHEAD(2) ( declaracion_proc() | declaracion_func() )
    | <tABANDONAR> <tSEMICOLON>
    {
        code.addInst(OpCode.LVP, 0);
    }
    | <tNADA> <tSEMICOLON>
    {
        code.addInst(OpCode.NOP, 0);
    }
    )
    
    { return c; }
}

CodeBlock bucle() :
{
    AtribExp condicion;
    CodeBlock cuerpo = new CodeBlock();
    CodeBlock b = new CodeBlock();  // Bloque final para el bucle generado
    CodeBlock c;                    // Bloque temporal para cada instrucción
}
{
    <tITERATION>
    condicion = expresion()

    ( c = instruccion() { cuerpo.addBlock(c); } )*
    <tEND_ITERATION>
    {
        b = bucleGenerarCodigo(condicion, cuerpo);
    }
    { return b; }
}


CodeBlock seleccion() :
{
    java.util.List<AtribExp> condiciones = new java.util.ArrayList<AtribExp>();
    java.util.List<CodeBlock> cuerpos = new java.util.ArrayList<CodeBlock>();
    CodeBlock auxiliar; // Almacena temporalmente el cuerpo asociado a cada condición del select
    CodeBlock otherwise = null;
    AtribExp condicion;
    CodeBlock c;                   // Bloque temporal para cada instrucción
    CodeBlock s = new CodeBlock(); // Bloque final para el bucle generado
}
{
    <tSELECTION>
    (
        <tCASE> { auxiliar = new CodeBlock(); }
        condicion = expresion()
        <tCOLON>
        ( c = instruccion() { auxiliar.addBlock(c); } )*
        {
            condiciones.add(condicion);
            cuerpos.add(auxiliar);
        }
    )+
    [
        <tOTHERWISE> <tCOLON>
        { auxiliar = new CodeBlock(); }
        ( c = instruccion() { auxiliar.addBlock(c); } )*
        {
            otherwise = auxiliar;
        }
    ]
    <tEND_SELECTION>
    {
        s = seleccionGenerarCodigo(condiciones, cuerpos, otherwise);
    }
    { return s; }
}
