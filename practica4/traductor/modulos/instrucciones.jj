CodeBlock instruccion() :
{
    CodeBlock c = new CodeBlock();
}
{
    (
    c =  escribir_linea() <tSEMICOLON>
    | c = escribir() <tSEMICOLON>
    | c = leer_linea() <tSEMICOLON>
    | c = leer() <tSEMICOLON>
    | entAcar() <tSEMICOLON> // no sirven de nada, si se llaman solas
    | carAent() <tSEMICOLON> // no sirven de nada, si se llaman solas
    | LOOKAHEAD(2) llamar_funcion()
    | LOOKAHEAD(2) c = asignacionVariable()
    | seleccion()
    | bucle()
    | LOOKAHEAD(2) declaracion_procs_funcs()
    | <tABANDONAR> <tSEMICOLON>
    {
        code.addInst(OpCode.LVP, 0);
    }
    | <tNADA> <tSEMICOLON>
    {
        code.addInst(OpCode.NOP, 0);
    }
    )
    
    { return c; }
}

void bucle() :
{
    AtribExp condicion;
    CodeBlock cuerpo = new CodeBlock();
}
{
    <tITERATION>
    condicion = expresion()

    // Por cada instrucci칩n del cuerpo:
    //   1) la parsea generando su c칩digo en el bloque global `code`
    //   2) lo mueve al bloque local `cuerpo` (a침ade a `cuerpo` y borra de `code`)
    // De este modo se extraen las instrucciones del cuerpo.
    ( instruccion() )* { cuerpo.addBlock(code); code.clearBlock(); }
    <tEND_ITERATION>
    {
        generarBucle(condicion, cuerpo);
    }
}

void seleccion() :
{
    java.util.List<AtribExp> condiciones = new java.util.ArrayList<AtribExp>();
    java.util.List<CodeBlock> cuerpos = new java.util.ArrayList<CodeBlock>();
    CodeBlock auxiliar; // Almacena temporalmente el cuerpo asociado a cada condici칩n del select
    CodeBlock otherwise = null;
    AtribExp condicion;
}
{
    <tSELECTION>
    (
        <tCASE> { auxiliar = new CodeBlock(); }
        condicion = expresion()
        <tCOLON>
        ( instruccion() )* { 
            auxiliar.addBlock(code); 
            code.clearBlock(); 
            condiciones.add(condicion); 
            cuerpos.add(auxiliar); 
        }
    )+
    [
        <tOTHERWISE> <tCOLON>
        { auxiliar = new CodeBlock(); }
        ( instruccion() )* { 
            auxiliar.addBlock(code); 
            code.clearBlock(); 
            otherwise = auxiliar; 
        }
    ]
    <tEND_SELECTION>
    {
        generarSeleccion(condiciones, cuerpos, otherwise);
    }
}
