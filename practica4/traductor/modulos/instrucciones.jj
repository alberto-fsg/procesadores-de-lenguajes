CodeBlock instruccion() :
{
    CodeBlock c = new CodeBlock();
}
{
    (
    c =  escribir_linea() <tSEMICOLON>
    | c = escribir() <tSEMICOLON>
    | c = leer_linea() <tSEMICOLON>
    | c = leer() <tSEMICOLON>
    | entAcar() <tSEMICOLON> // no sirven de nada, si se llaman solas
    | carAent() <tSEMICOLON> // no sirven de nada, si se llaman solas
    | LOOKAHEAD(2) c = llamar_funcion()
    | LOOKAHEAD(2) c = asignacionVariable()
    | c = seleccion()
    | c = bucle()
    | LOOKAHEAD(2) ( declaracion_proc() | declaracion_func() )
    | <tABANDONAR> <tSEMICOLON>
    {
        code.addInst(OpCode.LVP, 0);
    }
    | <tNADA> <tSEMICOLON>
    {
        code.addInst(OpCode.NOP, 0);
    }
    )
    
    { return c; }
}

CodeBlock bucle() :
{
    AtribExp condicion;
    CodeBlock cuerpo = new CodeBlock();
    CodeBlock b = new CodeBlock();  // Bloque final para el bucle generado
    CodeBlock c;                    // Bloque temporal para cada instrucción
}
{
    <tITERATION>
    condicion = expresion()

    ( c = instruccion() { cuerpo.addBlock(c); } )*
    <tEND_ITERATION>
    {
        b = bucleGenerarCodigo(condicion, cuerpo);
    }
    { return b; }
}

CodeBlock seleccion() :
{
    AtribExp auxCond;
    CodeBlock cres = new CodeBlock(), auxInst;
    ArrayList<AtribExp> condiciones = new ArrayList<AtribExp>();
    ArrayList<CodeBlock> cuerpos = new ArrayList<CodeBlock>();
}
{
    <tSELECTION>
    (
        <tCASE>
        auxCond = expresion()   { condiciones.add(auxCond); }
        <tCOLON>
        auxInst = instrSelect() { cuerpos.add(auxInst); }
    )+
    [
        <tOTHERWISE> <tCOLON>
        auxInst = instrSelect() { cuerpos.add(auxInst); }
    ]
    <tEND_SELECTION>

    {
        // GENERACIÓN DE CÓDIGO
        cres.addComment("inicio select");
        int i;
        for(i = 0; i < condiciones.size(); ++i) {
            String etiq = CGUtils.newLabel();
            cres.addBlock(condiciones.get(i).code);
            cres.addInst(OpCode.JMF, etiq);
            cres.addBlock(cuerpos.get(i));
            cres.addLabel(etiq);
        }
        if(i == cuerpos.size() - 1) { // Hay Otherwise
            cres.addBlock(cuerpos.get(i));
        }
        cres.addComment("fin select");
        return cres;
    }
}

CodeBlock instrSelect() :
{
    CodeBlock cres = new CodeBlock(), aux;
}
{
    (
        aux = instruccion()     { cres.addBlock(aux); }
    )*
    { return cres; }
}
