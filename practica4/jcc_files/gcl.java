/* Generated By:JavaCC: Do not edit this line. gcl.java */
package traductor;

import lib.symbolTable.*;
import lib.symbolTable.exceptions.*;
import lib.tools.codeGeneration.*;
import lib.tools.codeGeneration.PCodeInstruction.OpCode;
import java.io.UnsupportedEncodingException;

import java.util.*;

public class gcl implements gclConstants {
    // tabla de símbolos
    static SymbolTable st;

    // código generado
    static CodeBlock code = new CodeBlock();

    public static void main(String[] args) {
           gcl parser = null;

        for(int i = 0; i < CGUtils.memorySpaces.length; ++i) {
            // El offset de cada nivel empieza en 3, los primeros tres espacios son reservados (Tema 5, lección 10)
            CGUtils.memorySpaces[i] = 3;
        }

           try {
           st = new SymbolTable();

                   if(args.length == 0) {
                           parser = new gcl(System.in);
                   }
                   else {
                           parser = new gcl(new java.io.FileInputStream(args[0]));
                   }
                   //Programa es el símbolo inicial de la gramática
                   parser.Programa();

                   System.out.println("***** An\u00e1lisis terminado con \u00e9xito *****");

           System.out.println("\n" + code.toString());

           System.out.println("***** P-Code generado *****");
           }
           catch (java.io.FileNotFoundException e) {
                   System.out.println ("Fichero " + args[0] + " no encontrado.");
           }
           catch (TokenMgrError e) {
                   System.out.println("LEX_ERROR: " + e.getMessage());
           }
           catch (Exception e) {
                        System.out.println("Ha ocurrido una excepci\u00f3n: " + e.getMessage());
           }
        }

    private static boolean typeNotEqual(Symbol.Types esperado, Symbol.Types real, String error) {
        if(esperado == real) {
            if(error != null) printError(error);
            return false;
        }
        return true;
    }

    private static boolean typeEqual(Symbol.Types esperado, Symbol.Types real, String error) {
        if(esperado != real) {
            if(error != null) printError(error);
            return false;
        }
        return true;
    }

    private static boolean typeNotEqual(List<Symbol.Types> esperado, Symbol.Types real, String error) {
        if(!esperado.isEmpty()) {
            for(Symbol.Types t : esperado) {
                if(t == real) {
                    if(error != null) printError(error);
                    return false;
                }
            }
        }
        return true;
    }

    private static boolean typeEqual(Symbol.Types esperado, List<Symbol.Types> real, String error) {
        if(!real.isEmpty()) {
            for(Symbol.Types t : real) {
                if(esperado != t) {
                    if(error != null) printError(error);
                    return false;
                }
            }
        }
        return true;
    }

    private static boolean typeNotEqual(List<Symbol.Types> esperado, ArrayList<String> real) {
        boolean ok = true;
        Symbol s;
        for(String i : real) {
            try {
                s = st.getSymbol(i);
                ok = ok && typeNotEqual(esperado, s.type, String.format("leer_lin o leer incompatible con tipo de dato \"%s\"", s.type));
            } catch(SymbolNotFoundException e) {
                printError(String.format("Variable \"%s\" no encontrada en tabla de s\u00edmbolos.", i));
            }
        }
        return ok;
    }

    private static SymbolProcedure insertProcedure(Token identificador, ArrayList<Symbol> parametros, String etiqueta) {
        try {
            // al procedure no hay que darle offset
            SymbolProcedure sProc = new SymbolProcedure(identificador.image, parametros);
            sProc.label = etiqueta;
            st.insertSymbol(sProc);
            st.insertBlock();
            insertParameters(parametros);
            return sProc;
        } catch(AlreadyDefinedSymbolException e) {
            printError(String.format("Ya definido valor de identificador \"%s\".", identificador.image));
            return null;
        }
    }

    /*private static SymbolFunction insertFunction(Token identificador, ArrayList<Symbol> parametros, AtribTipo returnType, String etiqueta) {
        if(returnType.type != Symbol.Types.INT && returnType.type != Symbol.Types.BOOL && returnType.type != Symbol.Types.CHAR) {
            printError(String.format("Una función solo puede devolver valores de tipo INT, BOOL o CHAR. Tipo dado: %s.", returnType.type));
        }
        try {
            SymbolFunction sFunc = new SymbolFunction(identificador.image, parametros, returnType.type);
            sFunc.label = etiqueta;
            st.insertSymbol(sFunc);
            st.insertBlock();
            //sFunc.offset = CGUtils.memorySpaces[st.level]++;
            insertParameters(parametros);
            //st.insertSymbol(sFunc);
            return sFunc;
        } catch(AlreadyDefinedSymbolException e) {
            printError(String.format("Ya definido valor de identificador \"%s\".", identificador.image));
            return null;
        }
    }*/

    private static SymbolFunction insertFunction(Token identificador, ArrayList<Symbol> parametros, AtribTipo returnType, String etiqueta) {
        CodeBlock cb = new CodeBlock();
        if(returnType.type != Symbol.Types.INT && returnType.type != Symbol.Types.BOOL && returnType.type != Symbol.Types.CHAR) {
            printError(String.format("Una funci\u00f3n solo puede devolver valores de tipo INT, BOOL o CHAR. Tipo dado: %s.", returnType.type));
        } else {
            SymbolFunction sFunc = new SymbolFunction(identificador.image, parametros, returnType.type);
            try {
                SymbolFunction sFunc = new SymbolFunction(identificador.image, parametros, returnType.type);
                sFunc.label = etiqueta;
                st.insertSymbol(sFunc);
                st.insertBlock();
                insertParameters(parametros);
                return sFunc;
            } catch(AlreadyDefinedSymbolException e) {
                printError(String.format("Ya definido valor de identificador \"%s\".", identificador.image));
            }
        }
        return null;
    }

    private static void insertParameters(ArrayList<Symbol> parametros) {
        for(Symbol param : parametros) {
            try {
                param.offset = CGUtils.memorySpaces[st.level];
                if(param instanceof SymbolArray && param.parClass != Symbol.ParameterClass.REF)
                    CGUtils.memorySpaces[st.level] += ((SymbolArray)param).maxInd - ((SymbolArray)param).minInd + 1;
                else CGUtils.memorySpaces[st.level]++;
                st.insertSymbol(param);
                printMessage("Tabla de s\u00edmbolos",
                    String.format("\"%s\" %d (offset %d).", param.name, st.level, param.offset));
            } catch(AlreadyDefinedSymbolException e) {
                printError(String.format("Ya definida variable de identificador \"%s\".", param.name));
            }
        }
    }

    private static void checkParameters(Token identificador, ArrayList<AtribExp> parametros) {
        try {
            Symbol funOproc = st.getSymbol(identificador.image);
            ArrayList<Symbol> params;
            if(funOproc.type == Symbol.Types.FUNCTION || funOproc.type == Symbol.Types.PROCEDURE) {
                if(funOproc.type == Symbol.Types.FUNCTION)
                    params = ((SymbolFunction)funOproc).parList;
                else
                    params = ((SymbolProcedure)funOproc).parList;
            } else {
                printError(String.format("\"%s\" no es una funci\u00f3n o procedimiento.", identificador.image));
                return;
            }
            // Comprobar que el número de parámetros es el adecuado
            if(params.size() != parametros.size()) {
                printError(String.format("\"%s\" esperaba %d par\u00e1metros. Recibidos %d par\u00e1metros.",
                    identificador.image, params.size(), parametros.size()));
                return;
            }
            // Comprobar validez parámetro a parámetro
            for(int i = 0; i < params.size(); ++i) {
                // Comprobar que parámetro pasado es del tipo correcto
                if(params.get(i).type != parametros.get(i).type) {
                    printError(String.format("Par\u00e1metro no compatible con valor dado. Tipo esperado: %s. Tipo recibido: %s.",
                        params.get(i).type, parametros.get(i).type));
                }
                // Comprobar que parámetro pasado es una variable si se requiere paso por referencia
                if(params.get(i).parClass == Symbol.ParameterClass.REF && parametros.get(i).isConst) {
                    printError("Par\u00e1metro por referencia. Espera variable, recibido constante.");
                }
            }
        } catch(SymbolNotFoundException e) {
            printError(String.format("\"%s\" no es una funci\u00f3n o procedimiento.", identificador.image));
        }
    }

    private static void printError(String error) {
        String crojo = "\u001b[31m";
        String reset = "\u001b[0m";
        System.err.printf("%sError: (%d, %d):%s %s\n", crojo,
            token.beginLine, token.beginColumn, reset, error);
    }

    private static void printMessage(String label, String message) {
        String verde = "\u001b[32m";
        String reset = "\u001b[0m";
        System.out.printf("%s%s:%s %s\n", verde, label, reset, message);
    }

    /**
     * Declara variables en la tabla de símbolos y asigna espacio en memoria.
     * 
     * @param tipoVar Tipo de las variables a declarar
     * @param ids Lista de identificadores de variables
     * @throws AlreadyDefinedSymbolException Si algún identificador ya existe
     */
    private static void declararVariablesGenerarCodigo(AtribTipo tipoVar, List<String> ids) {
        for (String nombre : ids) {
            try {
                Symbol var = crearSimboloVariable(nombre, tipoVar);
                var.offset = CGUtils.memorySpaces[st.level];
                if(var instanceof SymbolArray)
                    CGUtils.memorySpaces[st.level] += ((SymbolArray)var).maxInd - ((SymbolArray)var).minInd + 1;
                else CGUtils.memorySpaces[st.level]++;
                st.insertSymbol(var);

                printMessage("Tabla de s\u00edmbolos",
                    String.format("\"%s\"  %d (offset %d).",
                    nombre, st.level, var.offset));

            } catch (AlreadyDefinedSymbolException e) {
                printError(String.format("Ya existe \"%s\".", nombre));
            }
        }
    }

    /**
     * Crea un símbolo de variable según su tipo (entero, booleano, carácter o array).
     * 
     * @param nombre Nombre de la variable
     * @param tipo_variable Tipo y dimensiones de la variable
     * @return Símbolo creado o null si el tipo no es válido o el nombre es null
     */
    private static Symbol crearSimboloVariable(String nombre, AtribTipo tipo_variable) {
        if (nombre == null) {
            return null;
        }

        if (tipo_variable.isArray) {
            return new SymbolArray(nombre, 0, tipo_variable.size-1, tipo_variable.type);
        }

        switch (tipo_variable.type) {
            case INT:  return new SymbolInt(nombre);
            case BOOL: return new SymbolBool(nombre);
            case CHAR: return new SymbolChar(nombre);
            default:
                printError("Tipo no v\u00e1lido para \"" + nombre + "\"");
                return null;
        }
    }

    /**
     * Genera asignación de variable normal o de un componente de un array en P-Code
     * 
     * @param nombre_variable Nombre de la variable/array a asignar
     * @param expresion_indice Expresión con el índice del componente si es una variable array (null en caso contrario)
     * @param expresion_valor Expresión con el valor a asignar
     * @return el código generado
     */
    private static CodeBlock asignacionVariableGenerarCodigo(
        String nombre_variable,
        AtribExp expresion_indice,
        AtribExp expresion_valor
    ) {
        CodeBlock cb = new CodeBlock();
        try {

            // Validación de que la variable tiene asociado un trozo de memoria
            Symbol simbolo_var = st.getSymbol(nombre_variable);
            int offset = simbolo_var.offset;
            if (offset == -1) {
                printError(String.format("Variable \"%s\" no declarada (sin offset).", nombre_variable));
                return cb;
            }

            // Calculo de dirección de destino
            int nivel_anidamiento = st.level - simbolo_var.nivel;
            //cb.addComment(Integer.toString(st.level));
            //cb.addComment(Integer.toString(simbolo_var.));
            cb.addComment("assignment " + nombre_variable);

            if (expresion_indice != null) {
                // Caso array: base + índice
                cb.addInst(PCodeInstruction.OpCode.SRF, nivel_anidamiento, offset);
                if(simbolo_var.parClass == Symbol.ParameterClass.REF) cb.addInst(PCodeInstruction.OpCode.DRF);
                cb.addBlock(expresion_indice.code);
                cb.addInst(PCodeInstruction.OpCode.PLUS);
                cb.addInst(PCodeInstruction.OpCode.STC, 0);
                cb.addInst(PCodeInstruction.OpCode.SBT);

            } else {
                // Caso variable simple
                cb.addInst(PCodeInstruction.OpCode.SRF, nivel_anidamiento, offset);
                if(simbolo_var.parClass == Symbol.ParameterClass.REF)
                    cb.addInst(PCodeInstruction.OpCode.DRF);
            }

            // Generación del valor
            cb.addBlock(expresion_valor.code);

            // Almacenamiento
            cb.addInst(PCodeInstruction.OpCode.ASG);

        } catch (SymbolNotFoundException e) {
            printError(String.format("Variable \"%s\" no encontrada.", nombre_variable));
        }

        return cb;
    }


    /** Genera bucle con inversión en P-Code
     * 
     * @param condicion bloque con el código para evaluar la condición del bucle
     * @param cuerpo bloque con las instrucciones que forman el cuerpo del bucle
     * @return el código generado
     */
    private static CodeBlock bucleGenerarCodigo(AtribExp condicion, CodeBlock cuerpo) {
        String etiqCond = CGUtils.newLabel();
        String etiqBody = CGUtils.newLabel();

        CodeBlock cb = new CodeBlock();
        cb.addInst(OpCode.JMP, etiqCond);
        cb.addLabel(etiqBody);
        cb.addBlock(cuerpo);
        cb.addLabel(etiqCond);
        cb.addBlock(condicion.code);
        cb.addInst(OpCode.JMT, etiqBody);
        return cb;
    }

// --- INICIO DE programa.jj ---
  static final public void Programa() throws ParseException {
    Token identificadorPrograma;
    CodeBlock cprog, cbloque, cprocfun = new CodeBlock();
    jj_consume_token(tPROGRAMA);
    identificadorPrograma = jj_consume_token(tIDENTIFICADOR);
        // Basado en diapositiva 16, Tema 6, Lección 11
        cprog = new CodeBlock();
    label_1:
    while (true) {
      if (jj_2_1(3)) {
        ;
      } else {
        break label_1;
      }
      declaracionVariables();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tINTEGER:
    case tCHARACTER:
    case tBOOLEAN:
    case tIDENTIFICADOR:
      cprocfun = declaracion_proc_func();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(tBEGGINING);
    cbloque = BloqueSentencias();
        // Basado en diapositiva 16, Tema 6, Lección 11
        String etiqEnterProgram = CGUtils.newLabel();
        cprog.addInst(OpCode.ENP, etiqEnterProgram); // Instrucción para saltar al programa ~enter program~
        cprog.addBlock(cprocfun);
        cprog.addComment("Comienzo del programa " + identificadorPrograma.image);
        cprog.addLabel(etiqEnterProgram);
        cprog.addBlock(cbloque);
        cprog.addComment("Fin del programa " + identificadorPrograma.image);
        cprog.addInst(OpCode.LVP); // Instrucción para salir del programa ~leave program~
        code.addBlock(cprog);
    jj_consume_token(tEND);
  }

  static final public CodeBlock BloqueSentencias() throws ParseException {
    CodeBlock cprocfun = new CodeBlock(), aux;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tESCRIBIR_LIN:
      case tESCRIBIR:
      case tLEER_LIN:
      case tLEER:
      case tENTACAR:
      case tCARAENT:
      case tINTEGER:
      case tCHARACTER:
      case tBOOLEAN:
      case tSELECTION:
      case tITERATION:
      case tABANDONAR:
      case tNADA:
      case tIDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      aux = instruccion();
                                cprocfun.addBlock(aux);
    }
      {if (true) return cprocfun;}
    throw new Error("Missing return statement in function");
  }

// --- INICIO DE tipos.jj ---
  static final public AtribTipo tipo() throws ParseException {
    AtribTipo aT;
    if (jj_2_2(2)) {
      aT = tipoArray();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tINTEGER:
      case tCHARACTER:
      case tBOOLEAN:
        aT = tipoEscalar();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return aT;}
    throw new Error("Missing return statement in function");
  }

  static final public AtribTipo tipoEscalar() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tINTEGER:
      jj_consume_token(tINTEGER);
                      {if (true) return new AtribTipo(Symbol.Types.INT );}
      break;
    case tCHARACTER:
      jj_consume_token(tCHARACTER);
                      {if (true) return new AtribTipo(Symbol.Types.CHAR);}
      break;
    case tBOOLEAN:
      jj_consume_token(tBOOLEAN);
                      {if (true) return new AtribTipo(Symbol.Types.BOOL);}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public AtribTipo tipoArray() throws ParseException {
    Symbol.Types t;
    AtribExp aE;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tCHARACTER:
      jj_consume_token(tCHARACTER);
                       t = Symbol.Types.CHAR;
      break;
    case tBOOLEAN:
      jj_consume_token(tBOOLEAN);
                       t = Symbol.Types.BOOL;
      break;
    case tINTEGER:
      jj_consume_token(tINTEGER);
                       t = Symbol.Types.INT;
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(tOPENING_SQUARE_BRACKET);
    aE = expresionSimple();
    jj_consume_token(tCLOSING_SQUARE_BRACKET);
        {if (true) return new AtribTipo(t, Integer.parseInt(aE.image));}
    throw new Error("Missing return statement in function");
  }

// --- INICIO DE variables.jj ---
  static final public ArrayList<String> listaIDs() throws ParseException {
    Token             token_id;
    ArrayList<String> ids = new ArrayList<String>();
    token_id = jj_consume_token(tIDENTIFICADOR);
                                     ids.add(token_id.image);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tCOMA:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      jj_consume_token(tCOMA);
      token_id = jj_consume_token(tIDENTIFICADOR);
                                     ids.add(token_id.image);
    }
      {if (true) return ids;}
    throw new Error("Missing return statement in function");
  }

  static final public void declaracionVariables() throws ParseException {
    AtribTipo         tipo_variables;
    ArrayList<String> ids;
    tipo_variables = tipo();
    ids = listaIDs();
    jj_consume_token(tSEMICOLON);
        declararVariablesGenerarCodigo(tipo_variables, ids);
  }

  static final public CodeBlock asignacionVariable() throws ParseException {
    Token token_id;
    AtribExp index_expr = null;
    AtribExp value_expr;
    token_id = jj_consume_token(tIDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tOPENING_SQUARE_BRACKET:
      jj_consume_token(tOPENING_SQUARE_BRACKET);
      index_expr = expresionSimple();
      jj_consume_token(tCLOSING_SQUARE_BRACKET);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(tASSIGN);
    value_expr = expresion();
    jj_consume_token(tSEMICOLON);
        {if (true) return asignacionVariableGenerarCodigo(token_id.image, index_expr, value_expr);}
    throw new Error("Missing return statement in function");
  }

// --- INICIO DE expresiones.jj ---
  static final public AtribExp primario() throws ParseException {
    AtribExp prim, ae;
    Symbol s;
    Token t;
    ArrayList<AtribExp> lPar = new ArrayList<AtribExp>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tENTACAR:
      prim = entAcar();
                              {if (true) return prim;}
      break;
    case tCARAENT:
      prim = carAent();
                              {if (true) return prim;}
      break;
    default:
      jj_la1[7] = jj_gen;
      if (jj_2_3(2)) {
        t = jj_consume_token(tIDENTIFICADOR);
        jj_consume_token(tOPENING_PARENTHESIS);
        lPar = parametros_llamada_funcion();
            checkParameters(t, lPar);
        jj_consume_token(tCLOSING_PARENTHESIS);
            try {
                s = st.getSymbol(t.image);
                SymbolFunction f = (SymbolFunction) s;
                prim = new AtribExp(f.returnType, false);
                prim.code.addComment("call " + t.image);
                for(int i = 0; i < lPar.size(); i++) {
                    if(f.parList.get(i).parClass == Symbol.ParameterClass.REF)
                        lPar.get(i).code.pop();
                    prim.code.addBlock(lPar.get(i).code);
                }
                prim.code.addOSFInst(CGUtils.memorySpaces[st.level], st.level - s.nivel + 1, s.label);
                //prim.code.addInst(PCodeInstruction.OpCode.DRF);
                {if (true) return prim;}
            } catch(SymbolNotFoundException e) {
                printError(String.format("Funci\u00f3n \"%s\" no encontrada en la tabla de s\u00edmbolos.", t.image));
                {if (true) return new AtribExp();}
            }
      } else if (jj_2_4(2)) {
        t = jj_consume_token(tIDENTIFICADOR);
        jj_consume_token(tOPENING_SQUARE_BRACKET);
        ae = expresion();
        jj_consume_token(tCLOSING_SQUARE_BRACKET);
            /*try {
                s = st.getSymbol(t.image);
            } catch (SymbolNotFoundException e) {
                printError(String.format("Array \"%s\" no encontrada en tabla de símbolos.", t.image));
                return new AtribExp();
            }
            SymbolArray s_array = (SymbolArray) s;
            prim = new AtribExp(s_array.baseType, false);
            prim.code.addInst(PCodeInstruction.OpCode.SRF, st.level - s.nivel, s.offset);
            if(s.parClass == Symbol.ParameterClass.REF) prim.code.addInst(PCodeInstruction.OpCode.DRF);
            prim.code.addBlock(ae.code);
            prim.code.addInst(PCodeInstruction.OpCode.STC, s_array.minInd);
            prim.code.addInst(PCodeInstruction.OpCode.SBT);
            prim.code.addInst(PCodeInstruction.OpCode.STC, 1);
            prim.code.addInst(PCodeInstruction.OpCode.TMS);
            prim.code.addInst(PCodeInstruction.OpCode.PLUS);
            prim.code.addInst(PCodeInstruction.OpCode.DRF);
            return prim;*/

            try {
                s = st.getSymbol(t.image);
            } catch(SymbolNotFoundException e) {
                printError(String.format("Array \"%s\" no encontrada en tabla de s\u00edmbolos.", t.image));
                {if (true) return new AtribExp();}
            }
            SymbolArray s_array = (SymbolArray) s;
            prim = new AtribExp(s_array.baseType, false);
            prim.code.addInst(PCodeInstruction.OpCode.SRF, st.level - s.nivel, s.offset);
            if(s.parClass == Symbol.ParameterClass.REF) prim.code.addInst(PCodeInstruction.OpCode.DRF);
            prim.code.addBlock(ae.code);
            prim.code.addInst(PCodeInstruction.OpCode.PLUS);
            prim.code.addInst(PCodeInstruction.OpCode.STC, s_array.minInd);
            prim.code.addInst(PCodeInstruction.OpCode.SBT);
            prim.code.addInst(PCodeInstruction.OpCode.DRF);
            {if (true) return prim;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tIDENTIFICADOR:
          t = jj_consume_token(tIDENTIFICADOR);
            try {
                s = st.getSymbol(t.image);
                prim = new AtribExp(s.type, false);
                prim.code.addInst(PCodeInstruction.OpCode.SRF, st.level - s.nivel, s.offset);
                prim.code.addInst(PCodeInstruction.OpCode.DRF);
                if(s.parClass == Symbol.ParameterClass.REF) prim.code.addInst(PCodeInstruction.OpCode.DRF);

                if(s instanceof SymbolArray) {
                    SymbolArray arr = (SymbolArray) s;
                    for(int offset = s.offset; offset <= s.offset + arr.maxInd - arr.minInd; ++offset) {
                        prim.codeVal.addInst(PCodeInstruction.OpCode.SRF, st.level - s.nivel, offset);
                        prim.codeVal.addInst(PCodeInstruction.OpCode.DRF);
                    }
                }

                {if (true) return prim;}
            } catch (SymbolNotFoundException e) {
                printError(String.format("Identificador \"%s\" no encontrado en tabla de s\u00edmbolos.", t.image));
                {if (true) return new AtribExp();}
            }
          break;
        case tCONSTANT:
          t = jj_consume_token(tCONSTANT);
            prim = new AtribExp(Symbol.Types.INT, true, t.image);
            prim.code.addInst(PCodeInstruction.OpCode.STC, Integer.parseInt(t.image));
            {if (true) return prim;}
          break;
        case tCHAR:
          t = jj_consume_token(tCHAR);
            prim = new AtribExp(Symbol.Types.CHAR, true, Character.toString(t.image.charAt(1)));
            prim.code.addInst(PCodeInstruction.OpCode.STC, (int) t.image.charAt(1));
            {if (true) return prim;}
          break;
        case tSTRING:
          t = jj_consume_token(tSTRING);
            String cadena = t.image.substring(1, t.image.length() - 1);
            try {
                byte[] bytes = cadena.getBytes("UTF-8");
                prim = new AtribExp(Symbol.Types.STRING, true, cadena);
                for(int i = bytes.length - 1; i >= 0; --i)
                    prim.code.addInst(PCodeInstruction.OpCode.STC, (int) bytes[i]);
                {if (true) return prim;}
            } catch(UnsupportedEncodingException e) {
                printError("Car\u00e1cter irreconocible");
                {if (true) return new AtribExp();}
            }
          break;
        case tTRUE:
          jj_consume_token(tTRUE);
            prim = new AtribExp(Symbol.Types.BOOL, true, "true");
            prim.code.addInst(PCodeInstruction.OpCode.STC, 1);
            {if (true) return prim;}
          break;
        case tFALSE:
          jj_consume_token(tFALSE);
            prim = new AtribExp(Symbol.Types.BOOL, true, "false");
            prim.code.addInst(PCodeInstruction.OpCode.STC, 0);
            {if (true) return prim;}
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public AtribExp factor() throws ParseException {
    Token op = null;
    AtribExp res;
    Boolean ok = true;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tPLUS:
    case tMINUS:
    case tNOT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tNOT:
        op = jj_consume_token(tNOT);
        break;
      case tPLUS:
        op = jj_consume_token(tPLUS);
        break;
      case tMINUS:
        op = jj_consume_token(tMINUS);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tOPENING_PARENTHESIS:
      jj_consume_token(tOPENING_PARENTHESIS);
      res = expresion();
      jj_consume_token(tCLOSING_PARENTHESIS);
      break;
    case tENTACAR:
    case tCARAENT:
    case tTRUE:
    case tFALSE:
    case tSTRING:
    case tCHAR:
    case tCONSTANT:
    case tIDENTIFICADOR:
      res = primario();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        if(op == null) {if (true) return res;}

        // SEMÁNTICO
        switch(op.image) {
            case "!": ok = typeEqual(Symbol.Types.BOOL, res.type,
                String.format("El operador \"%s\" requiere un valor de tipo BOOL, pero se ha proporcionado %s.", op.image, res.type));
                break;
            default: ok &=  typeEqual(Symbol.Types.INT, res.type,
                String.format("El operador \"%s\" requiere un valor de tipo INT, pero se ha proporcionado %s.", op.image, res.type));
                break;
        }
        if(!ok) {if (true) return new AtribExp();}

        // GENERACIÓN DE CÓDIGO
        switch(op.image) {
            case "!":
                res.code.addInst(PCodeInstruction.OpCode.NGB); break;
            case "-":
                res.code.addInst(PCodeInstruction.OpCode.NGI); break;
            default:
                break; // "+" no afecta al entero
        }

        res.isConst = false;
        {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public AtribExp termino() throws ParseException {
    Token op = null;
    AtribExp left, right, aux;
    Boolean ok = true;
    left = factor();
                      aux = left;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tTIMES:
      case tDIVIDE:
      case tMOD:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      op = operador_multiplicativo();
      right = factor();
            // SEMÁNTICO
            ok &= typeEqual(Symbol.Types.INT, Arrays.asList(aux.type, right.type),
                String.format("Los operandos del operador \"%s\" deben ser de tipo INT. Recibido %s %s %s.", op.image, aux.type, op.image, right.type));
            aux = AtribExp.copy(right);

            // GENERACIÓN DE CÓDIGO
            left.code.addBlock(right.code);
            switch(op.image.toLowerCase()) {
                case "*":
                    left.code.addInst(PCodeInstruction.OpCode.TMS); break;
                case "/":
                    left.code.addInst(PCodeInstruction.OpCode.DIV); break;
                case "mod":
                    left.code.addInst(PCodeInstruction.OpCode.MOD); break;
            }
    }
        if(!ok) {if (true) return new AtribExp();}
        left.isConst = false;
        {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  static final public AtribExp expresionSimple() throws ParseException {
    Token op = null;
    AtribExp left, right, aux;
    Boolean ok = true;
    left = termino();
                       aux = left;
    label_5:
    while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tPLUS:
        op = jj_consume_token(tPLUS);
        break;
      case tMINUS:
        op = jj_consume_token(tMINUS);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = termino();
            // SEMÁNTICO
            ok &= typeEqual(Symbol.Types.INT, Arrays.asList(aux.type, right.type),
                String.format("Los operandos del operador \"%s\" deben ser de tipo INT. Recibido %s %s %s.", op.image, aux.type, op.image, right.type));
            aux = AtribExp.copy(right);

            // GENERACIÓN DE CÓDIGO
            left.code.addBlock(right.code);
            switch(op.image.toLowerCase()) {
                case "+":
                    left.code.addInst(PCodeInstruction.OpCode.PLUS); break;
                case "-":
                    left.code.addInst(PCodeInstruction.OpCode.SBT); break;
            }
    }
        if(!ok) {if (true) return new AtribExp();}
        left.isConst = false;
        {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  static final public AtribExp relacion() throws ParseException {
    Token op = null;
    AtribExp left, right;
    Boolean ok = true;
    left = expresionSimple();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tGT:
    case tGE:
    case tLT:
    case tLE:
    case tEQUAL:
    case tNOTEQUAL:
      op = operador_relacional();
      right = expresionSimple();
            // SEMÁNTICO
            if(op.image.matches("=|<>"))
                ok = typeEqual(left.type, right.type,
                    String.format("Los operandos del operador \"%s\" deben ser del mismo tipo. %s != %s.", op.image, left.type, right.type));
            else // <, <=, >, >=
                ok = typeEqual(Symbol.Types.INT, Arrays.asList(left.type, right.type),
                    String.format("Los operandos del operador \"%s\" deben ser de tipo INT. Se proporciono %s y %s.", op.image, left.type, right.type));

            if(!ok) {if (true) return new AtribExp();}

            // GENERACIÓN DE CÓDIGO
            left.code.addBlock(right.code);
            switch(op.image) {
                case "=":   left.code.addInst(PCodeInstruction.OpCode.EQ);  break;
                case "<>":  left.code.addInst(PCodeInstruction.OpCode.NEQ); break;
                case "<":   left.code.addInst(PCodeInstruction.OpCode.LT);  break;
                case "<=":  left.code.addInst(PCodeInstruction.OpCode.LTE); break;
                case ">":   left.code.addInst(PCodeInstruction.OpCode.GT);  break;
                case ">=":  left.code.addInst(PCodeInstruction.OpCode.GTE); break;
            }
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
        if(op != null) left.type = Symbol.Types.BOOL;
        left.isConst = false;
        {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  static final public AtribExp expresion() throws ParseException {
    Token op = null;
    AtribExp left, right, aux;
    Boolean ok = true;
    left = relacion();
                        aux = left;
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tAND:
      case tOR:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tAND:
        op = jj_consume_token(tAND);
        break;
      case tOR:
        op = jj_consume_token(tOR);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = relacion();
            // SEMÁNTICO
            ok &= typeEqual(Symbol.Types.BOOL, Arrays.asList(aux.type, right.type),
                String.format("Los operandos para el operador \"%s\" deben ser de tipo BOOL. Recibido %s %s.", op.image, aux.type, right.type));
            aux = AtribExp.copy(right);

            // GENERACIÓN DE CÓDIGO
            left.code.addBlock(right.code);
            switch(op.image) {
                case "&":   left.code.addInst(PCodeInstruction.OpCode.AND);  break;
                case "|":  left.code.addInst(PCodeInstruction.OpCode.OR); break;
            }
    }
        if(!ok) {if (true) return new AtribExp();}
        left.isConst = false;
        {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  static final public void lista_una_o_mas_exps() throws ParseException {
    label_7:
    while (true) {
      expresion();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tENTACAR:
      case tCARAENT:
      case tTRUE:
      case tFALSE:
      case tSTRING:
      case tCHAR:
      case tCONSTANT:
      case tOPENING_PARENTHESIS:
      case tPLUS:
      case tMINUS:
      case tNOT:
      case tIDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_7;
      }
    }
  }

  static final public Token operador_multiplicativo() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tTIMES:
      t = jj_consume_token(tTIMES);
                      {if (true) return t;}
      break;
    case tDIVIDE:
      t = jj_consume_token(tDIVIDE);
                      {if (true) return t;}
      break;
    case tMOD:
      t = jj_consume_token(tMOD);
                      {if (true) return t;}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token operador_relacional() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tEQUAL:
      t = jj_consume_token(tEQUAL);
                      {if (true) return t;}
      break;
    case tNOTEQUAL:
      t = jj_consume_token(tNOTEQUAL);
                      {if (true) return t;}
      break;
    case tLT:
      t = jj_consume_token(tLT);
                      {if (true) return t;}
      break;
    case tLE:
      t = jj_consume_token(tLE);
                      {if (true) return t;}
      break;
    case tGT:
      t = jj_consume_token(tGT);
                      {if (true) return t;}
      break;
    case tGE:
      t = jj_consume_token(tGE);
                      {if (true) return t;}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// --- INICIO DE funciones.jj ---
  static final public CodeBlock declaracion_proc_func() throws ParseException {
    CodeBlock res = new CodeBlock();
    CodeBlock aux = new CodeBlock();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tIDENTIFICADOR:
        aux = declaracion_proc();
                                      res.addBlock(aux);
        break;
      case tINTEGER:
      case tCHARACTER:
      case tBOOLEAN:
        aux = declaracion_func();
                                      res.addBlock(aux);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tINTEGER:
      case tCHARACTER:
      case tBOOLEAN:
      case tIDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_8;
      }
    }
      {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public CodeBlock declaracion_proc() throws ParseException {
    Token t;
    ArrayList<Symbol> parametros = new ArrayList<Symbol>();
    CodeBlock cres = new CodeBlock();
    CodeBlock cinst = new CodeBlock();
    CodeBlock aux = new CodeBlock();
    SymbolProcedure sProc;
    t = jj_consume_token(tIDENTIFICADOR);
    jj_consume_token(tOPENING_PARENTHESIS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tINTEGER:
    case tCHARACTER:
    case tBOOLEAN:
      parametros = parametros_declaraciones();
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    jj_consume_token(tCLOSING_PARENTHESIS);
        String etiqInicioProc = CGUtils.newLabel();
        sProc = insertProcedure(t, parametros, etiqInicioProc);
    label_9:
    while (true) {
      if (jj_2_6(3)) {
        ;
      } else {
        break label_9;
      }
      declaracionVariables();
    }
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tINTEGER:
      case tCHARACTER:
      case tBOOLEAN:
      case tIDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tIDENTIFICADOR:
        declaracion_proc();
        break;
      case tINTEGER:
      case tCHARACTER:
      case tBOOLEAN:
        declaracion_func();
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(tBEGGINING);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tESCRIBIR_LIN:
      case tESCRIBIR:
      case tLEER_LIN:
      case tLEER:
      case tENTACAR:
      case tCARAENT:
      case tINTEGER:
      case tCHARACTER:
      case tBOOLEAN:
      case tSELECTION:
      case tITERATION:
      case tABANDONAR:
      case tNADA:
      case tIDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_11;
      }
      aux = instruccion();
                            cinst.addBlock(aux);
    }
    jj_consume_token(tEND);
        // DECLARACIÓN DE CÓDGIO

        cres.addLabel(etiqInicioProc);

        // Parámetros
        for (int i = parametros.size() - 1; i >= 0; --i) {
            Symbol param = parametros.get(i);
            cres.addComment("parameter " + param.name);

            if(param instanceof SymbolArray && param.parClass != Symbol.ParameterClass.REF) {
                SymbolArray arr = (SymbolArray) param;
                String etiq = CGUtils.newLabel();
                cres.addInst(OpCode.SRF, st.level - param.nivel, param.offset + arr.maxInd - arr.minInd);
                cres.addLabel(etiq);
                cres.addInst(OpCode.DUP);
                cres.addInst(OpCode.SRF, st.level - param.nivel, CGUtils.memorySpaces[st.level]);
                cres.addInst(OpCode.ASGI);
                cres.addInst(OpCode.ASGI);
                cres.addInst(OpCode.SRF, st.level - param.nivel, CGUtils.memorySpaces[st.level]);
                cres.addInst(OpCode.DRF);
                cres.addInst(OpCode.STC, 1);
                cres.addInst(OpCode.SBT);
                cres.addInst(OpCode.DUP);
                cres.addInst(OpCode.SRF, st.level - param.nivel, param.offset);
                cres.addInst(OpCode.GTE);
                cres.addInst(OpCode.JMT, etiq);
                cres.addInst(OpCode.POP);
            } else {
                // General case: assign parameter value
                cres.addInst(OpCode.SRF, st.level - param.nivel, param.offset);
                cres.addInst(OpCode.ASGI);
            }
        }

        // Cuerpo procedimiento
        cres.addComment("inicio procedimiento " + t.image);
        cres.addBlock(cinst);

        // Fin procedimiento
        cres.addInst(OpCode.CSF);
        cres.addComment("fin procedimiento " + t.image);

        st.removeBlock();
        {if (true) return cres;}
    throw new Error("Missing return statement in function");
  }

  static final public CodeBlock declaracion_func() throws ParseException {
    Token t;
    ArrayList<Symbol> parametros = new ArrayList<Symbol>();
    CodeBlock cres = new CodeBlock();
    CodeBlock cinst = new CodeBlock();
    CodeBlock aux = new CodeBlock();
    SymbolFunction sFunc;
    AtribTipo aT;
    aT = tipoEscalar();
    t = jj_consume_token(tIDENTIFICADOR);
    jj_consume_token(tOPENING_PARENTHESIS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tINTEGER:
    case tCHARACTER:
    case tBOOLEAN:
      parametros = parametros_declaraciones();
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    jj_consume_token(tCLOSING_PARENTHESIS);
        String etiqInicioProc = CGUtils.newLabel();
        cres.addComment("AAAAAAAAA");
        sFunc = insertFunction(t, parametros,  aT, etiqInicioProc);
    label_12:
    while (true) {
      if (jj_2_7(3)) {
        ;
      } else {
        break label_12;
      }
      declaracionVariables();
    }
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tINTEGER:
      case tCHARACTER:
      case tBOOLEAN:
      case tIDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tIDENTIFICADOR:
        declaracion_proc();
        break;
      case tINTEGER:
      case tCHARACTER:
      case tBOOLEAN:
        declaracion_func();
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(tBEGGINING);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tESCRIBIR_LIN:
      case tESCRIBIR:
      case tLEER_LIN:
      case tLEER:
      case tENTACAR:
      case tCARAENT:
      case tINTEGER:
      case tCHARACTER:
      case tBOOLEAN:
      case tSELECTION:
      case tITERATION:
      case tABANDONAR:
      case tNADA:
      case tIDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_14;
      }
      aux = instruccion();
                            cinst.addBlock(aux);
    }
    jj_consume_token(tEND);
        // DECLARACIÓN DE CÓDGIO

        cres.addLabel(etiqInicioProc);

        // Parámetros
        for (int i = parametros.size() - 1; i >= 0; --i) {
            Symbol param = parametros.get(i);
            cres.addComment("parameter " + param.name);

            if(param instanceof SymbolArray && param.parClass != Symbol.ParameterClass.REF) {
                SymbolArray arr = (SymbolArray) param;
                String etiq = CGUtils.newLabel();
                cres.addInst(OpCode.SRF, st.level - param.nivel, param.offset + arr.maxInd - arr.minInd);
                cres.addLabel(etiq);
                cres.addInst(OpCode.DUP);
                cres.addInst(OpCode.SRF, st.level - param.nivel, CGUtils.memorySpaces[st.level]);
                cres.addInst(OpCode.ASGI);
                cres.addInst(OpCode.ASGI);
                cres.addInst(OpCode.SRF, st.level - param.nivel, CGUtils.memorySpaces[st.level]);
                cres.addInst(OpCode.DRF);
                cres.addInst(OpCode.STC, 1);
                cres.addInst(OpCode.SBT);
                cres.addInst(OpCode.DUP);
                cres.addInst(OpCode.SRF, st.level - param.nivel, param.offset);
                cres.addInst(OpCode.GTE);
                cres.addInst(OpCode.JMT, etiq);
                cres.addInst(OpCode.POP);
            } else {
                // General case: assign parameter value
                cres.addInst(OpCode.SRF, st.level - param.nivel, param.offset);
                cres.addInst(OpCode.ASGI);
            }
        }

        // Cuerpo procedimiento
        cres.addComment("inicio procedimiento " + t.image);
        cres.addBlock(cinst);

        // Fin procedimiento
        cres.addInst(OpCode.SRF, 0, sFunc.offset);
        cres.addInst(OpCode.DRF);
        cres.addInst(OpCode.CSF);
        cres.addComment("fin procedimiento " + t.image);

        st.removeBlock();
        {if (true) return cres;}
    throw new Error("Missing return statement in function");
  }

  static final public CodeBlock llamar_funcion() throws ParseException {
    ArrayList<AtribExp> lPar = new ArrayList<AtribExp>();
    Symbol fun;
    Token t;
    CodeBlock c = new CodeBlock();
    t = jj_consume_token(tIDENTIFICADOR);
    jj_consume_token(tOPENING_PARENTHESIS);
    lPar = parametros_llamada_funcion();
        checkParameters(t, lPar);
    jj_consume_token(tCLOSING_PARENTHESIS);
    jj_consume_token(tSEMICOLON);
        // GENERACIÓN DE CÓDIGO
        try {
            fun = st.getSymbol(t.image);
        } catch (SymbolNotFoundException e) {
            printError(String.format("Funci\u00f3n \"%s\" no encontrada en la tabla de s\u00edmbolos.", t.image));
            {if (true) return new CodeBlock();}
        }
        c.addComment("call " + t.image);
        // añadir código de los parámetros
        if(fun instanceof SymbolFunction) {
            SymbolFunction f = (SymbolFunction) fun;
            for(int i = 0; i < lPar.size(); i++) {
                if(f.parList.get(i).parClass == Symbol.ParameterClass.REF) {
                    lPar.get(i).code.pop();
                    c.addBlock(lPar.get(i).code);
                } else if(f.parList.get(i).type == Symbol.Types.ARRAY) {
                    c.addBlock(lPar.get(i).codeVal);
                } else {
                    c.addBlock(lPar.get(i).code);
                }
            }
            c.addOSFInst(CGUtils.memorySpaces[st.level], st.level - fun.nivel + 1, fun.label);
        }
        if(fun instanceof SymbolProcedure) {
            SymbolProcedure p = (SymbolProcedure) fun;
            for(int i = 0; i < lPar.size(); i++) {
                if(p.parList.get(i).parClass == Symbol.ParameterClass.REF) {
                    lPar.get(i).code.pop();
                    c.addBlock(lPar.get(i).code);
                } else if(p.parList.get(i).type == Symbol.Types.ARRAY) {
                    c.addBlock(lPar.get(i).codeVal);
                } else {
                    c.addBlock(lPar.get(i).code);
                }
            }
            c.addOSFInst(CGUtils.memorySpaces[st.level], st.level - fun.nivel, fun.label);
        }

        // si es una función (no procedimiento)
        if(fun instanceof SymbolFunction) {
            c.addInst(PCodeInstruction.OpCode.DRF);
        }

        {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<AtribExp> parametros_llamada_funcion() throws ParseException {
    ArrayList<AtribExp> lpar = new ArrayList<AtribExp>();
    AtribExp ae = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tENTACAR:
    case tCARAENT:
    case tTRUE:
    case tFALSE:
    case tSTRING:
    case tCHAR:
    case tCONSTANT:
    case tOPENING_PARENTHESIS:
    case tPLUS:
    case tMINUS:
    case tNOT:
    case tIDENTIFICADOR:
      ae = expresion();
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
        if(ae != null)
            lpar.add(ae);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tCOMA:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_15;
      }
      jj_consume_token(tCOMA);
      ae = expresion();
            if(ae != null)
                lpar.add(ae);
    }
      {if (true) return lpar;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<Symbol> parametros_declaraciones() throws ParseException {
    AtribTipo aT;
    ArrayList<String> lVars;
    boolean isRef = false;
    ArrayList<Symbol> allSymbols = new ArrayList<Symbol>();
    aT = tipo();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tREF:
      jj_consume_token(tREF);
               isRef = true;
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    lVars = listaIDs();
        for (String id : lVars) {
            Symbol sV = null;
            if(aT.isArray) {
                sV = new SymbolArray(
                    id, 0, aT.size-1, aT.type, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
            } else {
                switch(aT.type) {
                    case INT:
                        sV = new SymbolInt(
                            id, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                        break;
                    case BOOL:
                        sV = new SymbolBool(
                            id, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                        break;
                    case CHAR:
                        sV = new SymbolChar(
                            id, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                        break;
                    default:
                        printError("Tipo no v\u00e1lido.");
                        break;
                }
            }
            allSymbols.add(sV);
        }
        isRef = false;
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tSEMICOLON:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_16;
      }
      jj_consume_token(tSEMICOLON);
      aT = tipo();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tREF:
        jj_consume_token(tREF);
                   isRef = true;
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      lVars = listaIDs();
        for (String id : lVars) {
                Symbol sV = null;
                if(aT.isArray) {
                    sV = new SymbolArray(
                        id, 0, aT.size-1, aT.type, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                } else {
                    switch(aT.type) {
                        case INT:
                            sV = new SymbolInt(
                                id, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                            break;
                        case BOOL:
                            sV = new SymbolBool(
                                id, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                            break;
                        case CHAR:
                            sV = new SymbolChar(
                                id, isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL);
                            break;
                        default:
                            System.out.println("Tipo no v\u00e1lido.");
                            break;
                    }
                }
                allSymbols.add(sV);
            }
    }
      {if (true) return allSymbols;}
    throw new Error("Missing return statement in function");
  }

// --- INICIO DE instrucciones.jj ---
  static final public CodeBlock instruccion() throws ParseException {
    CodeBlock c = new CodeBlock();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tESCRIBIR_LIN:
      c = escribir_linea();
      jj_consume_token(tSEMICOLON);
      break;
    case tESCRIBIR:
      c = escribir();
      jj_consume_token(tSEMICOLON);
      break;
    case tLEER_LIN:
      c = leer_linea();
      jj_consume_token(tSEMICOLON);
      break;
    case tLEER:
      c = leer();
      jj_consume_token(tSEMICOLON);
      break;
    case tENTACAR:
      entAcar();
      jj_consume_token(tSEMICOLON);
      break;
    case tCARAENT:
      carAent();
      jj_consume_token(tSEMICOLON);
      break;
    default:
      jj_la1[36] = jj_gen;
      if (jj_2_8(2)) {
        c = llamar_funcion();
      } else if (jj_2_9(2)) {
        c = asignacionVariable();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tSELECTION:
          c = seleccion();
          break;
        case tITERATION:
          c = bucle();
          break;
        default:
          jj_la1[37] = jj_gen;
          if (jj_2_10(2)) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case tIDENTIFICADOR:
              declaracion_proc();
              break;
            case tINTEGER:
            case tCHARACTER:
            case tBOOLEAN:
              declaracion_func();
              break;
            default:
              jj_la1[35] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case tABANDONAR:
              jj_consume_token(tABANDONAR);
              jj_consume_token(tSEMICOLON);
        code.addInst(OpCode.LVP, 0);
              break;
            case tNADA:
              jj_consume_token(tNADA);
              jj_consume_token(tSEMICOLON);
        code.addInst(OpCode.NOP, 0);
              break;
            default:
              jj_la1[38] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
      {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  static final public CodeBlock bucle() throws ParseException {
    AtribExp condicion;
    CodeBlock cuerpo = new CodeBlock();
    CodeBlock b = new CodeBlock();  // Bloque final para el bucle generado
    CodeBlock c;
    jj_consume_token(tITERATION);
    condicion = expresion();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tESCRIBIR_LIN:
      case tESCRIBIR:
      case tLEER_LIN:
      case tLEER:
      case tENTACAR:
      case tCARAENT:
      case tINTEGER:
      case tCHARACTER:
      case tBOOLEAN:
      case tSELECTION:
      case tITERATION:
      case tABANDONAR:
      case tNADA:
      case tIDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_17;
      }
      c = instruccion();
                          cuerpo.addBlock(c);
    }
    jj_consume_token(tEND_ITERATION);
        b = bucleGenerarCodigo(condicion, cuerpo);
      {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

  static final public CodeBlock seleccion() throws ParseException {
    AtribExp auxCond;
    CodeBlock cres = new CodeBlock(), auxInst;
    ArrayList<AtribExp> condiciones = new ArrayList<AtribExp>();
    ArrayList<CodeBlock> cuerpos = new ArrayList<CodeBlock>();
    boolean hayOtherwise = false;
    jj_consume_token(tSELECTION);
    label_18:
    while (true) {
      jj_consume_token(tCASE);
      auxCond = expresion();
                                  condiciones.add(auxCond);
      jj_consume_token(tCOLON);
      auxInst = instrSelect();
                                  cuerpos.add(auxInst);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tCASE:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_18;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tOTHERWISE:
      jj_consume_token(tOTHERWISE);
      jj_consume_token(tCOLON);
      auxInst = instrSelect();
                                  cuerpos.add(auxInst); hayOtherwise = true;
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    jj_consume_token(tEND_SELECTION);
        // GENERACIÓN DE CÓDIGO
        cres.addComment("inicio select");
        String etiqFin = CGUtils.newLabel();

        for (int i = 0; i < condiciones.size(); ++i) {
            String etiqSiguiente = CGUtils.newLabel();
            cres.addBlock(condiciones.get(i).code);
            cres.addInst(OpCode.JMF, etiqSiguiente);
            cres.addBlock(cuerpos.get(i));
            cres.addInst(OpCode.JMP, etiqFin);
            cres.addLabel(etiqSiguiente);
        }

        // Si hay bloque "otherwise", añadirlo al final
        if (hayOtherwise) {
            cres.addComment("otherwise");
            cres.addBlock(cuerpos.get(cuerpos.size() - 1));
        }

        cres.addLabel(etiqFin);
        cres.addComment("fin select");

        {if (true) return cres;}
    throw new Error("Missing return statement in function");
  }

  static final public CodeBlock instrSelect() throws ParseException {
    CodeBlock cres = new CodeBlock(), aux;
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tESCRIBIR_LIN:
      case tESCRIBIR:
      case tLEER_LIN:
      case tLEER:
      case tENTACAR:
      case tCARAENT:
      case tINTEGER:
      case tCHARACTER:
      case tBOOLEAN:
      case tSELECTION:
      case tITERATION:
      case tABANDONAR:
      case tNADA:
      case tIDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_19;
      }
      aux = instruccion();
                                  cres.addBlock(aux);
    }
      {if (true) return cres;}
    throw new Error("Missing return statement in function");
  }

// --- INICIO DE especiales.jj ---
  static final public CodeBlock escribir_linea() throws ParseException {
    ArrayList<AtribExp> args = new ArrayList<AtribExp>();
    CodeBlock c = new CodeBlock();
    jj_consume_token(tESCRIBIR_LIN);
    jj_consume_token(tOPENING_PARENTHESIS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tENTACAR:
    case tCARAENT:
    case tTRUE:
    case tFALSE:
    case tSTRING:
    case tCHAR:
    case tCONSTANT:
    case tOPENING_PARENTHESIS:
    case tPLUS:
    case tMINUS:
    case tNOT:
    case tIDENTIFICADOR:
      args = escribir_params();
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    jj_consume_token(tCLOSING_PARENTHESIS);
        c.addComment("Comienzo escribir l\u00ednea");
        for (AtribExp a : args) {
            c.addBlock(a.code);
            if(a.type == Symbol.Types.STRING) {
                for(int i = 0; i < a.code.getNumInstructions(); ++i)
                    c.addInst(OpCode.WRT, 0);
            }
            else if(a.type == Symbol.Types.CHAR) {
                c.addInst(OpCode.WRT, 0);
            }
            else if(a.type == Symbol.Types.INT) {
                c.addInst(OpCode.WRT, 1);
            }
        }
        // Salto de línea
        c.addInst(OpCode.STC, (int)'\n');
        c.addInst(OpCode.WRT, 0);
        c.addComment("Fin escribir l\u00ednea");
        {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  static final public CodeBlock escribir() throws ParseException {
    ArrayList<AtribExp> args = new ArrayList<AtribExp>();
    CodeBlock c = new CodeBlock();
    jj_consume_token(tESCRIBIR);
    jj_consume_token(tOPENING_PARENTHESIS);
    args = escribir_params();
    jj_consume_token(tCLOSING_PARENTHESIS);
        c.addComment("Comienzo escribir");
        for (AtribExp a : args) {
            c.addBlock(a.code);
            if(a.type == Symbol.Types.STRING) {
                for(int i = 0; i < a.code.getNumInstructions(); ++i)
                    c.addInst(OpCode.WRT, 0);
            }
            else if(a.type == Symbol.Types.CHAR) {
                c.addInst(OpCode.WRT, 0);
            }
            else if(a.type == Symbol.Types.INT) {
                c.addInst(OpCode.WRT, 1);
            }
        }
        c.addComment("Fin escribir");
        {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<AtribExp> escribir_params() throws ParseException {
    ArrayList<AtribExp> args = new ArrayList<AtribExp>();
    AtribExp a;
    a = expresion();
        typeNotEqual(Arrays.asList(Symbol.Types.ARRAY, Symbol.Types.PROCEDURE, Symbol.Types.UNDEFINED),
            a.type, String.format("No se puede escribir tipo de dato \"%s\"", a.type));
        args.add(a);
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tCOMA:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_20;
      }
      jj_consume_token(tCOMA);
      a = expresion();
            typeNotEqual(Arrays.asList(Symbol.Types.ARRAY, Symbol.Types.PROCEDURE, Symbol.Types.UNDEFINED),
            a.type, String.format("No se puede escribir tipo de dato \"%s\"", a.type));
            args.add(a);
    }
      {if (true) return args;}
    throw new Error("Missing return statement in function");
  }

  static final public CodeBlock leer_linea() throws ParseException {
    ArrayList<String> lVars = new ArrayList<String>();
    CodeBlock c = new CodeBlock();
    jj_consume_token(tLEER_LIN);
    jj_consume_token(tOPENING_PARENTHESIS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tIDENTIFICADOR:
      lVars = listaIDs();
            typeNotEqual(Arrays.asList(Symbol.Types.ARRAY, Symbol.Types.PROCEDURE, Symbol.Types.UNDEFINED, Symbol.Types.PROCEDURE), lVars);
            for (String id : lVars) {
                try {
                    Symbol s = st.getSymbol(id);
                    c.addComment("Comienzo leer");
                    c.addInst(OpCode.SRF, st.level - s.nivel, s.offset);
                    int tipo = (s.type == Symbol.Types.CHAR) ? 0 : 1;
                    c.addInst(OpCode.DRF);
                    c.addInst(OpCode.RD, tipo);
                    c.addComment("Fin leer");
                } catch (SymbolNotFoundException e) {
                    printError("Variable \"" + id + "\" no encontrada.");
                }
            }
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
    jj_consume_token(tCLOSING_PARENTHESIS);
      {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  static final public CodeBlock leer() throws ParseException {
    ArrayList<String> lVars = new ArrayList<String>();
    CodeBlock c = new CodeBlock();
    jj_consume_token(tLEER);
    jj_consume_token(tOPENING_PARENTHESIS);
    lVars = listaIDs();
        typeNotEqual(Arrays.asList(Symbol.Types.ARRAY, Symbol.Types.PROCEDURE, Symbol.Types.UNDEFINED, Symbol.Types.PROCEDURE), lVars);
        for(String id : lVars) {
            try {
                Symbol s = st.getSymbol(id);
                c.addComment("Comienzo leer l\u00ednea");
                c.addInst(OpCode.SRF, st.level - s.nivel, s.offset);
                int tipo = (s.type == Symbol.Types.CHAR) ? 0 : 1;
                c.addInst(OpCode.DRF);
                c.addInst(OpCode.RD, tipo);
                c.addComment("Fin leer l\u00ednea");
            } catch (SymbolNotFoundException e) {
                printError("Variable \"" + id + "\" no encontrada.");
            }
        }
    jj_consume_token(tCLOSING_PARENTHESIS);
      {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  static final public AtribExp entAcar() throws ParseException {
    AtribExp res;
    jj_consume_token(tENTACAR);
    jj_consume_token(tOPENING_PARENTHESIS);
    res = expresionSimple();
    jj_consume_token(tCLOSING_PARENTHESIS);
        if(!typeEqual(Symbol.Types.INT, res.type, String.format("Tipo incorrecto. Se esperaba INT pero se encontr\u00f3 %s.", res.type))) {
            {if (true) return new AtribExp();}
        }
        // No hace falta transformarlo porque CHAR e INT son ambos 32 bits en máquina P
        res.type = Symbol.Types.CHAR;
        res.isConst = true;
        {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public AtribExp carAent() throws ParseException {
    AtribExp res;
    jj_consume_token(tCARAENT);
    jj_consume_token(tOPENING_PARENTHESIS);
    res = primario();
    jj_consume_token(tCLOSING_PARENTHESIS);
        if(!typeEqual(Symbol.Types.CHAR, res.type, String.format("Tipo incorrecto. Se esperaba CHAR pero se encontr\u00f3 %s.", res.type))) {
            {if (true) return new AtribExp();}
        }
        // No hace falta transformarlo porque CHAR e INT son ambos 32 bits en máquina P
        res.type = Symbol.Types.INT;
        res.isConst = true;
        {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(tCHARACTER)) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(tINTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(tCONSTANT)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(tIDENTIFICADOR)) return true;
    if (jj_scan_token(tOPENING_PARENTHESIS)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(tIDENTIFICADOR)) return true;
    if (jj_scan_token(tOPENING_PARENTHESIS)) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(tENTACAR)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    return false;
  }

  static private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_42()) return true;
    if (jj_scan_token(tIDENTIFICADOR)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(tIDENTIFICADOR)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(tOPENING_SQUARE_BRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(tIDENTIFICADOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    if (jj_scan_token(tASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(tOPENING_PARENTHESIS)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(tIDENTIFICADOR)) return true;
    if (jj_scan_token(tOPENING_PARENTHESIS)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_28()) return true;
    if (jj_3R_29()) return true;
    if (jj_scan_token(tSEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(tCOMA)) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_scan_token(tFALSE)) return true;
    return false;
  }

  static private boolean jj_3_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(tIDENTIFICADOR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_38()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(tTRUE)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(tIDENTIFICADOR)) return true;
    if (jj_scan_token(tOPENING_SQUARE_BRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(tINTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(tBOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(tCHARACTER)) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_scan_token(tCARAENT)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(tSTRING)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    }
    if (jj_scan_token(tOPENING_SQUARE_BRACKET)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(tCHAR)) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(tBOOLEAN)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public gclTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  /** Whether we are looking ahead. */
  static private boolean jj_lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[46];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x70000,0x604f7e00,0x70000,0x70000,0x70000,0x0,0x0,0x6000,0x8c000000,0x0,0x0,0x8c006000,0x0,0x0,0x0,0x0,0x0,0x8c006000,0x0,0x0,0x70000,0x70000,0x70000,0x70000,0x70000,0x604f7e00,0x70000,0x70000,0x70000,0x604f7e00,0x8c006000,0x0,0x8000,0x0,0x8000,0x70000,0x7e00,0x480000,0x60000000,0x604f7e00,0x200000,0x10000000,0x604f7e00,0x8c006000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4000000,0x4000000,0x0,0x0,0x0,0x4,0x40,0x0,0x4000003,0x41800,0x41800,0x4000203,0xe000,0x1800,0x1f80000,0x30000,0x30000,0x4041a03,0xe000,0x1f80000,0x4000000,0x4000000,0x0,0x4000000,0x4000000,0x4000000,0x0,0x4000000,0x4000000,0x4000000,0x4041a03,0x4,0x0,0x8,0x0,0x4000000,0x0,0x0,0x0,0x4000000,0x0,0x0,0x4000000,0x4041a03,0x4,0x4000000,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[10];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public gcl(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public gcl(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new gclTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public gcl(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new gclTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public gcl(gclTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(gclTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[60];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 46; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 60; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 10; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
