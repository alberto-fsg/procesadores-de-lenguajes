/* Generated By:JavaCC: Do not edit this line. gclConstants.java */
package traductor;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface gclConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LETTER = 6;
  /** RegularExpression Id. */
  int DIGIT = 7;
  /** RegularExpression Id. */
  int tPROGRAMA = 8;
  /** RegularExpression Id. */
  int tESCRIBIR_LIN = 9;
  /** RegularExpression Id. */
  int tESCRIBIR = 10;
  /** RegularExpression Id. */
  int tLEER_LIN = 11;
  /** RegularExpression Id. */
  int tLEER = 12;
  /** RegularExpression Id. */
  int tENTACAR = 13;
  /** RegularExpression Id. */
  int tCARAENT = 14;
  /** RegularExpression Id. */
  int tREF = 15;
  /** RegularExpression Id. */
  int tINTEGER = 16;
  /** RegularExpression Id. */
  int tCHARACTER = 17;
  /** RegularExpression Id. */
  int tBOOLEAN = 18;
  /** RegularExpression Id. */
  int tSELECTION = 19;
  /** RegularExpression Id. */
  int tEND_SELECTION = 20;
  /** RegularExpression Id. */
  int tCASE = 21;
  /** RegularExpression Id. */
  int tITERATION = 22;
  /** RegularExpression Id. */
  int tEND_ITERATION = 23;
  /** RegularExpression Id. */
  int tBEGGINING = 24;
  /** RegularExpression Id. */
  int tEND = 25;
  /** RegularExpression Id. */
  int tTRUE = 26;
  /** RegularExpression Id. */
  int tFALSE = 27;
  /** RegularExpression Id. */
  int tOTHERWISE = 28;
  /** RegularExpression Id. */
  int tABANDONAR = 29;
  /** RegularExpression Id. */
  int tNADA = 30;
  /** RegularExpression Id. */
  int tSTRING = 31;
  /** RegularExpression Id. */
  int tCHAR = 32;
  /** RegularExpression Id. */
  int tCONSTANT = 33;
  /** RegularExpression Id. */
  int tCOMA = 34;
  /** RegularExpression Id. */
  int tSEMICOLON = 35;
  /** RegularExpression Id. */
  int tUNDERSCORE = 36;
  /** RegularExpression Id. */
  int tASSIGN = 37;
  /** RegularExpression Id. */
  int tOPENING_SQUARE_BRACKET = 38;
  /** RegularExpression Id. */
  int tCLOSING_SQUARE_BRACKET = 39;
  /** RegularExpression Id. */
  int tCOLON = 40;
  /** RegularExpression Id. */
  int tOPENING_PARENTHESIS = 41;
  /** RegularExpression Id. */
  int tCLOSING_PARENTHESIS = 42;
  /** RegularExpression Id. */
  int tPLUS = 43;
  /** RegularExpression Id. */
  int tMINUS = 44;
  /** RegularExpression Id. */
  int tTIMES = 45;
  /** RegularExpression Id. */
  int tDIVIDE = 46;
  /** RegularExpression Id. */
  int tMOD = 47;
  /** RegularExpression Id. */
  int tAND = 48;
  /** RegularExpression Id. */
  int tOR = 49;
  /** RegularExpression Id. */
  int tNOT = 50;
  /** RegularExpression Id. */
  int tGT = 51;
  /** RegularExpression Id. */
  int tGE = 52;
  /** RegularExpression Id. */
  int tLT = 53;
  /** RegularExpression Id. */
  int tLE = 54;
  /** RegularExpression Id. */
  int tEQUAL = 55;
  /** RegularExpression Id. */
  int tNOTEQUAL = 56;
  /** RegularExpression Id. */
  int tDOT = 57;
  /** RegularExpression Id. */
  int tIDENTIFICADOR = 58;
  /** RegularExpression Id. */
  int tOTHER = 59;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<LETTER>",
    "<DIGIT>",
    "\"Programa\"",
    "\"escribir_lin\"",
    "\"escribir\"",
    "\"leer_lin\"",
    "\"leer\"",
    "\"entAcar\"",
    "\"carAent\"",
    "\"ref\"",
    "\"entero\"",
    "\"caracter\"",
    "\"booleano\"",
    "\"Sel\"",
    "\"Fsel\"",
    "\"caso\"",
    "\"Mq\"",
    "\"FMq\"",
    "\"Principio\"",
    "\"Fin\"",
    "\"verdadero\"",
    "\"falso\"",
    "\"dlc\"",
    "\"abandonar\"",
    "\"nada\"",
    "<tSTRING>",
    "<tCHAR>",
    "<tCONSTANT>",
    "\",\"",
    "\";\"",
    "\"_\"",
    "\":=\"",
    "\"[\"",
    "\"]\"",
    "\":\"",
    "\"(\"",
    "\")\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"mod\"",
    "\"&\"",
    "\"|\"",
    "\"!\"",
    "\">\"",
    "\">=\"",
    "\"<\"",
    "\"<=\"",
    "\"=\"",
    "\"<>\"",
    "\".\"",
    "<tIDENTIFICADOR>",
    "<tOTHER>",
  };

}
