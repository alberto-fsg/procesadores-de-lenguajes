//*****************************************************************
// File:   gcl.jj
// Author: Procesadores de Lenguajes-University of Zaragoza
// Date:   enero 25
// Coms:   compilar mediante "ant"
//*****************************************************************

options {
	IGNORE_CASE = true;
	COMMON_TOKEN_ACTION = true; // para invocar a CommonTokenAction
}

PARSER_BEGIN(gcl)

package traductor;

//...

public class gcl {
   //...
   
   public static void main(String[] args) {
	   gcl parser = null;
	   
	   try {
		   if(args.length == 0) {
			   parser = new gcl(System.in);
		   }
		   else {
			   parser = new gcl(new java.io.FileInputStream(args[0]));
		   }
		   //Programa es el símbolo inicial de la gramática
		   parser.Programa();
		   //...
		   System.out.println("***** Análisis terminado con éxito *****");
	   }
	   catch (java.io.FileNotFoundException e) {
		   System.err.println ("Fichero " + args[0] + " no encontrado.");
	   }
	   catch (TokenMgrError e) {
		   System.err.println("LEX_ERROR: " + e.getMessage());
	   }
	   catch (Exception e) {
			// Handle the exception
			System.err.println("An exception occurred: " + e.getMessage());
	   }
	}
}
PARSER_END(gcl)

// sacado de https://cs.lmu.edu/~ray/notes/javacc/
// "preprocesado"
SKIP: {
  " "
| "\t"
| "\n"
| "\r"
| <"--" (~["\n","\r"])* ("\n"|"\r")> // comentarios monolínea
}

// auxiliares
TOKEN : {
	< #LETTER: (["a"-"z","A"-"Z"]) >
|	< #DIGIT: ["0"-"9"] >
}

// todos los tokens de gcl
// tOTHER no es léxicamente válido, el resto de tokens si
TOKEN : {
    < tPROGRAMA: "Programa" >
|   < tENTACAR: "entAcar" >
|   < tENTAENT: "entAent" >
|   < tESCRIBIR: "tescribir" >
|   < tESCRIBIR_LIN: "tescribir_lin" >
|   < tLEER: "tleer" >
|   < tLEER_LIN: "leer_lin" >
|   < tSTRING: "\"" (~["\""])* "\"" >
| 	< tINTEGER: "entero" >
|   < tCHARACTER: "caracter" >
|	< tBOOLEAN: "booleano" >
|	< tCOMA: "," >
|	< tSEMICOLON: ";" >
|	< tUNDERSCORE: "_" >
|	< tASSIGN: ":=" >
|	< tSINGLE_QUOTE: "'" >
|	< tOPENING_SQUARE_BRACKET: "[" >
|	< tCLOSING_SQUARE_BRACKET: "]" >
|	< tSELECTION: "Sel" >
|	< tEND_SELECTION: "Fsel" >
|   < tCASE: "caso" >
|   < tCOLON: ":" >
|	< tOTHERWISE: "dlc" >
|	< tITERATION: "Mq" >
|	< tEND_ITERATION: "FMq" >
|	< tNO_INSTRUCTION: "nada" >
|	< tOPENING_PARENTHESIS: "(" >
|	< tCLOSING_PARENTHESIS: ")" >
|	< tBEGGINING: "Principio" >
|	< tEND: "Fin" >
|	< tPLUS: "+" >
|	< tMINUS: "-" >
|	< tTIMES: "*" >
|	< tDIVIDE: "/" >
|	< tMOD: "mod" >
|	< tAND: "&" >
|	< tOR: "|" >
|	< tNOT: "!" >
|	< tGT: ">" >
|	< tGE: ">=" >
|	< tLT: "<" >
|	< tLE: "<=" >
|	< tEQUAL: "=" >
|	< tNOTEQUAL: "<>" >
|	< tDOT: "." >
|	< tCONSTANT: ( <DIGIT> )+ >
|   < tTRUE: "verdadero" >
|   < tFALSE: "falso" >
|	< tIDENTIFICADOR: ( <LETTER> | "_" ) ( <LETTER> | <DIGIT> | "_" )* >
|   < tOTHER: ~[] >
}

// deprecado al parecer, https://parsers.org/javacc21/token-hooks-revisited/
TOKEN_MGR_DECLS : {
    public static void CommonTokenAction(Token t) {
        System.out.printf("(%d,%d): %s \"%s\"%n", 
            t.beginLine, t.beginColumn, getTokenType(t.kind), t.image);
    }

    private static String getTokenType(int kind) {
        switch(kind) {
            case gclConstants.tIDENTIFICADOR: return "identificador";
            case gclConstants.tASSIGN: return "operador asignación";
            case gclConstants.tCONSTANT: return "constante entera";
            case gclConstants.tSTRING: return "cadena";
            default: return "token"; // todos los tokens sin lexema relevante
        }
    }
}


//------------ Símbolo inicial de la gramática. Para análisis léxico no hace falta más

void Programa() : 
{

}
{
   (
       < tPROGRAMA >
     | < tENTACAR >
     | < tENTAENT >
     | < tESCRIBIR >
     | < tESCRIBIR_LIN >
     | < tLEER >
     | < tLEER_LIN >
     | < tSTRING >
     | < tINTEGER > 
     | < tCHARACTER > 
     | < tBOOLEAN > 
     | < tCOMA > 
     | < tSEMICOLON > 
     | < tUNDERSCORE >
     | < tASSIGN >
     | < tSINGLE_QUOTE >
     | < tOPENING_SQUARE_BRACKET >
     | < tCLOSING_SQUARE_BRACKET >
     | < tSELECTION >
     | < tEND_SELECTION >
     | < tCASE >
     | < tCOLON >
     | < tOTHERWISE >
     | < tITERATION >
     | < tEND_ITERATION >
     | < tNO_INSTRUCTION >
     | < tOPENING_PARENTHESIS >
     | < tCLOSING_PARENTHESIS >
     | < tBEGGINING >
     | < tEND >
     | < tPLUS >
     | < tMINUS >
     | < tTIMES >
     | < tDIVIDE >
     | < tMOD >
     | < tAND >
     | < tOR >
     | < tNOT >
     | < tGT >
     | < tGE >
     | < tLT >
     | < tLE >
     | < tEQUAL >
     | < tNOTEQUAL >
     | < tDOT >
     | < tCONSTANT >
     | < tTRUE >
     | < tFALSE >
     | < tIDENTIFICADOR >
     // | < tOTHER >
   )+
   < EOF >
   {

   }
}

//---------------------------------------------------------
void programa() :
{}
{
    < tPROGRAMA >
    < tIDENTIFICADOR >
    ( declaracion_variables() )?
    ( declaracion_procs_funcs() )?
    < tBEGGINING >
    ( instrucciones )
    < tEND >
}
//---------------------------------------------------------
void declaracion_variables() :
{}
{
    ( declaracion() )+
}

void declaracion() :
{}
{
    tipo()
    lista_ids()
    < tSEMICOLON >
}

void lista_ids() :
{}
{
    < tIDENTIFICADOR >
    ( <tCOMA> < tIDENTIFICADOR > )*
}
//---------------------------------------------------------
void expresion() :
{}
{
    relacion()
    ( ( < tAND > | < tOR > ) relacion() )*
}

void relacion() :
{}
{
    expresion_simple()
    ( operador_relacional() expresion_simple() )?
}

void operador_relacional() :
{}
{
    < tEQUAL > | < tNOTEQUAL > | < tLT > | < tLE > | < tGT > | < tGE > 
}

void expresion_simple() :
{}
{
    termino()
    ( ( < tPLUS > | < tMINUS > ) termino() )*
}

void termino() :
{}
{
    factor()
    ( operador_multiplicativo() factor() )*
}

void operador_multiplicativo() :
{}
{
    < tTIMES > | < tDIVIDE > | < tMOD >
}

void factor() :
{}
{
    ( <tNOT> | < tPLUS > | < tMINUS > )?
    ( < tOPENING_PARENTHESIS > expresion() < tCLOSING_PARENTHESIS > | primario() )
}

void primario() :
{}
{
    
}


